{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Linux for ARM development boards Welcome to the Armbian Documentation! \u00b6 If you are new to Armbian , the Getting Started section provides a tutorial for everything you need to get Armbian running, and answers many F requently A sked Q uestions. It then continues on to more advanced topics. If you need help , and have read through Getting Started , check out Troubleshooting . If you still cannot find what you need here, visit the Armbian forum , where your input can help improve this documentation. What is Armbian? \u00b6 Armbian is a base operating system platform for single board computers (SBCs) that other projects can trust to build upon. Lightweight Debian or Ubuntu based linux distribution specialized for ARM development boards Each system is compiled, assembled and optimized by Armbian Build Tools It has powerful build and software development tools to make custom builds A vibrant community What is the difference between Armbian and Debian Linux Common features \u00b6 Armbian Linux is availble as Debian and Ubuntu based images, compiled from scratch Images are reduced to actual data size and automatically resized at first boot Root password is 1234 . You are forced to change this password and (optional) create a normal user at first login Ethernet adapter with DHCP and SSH server ready on default port (22) Wireless adapter with DHCP ready (if present) but disabled. You can use armbian-config to connect to your router or create an AP NAND, SATA, eMMC and USB install script is included ( nand-sata-install ) Upgrades are done via standard apt upgrade method Login script shows: board name with large text, distribution base, kernel version, system load, uptime, memory usage, IP address, CPU and drive temperature, ambient temperature from Temper if exits, SD card usage, battery conditions and number of updates to install Performance tweaks \u00b6 /var/log is mounted as compressed device (zram, lzo), log2ram service saves logs to disk daily and on shutdown Half of memory is allocated/extended for/with compressed swap /tmp is mounted as tmpfs (optionally compressed) Browser profile memory caching Optimized IO scheduler (check /etc/init.d/armhwinfo ) Journal data writeback enabled. ( /etc/fstab ) commit=600 to flush data to the disk every 10 minutes ( /etc/fstab ) Optimized CPU frequency scaling with interactive governor ( /etc/init.d/cpufrequtils ) 480-1010Mhz @Allwinner A10/A20 480-1260Mhz @Allwinner H3 392-996Mhz @Freescale imx 600-2000Mhz @Exynos & S905 eth0 interrupts are using dedicated core (Allwinner based boards) What is supported? \u00b6 \u201cSupported\u201d is not a guarantee. \u201cSupported\u201d implies a particular SBC is at a high level of software maturity, but has no intention to support all possible SBC functions. Supported boards do receive preferential treatment to bugfix, improve, or add additional functionality based on any of the following, non-exclusive criteria: The discretion of the \u201cArmbian Development Team\u201d The availability of the \u201cArmbian Development Team\u201d The availability of sample boards and ease of testing The mainline kernel maturity for the particular SoC or SBC platform Paid engagements, long-term sponsorship to the Armbian Project or volunteer developers Vendor or 3rd party has a designated resource providing support for a SBC or platform ON BEHALF OF THE COMMUNITY and is contributing to the project Supported chips \u00b6 Allwinner A10, A20, A31, H2+, H3, H5, H6, A64 Amlogic S805 and S905 (Odroid boards), S802/S812, S805, S905, S905X and S912 (fork by @balbes150 ) Actionsemi S500 Freescale / NXP iMx6 Marvell Armada A380 Rockchip RK3288 Samsung Exynos 5422 Supported boards \u00b6 Check download page for recently supported list. Get Involved! \u00b6 Contribute Community Contact Our IRC channel is #armbian on freenode .","title":"Home"},{"location":"#welcome-to-the-armbian-documentation","text":"If you are new to Armbian , the Getting Started section provides a tutorial for everything you need to get Armbian running, and answers many F requently A sked Q uestions. It then continues on to more advanced topics. If you need help , and have read through Getting Started , check out Troubleshooting . If you still cannot find what you need here, visit the Armbian forum , where your input can help improve this documentation.","title":"Welcome to the Armbian Documentation!"},{"location":"#what-is-armbian","text":"Armbian is a base operating system platform for single board computers (SBCs) that other projects can trust to build upon. Lightweight Debian or Ubuntu based linux distribution specialized for ARM development boards Each system is compiled, assembled and optimized by Armbian Build Tools It has powerful build and software development tools to make custom builds A vibrant community What is the difference between Armbian and Debian Linux","title":"What is Armbian?"},{"location":"#common-features","text":"Armbian Linux is availble as Debian and Ubuntu based images, compiled from scratch Images are reduced to actual data size and automatically resized at first boot Root password is 1234 . You are forced to change this password and (optional) create a normal user at first login Ethernet adapter with DHCP and SSH server ready on default port (22) Wireless adapter with DHCP ready (if present) but disabled. You can use armbian-config to connect to your router or create an AP NAND, SATA, eMMC and USB install script is included ( nand-sata-install ) Upgrades are done via standard apt upgrade method Login script shows: board name with large text, distribution base, kernel version, system load, uptime, memory usage, IP address, CPU and drive temperature, ambient temperature from Temper if exits, SD card usage, battery conditions and number of updates to install","title":"Common features"},{"location":"#performance-tweaks","text":"/var/log is mounted as compressed device (zram, lzo), log2ram service saves logs to disk daily and on shutdown Half of memory is allocated/extended for/with compressed swap /tmp is mounted as tmpfs (optionally compressed) Browser profile memory caching Optimized IO scheduler (check /etc/init.d/armhwinfo ) Journal data writeback enabled. ( /etc/fstab ) commit=600 to flush data to the disk every 10 minutes ( /etc/fstab ) Optimized CPU frequency scaling with interactive governor ( /etc/init.d/cpufrequtils ) 480-1010Mhz @Allwinner A10/A20 480-1260Mhz @Allwinner H3 392-996Mhz @Freescale imx 600-2000Mhz @Exynos & S905 eth0 interrupts are using dedicated core (Allwinner based boards)","title":"Performance tweaks"},{"location":"#what-is-supported","text":"\u201cSupported\u201d is not a guarantee. \u201cSupported\u201d implies a particular SBC is at a high level of software maturity, but has no intention to support all possible SBC functions. Supported boards do receive preferential treatment to bugfix, improve, or add additional functionality based on any of the following, non-exclusive criteria: The discretion of the \u201cArmbian Development Team\u201d The availability of the \u201cArmbian Development Team\u201d The availability of sample boards and ease of testing The mainline kernel maturity for the particular SoC or SBC platform Paid engagements, long-term sponsorship to the Armbian Project or volunteer developers Vendor or 3rd party has a designated resource providing support for a SBC or platform ON BEHALF OF THE COMMUNITY and is contributing to the project","title":"What is supported?"},{"location":"#supported-chips","text":"Allwinner A10, A20, A31, H2+, H3, H5, H6, A64 Amlogic S805 and S905 (Odroid boards), S802/S812, S805, S905, S905X and S912 (fork by @balbes150 ) Actionsemi S500 Freescale / NXP iMx6 Marvell Armada A380 Rockchip RK3288 Samsung Exynos 5422","title":"Supported chips"},{"location":"#supported-boards","text":"Check download page for recently supported list.","title":"Supported boards"},{"location":"#get-involved","text":"Contribute Community Contact Our IRC channel is #armbian on freenode .","title":"Get Involved!"},{"location":"Community_IRC/","text":"IRC Channel \u00b6 \ud83d\udc4f --------------- Overview \u00b6 As announced in the forums everyone interested can communicate in realtime using the internet relay chat (or IRC ) . Well known clients for CLI are Weechat or Irssi and for GUI Hexchat . \ud83d\udd0c --------------- Connect \u00b6 If you have a desktop environment with properly installed IRC client simply put this URL into your internet browser: irc://chat.freenode.net/armbian (Unfortunately Markdown does not allow to create clickable irc:// links) Or put the data in your client manually: Server: chat.freenode.net Ports: 6697 / non-encrypted: 6667 Channel: #armbian Or simply use Freenode\u2019s webirc client: https://webchat.freenode.net/?channels=armbian \ud83d\udcac --------------- Channels \u00b6 #armbian is the project\u2019s main channel. As for now all user interaction happens there, regardless if chit-chat, issue tracking, peer-to-peer user support or even upcoming release planning talks . #armbian-commits is a moderated channel. Whenever a new interaction with the build repository on Github happens it will be announced. Also newly added issues on Jira will be pasted. User chat is not possible. #armbian-rss is a live forum feed. Whenever a new post in the Armbian Forums is made it will be announced here. User chat is not possible. Of course you can also enable desktop notification in your favorite browser for the forums. Everybody is free to join any of these channels. We may or may not add more channels in future depending on the needs. \ud83d\udc6e --------------- Services \u00b6 Besides the services offered by Freenode (like Nickserv or Chanserv) Armbian has set up some own services. ArmbianGithub Has the purpose to fill #armbian-commits and #armbian-rss like described above ArmbianTwitter Recurringly searches on Twitter for new Tweets from @armbian and when people are actually mentioning Armbian ArmbianHelper Allows to search for Issues and Task on Jira If you know the actual task id simply write it to the channel and the bot will look it up. Like AR-123 Search issue by keyword/s in the summary. Like ,searchissue Allwinner H6 Take note of the , . Will output up to three results. Allows to query the Armbian apt repository Search for package names with wildcards. Like ,package search linux-image*sunxi* Get info about a package like version and size. ,package info linux-image-current-sunxi Get the packages description. ,package description linux-image-current-sunxi Allows to search forums via Google API (not very precise though) Example: ,g Allwinner H6 panfrost A few more minor commands, mostly used by staff or do not need introduction .nonprofit , .contribute , .rtfm , .fortune , .sunxi , .meson , help , help irc \u2754 --------------- FAQ \u00b6 Why are there so many people in the channel and nobody is talking? It is pretty common for community IRC channels for people to simply idle there. Many also using so called IRC bouncers https://en.wikipedia.org/wiki/BNC_(software) that keeps their connection to the channel alive. I wrote \u2018Hi\u2019 but nobody answered. How do I get support there? Probably there is nobody around at the time. Keep in mind that all users are spread around the globe and therefore living in many different time zones. It is a common habit to simply state your question or issue and then wait patiently for an answer. Depending how complex this may take up to a few hours because most Armbian contributors have detailed knowledge in a specific board family only. Is the chat history public as well? Yes. All conversation is redundantly logged. These logs are open to the public. You can find them here: http://irc.armbian.com Why do some people have odd hostnames like \u2018@armbian/staff/lanefu\u2019 or \u2018@unaffiliated/username\u2019? These hostnames are so called project affiliation cloaks. These are meant to show a users affiliation to a specific project and their role there. You can find more information about that here: https://freenode.net/kb/answer/cloaks Can I have that too? Yes. An Armbian affiliation cloak can be requested from Werner either via forums or IRC. They usually will be granted if you are a well known member in forums, a contributor via Github or donated to the project. Make sure you identified yourself to Nickserv beforehand. If you cannot find yourself in the list above you are free to request an unaffiliated cloak from Freenode staff. Check the link above for information. How can I protect my nickname so nobody can spoof me? Register your nick with Freenode\u2019s Nickserv service. Check https://freenode.net/kb/answer/registration Even though it is not mandatory you should register and identify with the services as other channels for example may not allow unregistered users to chat or join at all as anti-spam measure. If the situation demands Armbian will enforce this as well. Why do some users have voice (+) in channel? As mentioned in forums \u201call contributors to the project, regardless if forums staff, contributor on Github or well known and longtime active user\u201d may get voice on request. \ud83d\udc49 --------------- Bottom line \u00b6 If you have any questions, comments regarding the IRC channels and/or services or found an issue in this documentation for think you can enhance it get in touch with Werner either via forums or IRC. By the way if you like to have a free IRC bouncer to always be up-to-date and never miss a conversation again you should check out this thread .","title":"IRC"},{"location":"Community_IRC/#irc-channel","text":"","title":"IRC Channel"},{"location":"Community_IRC/#-overview","text":"As announced in the forums everyone interested can communicate in realtime using the internet relay chat (or IRC ) . Well known clients for CLI are Weechat or Irssi and for GUI Hexchat .","title":"\ud83d\udc4f --------------- Overview"},{"location":"Community_IRC/#-connect","text":"If you have a desktop environment with properly installed IRC client simply put this URL into your internet browser: irc://chat.freenode.net/armbian (Unfortunately Markdown does not allow to create clickable irc:// links) Or put the data in your client manually: Server: chat.freenode.net Ports: 6697 / non-encrypted: 6667 Channel: #armbian Or simply use Freenode\u2019s webirc client: https://webchat.freenode.net/?channels=armbian","title":"\ud83d\udd0c --------------- Connect"},{"location":"Community_IRC/#-channels","text":"#armbian is the project\u2019s main channel. As for now all user interaction happens there, regardless if chit-chat, issue tracking, peer-to-peer user support or even upcoming release planning talks . #armbian-commits is a moderated channel. Whenever a new interaction with the build repository on Github happens it will be announced. Also newly added issues on Jira will be pasted. User chat is not possible. #armbian-rss is a live forum feed. Whenever a new post in the Armbian Forums is made it will be announced here. User chat is not possible. Of course you can also enable desktop notification in your favorite browser for the forums. Everybody is free to join any of these channels. We may or may not add more channels in future depending on the needs.","title":"\ud83d\udcac --------------- Channels"},{"location":"Community_IRC/#-services","text":"Besides the services offered by Freenode (like Nickserv or Chanserv) Armbian has set up some own services. ArmbianGithub Has the purpose to fill #armbian-commits and #armbian-rss like described above ArmbianTwitter Recurringly searches on Twitter for new Tweets from @armbian and when people are actually mentioning Armbian ArmbianHelper Allows to search for Issues and Task on Jira If you know the actual task id simply write it to the channel and the bot will look it up. Like AR-123 Search issue by keyword/s in the summary. Like ,searchissue Allwinner H6 Take note of the , . Will output up to three results. Allows to query the Armbian apt repository Search for package names with wildcards. Like ,package search linux-image*sunxi* Get info about a package like version and size. ,package info linux-image-current-sunxi Get the packages description. ,package description linux-image-current-sunxi Allows to search forums via Google API (not very precise though) Example: ,g Allwinner H6 panfrost A few more minor commands, mostly used by staff or do not need introduction .nonprofit , .contribute , .rtfm , .fortune , .sunxi , .meson , help , help irc","title":"\ud83d\udc6e --------------- Services"},{"location":"Community_IRC/#-faq","text":"Why are there so many people in the channel and nobody is talking? It is pretty common for community IRC channels for people to simply idle there. Many also using so called IRC bouncers https://en.wikipedia.org/wiki/BNC_(software) that keeps their connection to the channel alive. I wrote \u2018Hi\u2019 but nobody answered. How do I get support there? Probably there is nobody around at the time. Keep in mind that all users are spread around the globe and therefore living in many different time zones. It is a common habit to simply state your question or issue and then wait patiently for an answer. Depending how complex this may take up to a few hours because most Armbian contributors have detailed knowledge in a specific board family only. Is the chat history public as well? Yes. All conversation is redundantly logged. These logs are open to the public. You can find them here: http://irc.armbian.com Why do some people have odd hostnames like \u2018@armbian/staff/lanefu\u2019 or \u2018@unaffiliated/username\u2019? These hostnames are so called project affiliation cloaks. These are meant to show a users affiliation to a specific project and their role there. You can find more information about that here: https://freenode.net/kb/answer/cloaks Can I have that too? Yes. An Armbian affiliation cloak can be requested from Werner either via forums or IRC. They usually will be granted if you are a well known member in forums, a contributor via Github or donated to the project. Make sure you identified yourself to Nickserv beforehand. If you cannot find yourself in the list above you are free to request an unaffiliated cloak from Freenode staff. Check the link above for information. How can I protect my nickname so nobody can spoof me? Register your nick with Freenode\u2019s Nickserv service. Check https://freenode.net/kb/answer/registration Even though it is not mandatory you should register and identify with the services as other channels for example may not allow unregistered users to chat or join at all as anti-spam measure. If the situation demands Armbian will enforce this as well. Why do some users have voice (+) in channel? As mentioned in forums \u201call contributors to the project, regardless if forums staff, contributor on Github or well known and longtime active user\u201d may get voice on request.","title":"\u2754 --------------- FAQ"},{"location":"Community_IRC/#-bottom-line","text":"If you have any questions, comments regarding the IRC channels and/or services or found an issue in this documentation for think you can enhance it get in touch with Werner either via forums or IRC. By the way if you like to have a free IRC bouncer to always be up-to-date and never miss a conversation again you should check out this thread .","title":"\ud83d\udc49 --------------- Bottom line"},{"location":"Developer-Guide_Build-Options/","text":"KERNEL_ONLY (yes|no): leave empty to display selection dialog each time set to \u201cyes\u201d to compile only kernel, u-boot and other packages for installing on existing Armbian system set to \u201cno\u201d to build complete OS image for writing to SD card KERNEL_CONFIGURE (yes|no): leave empty to display selection dialog each time set to \u201cyes\u201d to configure kernel (add or remove modules or features). Kernel configuration menu will be brought up before compilation set to \u201cno\u201d to compile kernel without changing default or custom provided configuration CLEAN_LEVEL (comma-separated list): defines what should be cleaned. Default value is \"make,debs\" - clean sources and remove all packages. Changing this option can be useful when rebuilding images or building more than one image \u201cmake\u201d = execute make clean for selected kernel and u-boot sources, \u201cimages\u201d = delete output/images (complete OS images), \u201cdebs\u201d = delete packages in output/debs for current branch and device family, \u201calldebs\u201d = delete all packages in output/debs , \u201ccache\u201d = delete cache/rootfs (rootfs cache), \u201coldcache\u201d = remove old cache/rootfs except for the newest 8 files, \u201csources\u201d = delete cache/sources (all downloaded sources), \u201cextras\u201d = delete additional packages for current release in output/debs/extra REPOSITORY_INSTALL (comma-separated list): list of core packages which will be installed from repository \u201cu-boot\u201d, \u201ckernel\u201d, \u201cbsp\u201d, \u201carmbian-config\u201d, \u201carmbian-firmware\u201d \u201d\u201d = packages will be built from sources or use the one from local cache KERNEL_KEEP_CONFIG (yes|no): set to \u201cyes\u201d to use kernel config file from previous compilation for the same branch, device family and version set to \u201cno\u201d to use default or user-provided config file BUILD_MINIMAL (yes|no): set to \u201cyes\u201d to build bare CLI image suitable for application deployment. This option is not compatible with BUILD_DESKTOP=\u201dyes\u201d and BUILD_EXTERNAL=\u201dyes\u201d BUILD_DESKTOP (yes|no): set to \u201cyes\u201d to build image with minimal desktop environment set to \u201cno\u201d to build image with console interface only EXTERNAL (yes|no): set to \u201cyes\u201d to compile and install extra applications and firmware BSPFREEZE (no|yes): freeze (from update) armbian packages when building images (u-boot, kernel, dtb) INSTALL_HEADERS (no|yes): install kernel headers package EXTERNAL_NEW (no|prebuilt|compile): set to \u201cprebuilt\u201d to install extra applications from repository set to \u201ccompile\u201d to compile extra applications in chroot CREATE_PATCHES (yes|no): set to \u201cyes\u201d will prompt you right before the compilation starts to make changes to the source code. Separate for u-boot and kernel. It will also create a patch out of this. If you want that this patch is included in the normal run, you need to copy it to appropriate directory set to \u201cno\u201d compilation will run uninterrupted BUILD_ALL (yes|no|demo): cycle through all available board and kernel configurations and make images for all combinations LIB_TAG (master|\u201cbranchname\u201d): set to \u201cmaster\u201d to compile from the master branch (default) set to \u201cbranchname\u201d to compile from any other branch available (\u201cnext\u201d & \u201csecond\u201d are deprecated and not recommended to use). CARD_DEVICE (/dev/sdx) set to the device of your SD card. The image will be burned and verified using Etcher for CLI. CRYPTROOT_ENABLE (yes|no): set to enable LUKS encrypted rootfs. You must also provide unlock password CRYPTROOT_PASSPHRASE=\u201dMYSECRECTPASS\u201d and optional CRYPTROOT_SSH_UNLOCK=yes CRYPTROOT_SSH_UNLOCK_PORT=2222 CRYPTROOT_PARAMETERS=\u201dcustom cryptsetup options\u201d Function might not work well with all distributions. Debian Buster and Stretch were tested. For building under the Docker you have to use privilege mode which can be enable in userpatches/config-docker. Warning: This feature was added as community contribution and mostly functional. Under some circumstances though the prompt will not be shown. Therefore it should be considered experimental. More info: [1] https://github.com/armbian/build/commit/681e58b6689acda6a957e325f12e7b748faa8330 [2] https://github.com/armbian/build/issues/1183 Hidden options to minimize user input for build automation: \u00b6 BOARD (string): you can set name of board manually to skip dialog prompt BRANCH (legacy|current|dev): you can set kernel and u-boot branch manually to skip dialog prompt; some options may not be available for all devices RELEASE (stretch|buster|bionic|focal): you can set OS release manually to skip dialog prompt; use this option with KERNEL_ONLY=yes to create board support package Hidden options for advanced users (default values are marked bold ): \u00b6 EXPERT (yes| no ): Show development features in interactive mode USERPATCHES_PATH ( userpatches/ ): set alternate path for location of userpatches folder USE_CCACHE ( yes |no): use a C compiler cache to speed up the build process PRIVATE_CCACHE (yes| no ) use $DEST/ccache as ccache home directory PROGRESS_DISPLAY (none| plain |dialog): way to display output of verbose processes - compilation, packaging, debootstrap PROGRESS_LOG_TO_FILE (yes| no ): duplicate output, affected by previous option, to log files output/debug/*.log USE_MAINLINE_GOOGLE_MIRROR (yes| no ): use googlesource.com mirror for downloading mainline kernel sources, may be faster than git.kernel.org depending on your location USE_GITHUB_UBOOT_MIRROR (yes| no ): use unofficial Github mirror for downloading mainline u-boot sources, may be faster than git.denx.de depending on your location OFFLINE_WORK (yes| no ): skip downloading and updating sources as well as time and host check. Set to \u201cyes\u201d and you can collect packages without accessing the internet. FORCE_USE_RAMDISK (yes|no): overrides autodetect for using tmpfs in new debootstrap and image creation process FIXED_IMAGE_SIZE (integer): create image file of this size (in megabytes) instead of minimal COMPRESS_OUTPUTIMAGE (comma-separated list): create compressed archive with image file and GPG signature for redistribution sha - generate SHA256 hash for image, gpg - sign image using gpg, 7z - compress image, hash and signature to 7z archive, gz - compress image only using gz format, yes - compatibility shorcut for sha,gpg,7z. SEVENZIP (yes| no ): create .7z archive with extreme compression ratio instead of .zip BUILD_KSRC ( yes |no): create kernel source packages ROOTFS_TYPE ( ext4 |f2fs|btrfs|nfs|fel): create image with different root filesystems instead of default ext4. Requires setting FIXED_IMAGE_SIZE to something smaller than the size of your SD card for F2FS BTRFS_COMPRESSION ( lzo |zlib:3|zstd) select btrfs filesystem compression method and compression level. By default the compression is lzo , user must ensure kernel version is above 4.14 when selecting zstd or setting zlib compression level( zlib:[1-9] ). Both the host and the target kernel version must above 5.1 when selecting zstd compression level ( zstd:[1-15] ), since kernel start supporting zstd compression ratio from 5.1 . The script does not check the legality of input variable(compression ratio), input like zlib:1234 is legal to script, but illegal to kernel. When using microsd card, zstd is preferred because of the poor 4k I/O performance of microsd card. FORCE_BOOTSCRIPT_UPDATE (yes|no): set to \u201cyes\u201d to force bootscript to get updated during bsp package upgrade NAMESERVER (ipv4 address): the DNS resolver used inside the build chroot. Does not affect the final image. Default: 1.0.0.1 DOWNLOAD_MIRROR select download mirror for toolchain and debian/ubuntu packages . set to china to use mirrors.tuna.tsinghua.edu.cn , it will be very fast thanks to tsinghua university. leave it empty to use official source. MAINLINE_MIRROR select mainline mirror of linux-stable.git set to google to use mirror provided by Google, the same as USE_MAINLINE_GOOGLE_MIRROR=yes . set to tuna to use mirror provided by tsinghua university. leave it empty to use offical git.kernel.org , it may be very slow for mainland china users. USE_TORRENT ( yes |no): use torrent to download toolchains and rootfs ROOT_FS_CREATE_ONLY set to FORCE to skip rootfs download and create locally","title":"Build Options"},{"location":"Developer-Guide_Build-Options/#hidden-options-to-minimize-user-input-for-build-automation","text":"BOARD (string): you can set name of board manually to skip dialog prompt BRANCH (legacy|current|dev): you can set kernel and u-boot branch manually to skip dialog prompt; some options may not be available for all devices RELEASE (stretch|buster|bionic|focal): you can set OS release manually to skip dialog prompt; use this option with KERNEL_ONLY=yes to create board support package","title":"Hidden options to minimize user input for build automation:"},{"location":"Developer-Guide_Build-Options/#hidden-options-for-advanced-users-default-values-are-marked-bold","text":"EXPERT (yes| no ): Show development features in interactive mode USERPATCHES_PATH ( userpatches/ ): set alternate path for location of userpatches folder USE_CCACHE ( yes |no): use a C compiler cache to speed up the build process PRIVATE_CCACHE (yes| no ) use $DEST/ccache as ccache home directory PROGRESS_DISPLAY (none| plain |dialog): way to display output of verbose processes - compilation, packaging, debootstrap PROGRESS_LOG_TO_FILE (yes| no ): duplicate output, affected by previous option, to log files output/debug/*.log USE_MAINLINE_GOOGLE_MIRROR (yes| no ): use googlesource.com mirror for downloading mainline kernel sources, may be faster than git.kernel.org depending on your location USE_GITHUB_UBOOT_MIRROR (yes| no ): use unofficial Github mirror for downloading mainline u-boot sources, may be faster than git.denx.de depending on your location OFFLINE_WORK (yes| no ): skip downloading and updating sources as well as time and host check. Set to \u201cyes\u201d and you can collect packages without accessing the internet. FORCE_USE_RAMDISK (yes|no): overrides autodetect for using tmpfs in new debootstrap and image creation process FIXED_IMAGE_SIZE (integer): create image file of this size (in megabytes) instead of minimal COMPRESS_OUTPUTIMAGE (comma-separated list): create compressed archive with image file and GPG signature for redistribution sha - generate SHA256 hash for image, gpg - sign image using gpg, 7z - compress image, hash and signature to 7z archive, gz - compress image only using gz format, yes - compatibility shorcut for sha,gpg,7z. SEVENZIP (yes| no ): create .7z archive with extreme compression ratio instead of .zip BUILD_KSRC ( yes |no): create kernel source packages ROOTFS_TYPE ( ext4 |f2fs|btrfs|nfs|fel): create image with different root filesystems instead of default ext4. Requires setting FIXED_IMAGE_SIZE to something smaller than the size of your SD card for F2FS BTRFS_COMPRESSION ( lzo |zlib:3|zstd) select btrfs filesystem compression method and compression level. By default the compression is lzo , user must ensure kernel version is above 4.14 when selecting zstd or setting zlib compression level( zlib:[1-9] ). Both the host and the target kernel version must above 5.1 when selecting zstd compression level ( zstd:[1-15] ), since kernel start supporting zstd compression ratio from 5.1 . The script does not check the legality of input variable(compression ratio), input like zlib:1234 is legal to script, but illegal to kernel. When using microsd card, zstd is preferred because of the poor 4k I/O performance of microsd card. FORCE_BOOTSCRIPT_UPDATE (yes|no): set to \u201cyes\u201d to force bootscript to get updated during bsp package upgrade NAMESERVER (ipv4 address): the DNS resolver used inside the build chroot. Does not affect the final image. Default: 1.0.0.1 DOWNLOAD_MIRROR select download mirror for toolchain and debian/ubuntu packages . set to china to use mirrors.tuna.tsinghua.edu.cn , it will be very fast thanks to tsinghua university. leave it empty to use official source. MAINLINE_MIRROR select mainline mirror of linux-stable.git set to google to use mirror provided by Google, the same as USE_MAINLINE_GOOGLE_MIRROR=yes . set to tuna to use mirror provided by tsinghua university. leave it empty to use offical git.kernel.org , it may be very slow for mainland china users. USE_TORRENT ( yes |no): use torrent to download toolchains and rootfs ROOT_FS_CREATE_ONLY set to FORCE to skip rootfs download and create locally","title":"Hidden options for advanced users (default values are marked bold):"},{"location":"Developer-Guide_Build-Preparation/","text":"What do I need? \u00b6 x86/x64 machine running any OS; at least 4G RAM, SSD, quad core (recommended), VirtualBox or similar virtualization software (highly recommended with a minimum of 25GB hard disk space for the virtual disk image) , Setting up VirtualBox and compile environment is easy following our Vagrant tutorial , Docker environment is also supported for building kernels and full OS images, The officially supported compilation environment is Ubuntu Focal 20.04 x64 only! (Support for Ubuntu 18.04 will be there until either we run into issues we do not want to waste time on or upstream support ends), installed basic system, OpenSSH and Samba (optional), no spaces in full path to the build script location allowed, superuser rights (configured sudo or root shell). Please note that system requirements (both hardware and OS/software) may differ depending on the build environment (Vagrant, Docker, Virtualbox, native). How to start? \u00b6 Native and Virtualbox environments: \u00b6 Login as root and run: apt-get -y -qq install git git clone --depth 1 https://github.com/armbian/build cd build Run the script ./compile.sh Make sure that full path to the build script does not contain spaces . Providing build configuration \u00b6 After the first run of compile.sh a new configuration file config-example.conf and symlink config-default.conf will be created. You may edit it to your needs or create different configuration files using it as a template. Alternatively you can supply options as command line parameters to compile.sh. Example: ./compile.sh BOARD=cubietruck BRANCH=current KERNEL_ONLY=yes RELEASE=bionic Note: Option BUILD_ALL cannot be set to \u201cyes\u201d via command line parameter. Base and descendant configuration \u00b6 You can create one base configuration ( config-base.conf ) and use this in descendant config ( config-dev.conf ). Three parameters (BRANCH, RELEASE, COMPRESS_OUTPUTIMAGE) will be overwritten. . ./config-base.conf BRANCH=\"dev\" RELEASE=\"buster\" COMPRESS_OUTPUTIMAGE=\"sha,gz\" Using our automated build system \u00b6 If you do not own the proper equipment to build images on your own, you can make use of the automated build system. Packages are recompiled every night (starting at 00:01 CEST) and a few testing images are produced. These images are accessible on the download server under board folder, subfolder \u201cNightly\u201d. Packages, when successfully built, are published in the beta repository. You can switch to beta repository in armbian-config or by changing apt.armbian.com to beta.armbian.com in /etc/apt/sources.list.d/armbian.list. Board beta images are defined in board configuration files which are located here . This is a typical board configuration: # A20 dual core 1Gb SoC BOARD_NAME=\"Banana Pi\" LINUXFAMILY=\"sun7i\" BOOTCONFIG=\"Bananapi_defconfig\" MODULES=\"hci_uart gpio_sunxi rfcomm hidp sunxi-ir bonding spi_sun7i 8021q a20_tp #ap6211\" MODULES_NEXT=\"brcmfmac bonding\" # KERNEL_TARGET=\"legacy,current,dev\" CLI_TARGET=\"buster,bionic,focal:current\" DESKTOP_TARGET=\"stretch:legacy,current\" CLI_BETA_TARGET=\"\" DESKTOP_BETA_TARGET=\"\" # BOARDRATING=\"\" CHIP=\"http://docs.armbian.com/Hardware_Allwinner-A20/\" HARDWARE=\"https://linux-sunxi.org/Banana_Pi\" FORUMS=\"https://forum.armbian.com/forum/7-allwinner-a10a20/\" BUY=\"http://amzn.to/2fToHjR\" You can find more information about those variables here . If you want that our automated system start making images for this particular board, you need to alter parameters CLI_BETA_TARGET and DESKTOP_BETA_TARGET . Variants are depenendend from KERNEL_TARGET definitions and supported userlands: buster , bionic , stretch . To edit those parameters you need to push changes to the build script. You need to fork a project and create a pull request and after it is imported by one of the administrators, images will start to show up in appropriate folder. If you want to enable Debian buster desktop image with current kernel choose the following: DESKTOP_BETA_TARGET=\"buster:current\" or for command line interfaces Ubuntu Bionic based images with legacy kernel 4.19.x CLI_BETA_TARGET=\"bionic:legacy\" or for image with latest upstream development kernel. DESKTOP_BETA_TARGET=\"buster:dev\" Using alternate armbian builder repos and branches \u00b6 By default, armbian-builder assumes working from master of https://github.com/armbian/build.git . If you are working from your own repo / branch, touch .ignore_changes will cause armbian-builder to not attempt a repo checkout. Executing any bash statement \u00b6 Currently, invoking compile.sh will run a monotonous task of building all the components into a final image. In some situation, especially when developing with Kernel or U-Boot, it is handy to run a portion of that great task like: # using default profile ./compile.sh 'fetch_from_repo \"$BOOTSOURCE\" \"$BOOTDIR\" \"$BOOTBRANCH\" \"yes\"' ./compile.sh 'compile_uboot' You can also dump the variable: # using profile of `userpatches/config-my.conf` ./compile.sh my 'echo $SRC/cache/sources/$BOOTSOURCEDIR' NOTE: please use single quotes to keep the $VAR from early expansion in the command line shell.","title":"Building Armbian"},{"location":"Developer-Guide_Build-Preparation/#what-do-i-need","text":"x86/x64 machine running any OS; at least 4G RAM, SSD, quad core (recommended), VirtualBox or similar virtualization software (highly recommended with a minimum of 25GB hard disk space for the virtual disk image) , Setting up VirtualBox and compile environment is easy following our Vagrant tutorial , Docker environment is also supported for building kernels and full OS images, The officially supported compilation environment is Ubuntu Focal 20.04 x64 only! (Support for Ubuntu 18.04 will be there until either we run into issues we do not want to waste time on or upstream support ends), installed basic system, OpenSSH and Samba (optional), no spaces in full path to the build script location allowed, superuser rights (configured sudo or root shell). Please note that system requirements (both hardware and OS/software) may differ depending on the build environment (Vagrant, Docker, Virtualbox, native).","title":"What do I need?"},{"location":"Developer-Guide_Build-Preparation/#how-to-start","text":"","title":"How to start?"},{"location":"Developer-Guide_Build-Preparation/#native-and-virtualbox-environments","text":"Login as root and run: apt-get -y -qq install git git clone --depth 1 https://github.com/armbian/build cd build Run the script ./compile.sh Make sure that full path to the build script does not contain spaces .","title":"Native and Virtualbox environments:"},{"location":"Developer-Guide_Build-Preparation/#providing-build-configuration","text":"After the first run of compile.sh a new configuration file config-example.conf and symlink config-default.conf will be created. You may edit it to your needs or create different configuration files using it as a template. Alternatively you can supply options as command line parameters to compile.sh. Example: ./compile.sh BOARD=cubietruck BRANCH=current KERNEL_ONLY=yes RELEASE=bionic Note: Option BUILD_ALL cannot be set to \u201cyes\u201d via command line parameter.","title":"Providing build configuration"},{"location":"Developer-Guide_Build-Preparation/#base-and-descendant-configuration","text":"You can create one base configuration ( config-base.conf ) and use this in descendant config ( config-dev.conf ). Three parameters (BRANCH, RELEASE, COMPRESS_OUTPUTIMAGE) will be overwritten. . ./config-base.conf BRANCH=\"dev\" RELEASE=\"buster\" COMPRESS_OUTPUTIMAGE=\"sha,gz\"","title":"Base and descendant configuration"},{"location":"Developer-Guide_Build-Preparation/#using-our-automated-build-system","text":"If you do not own the proper equipment to build images on your own, you can make use of the automated build system. Packages are recompiled every night (starting at 00:01 CEST) and a few testing images are produced. These images are accessible on the download server under board folder, subfolder \u201cNightly\u201d. Packages, when successfully built, are published in the beta repository. You can switch to beta repository in armbian-config or by changing apt.armbian.com to beta.armbian.com in /etc/apt/sources.list.d/armbian.list. Board beta images are defined in board configuration files which are located here . This is a typical board configuration: # A20 dual core 1Gb SoC BOARD_NAME=\"Banana Pi\" LINUXFAMILY=\"sun7i\" BOOTCONFIG=\"Bananapi_defconfig\" MODULES=\"hci_uart gpio_sunxi rfcomm hidp sunxi-ir bonding spi_sun7i 8021q a20_tp #ap6211\" MODULES_NEXT=\"brcmfmac bonding\" # KERNEL_TARGET=\"legacy,current,dev\" CLI_TARGET=\"buster,bionic,focal:current\" DESKTOP_TARGET=\"stretch:legacy,current\" CLI_BETA_TARGET=\"\" DESKTOP_BETA_TARGET=\"\" # BOARDRATING=\"\" CHIP=\"http://docs.armbian.com/Hardware_Allwinner-A20/\" HARDWARE=\"https://linux-sunxi.org/Banana_Pi\" FORUMS=\"https://forum.armbian.com/forum/7-allwinner-a10a20/\" BUY=\"http://amzn.to/2fToHjR\" You can find more information about those variables here . If you want that our automated system start making images for this particular board, you need to alter parameters CLI_BETA_TARGET and DESKTOP_BETA_TARGET . Variants are depenendend from KERNEL_TARGET definitions and supported userlands: buster , bionic , stretch . To edit those parameters you need to push changes to the build script. You need to fork a project and create a pull request and after it is imported by one of the administrators, images will start to show up in appropriate folder. If you want to enable Debian buster desktop image with current kernel choose the following: DESKTOP_BETA_TARGET=\"buster:current\" or for command line interfaces Ubuntu Bionic based images with legacy kernel 4.19.x CLI_BETA_TARGET=\"bionic:legacy\" or for image with latest upstream development kernel. DESKTOP_BETA_TARGET=\"buster:dev\"","title":"Using our automated build system"},{"location":"Developer-Guide_Build-Preparation/#using-alternate-armbian-builder-repos-and-branches","text":"By default, armbian-builder assumes working from master of https://github.com/armbian/build.git . If you are working from your own repo / branch, touch .ignore_changes will cause armbian-builder to not attempt a repo checkout.","title":"Using alternate armbian builder repos and branches"},{"location":"Developer-Guide_Build-Preparation/#executing-any-bash-statement","text":"Currently, invoking compile.sh will run a monotonous task of building all the components into a final image. In some situation, especially when developing with Kernel or U-Boot, it is handy to run a portion of that great task like: # using default profile ./compile.sh 'fetch_from_repo \"$BOOTSOURCE\" \"$BOOTDIR\" \"$BOOTBRANCH\" \"yes\"' ./compile.sh 'compile_uboot' You can also dump the variable: # using profile of `userpatches/config-my.conf` ./compile.sh my 'echo $SRC/cache/sources/$BOOTSOURCEDIR' NOTE: please use single quotes to keep the $VAR from early expansion in the command line shell.","title":"Executing any bash statement"},{"location":"Developer-Guide_Build-Process/","text":"What happens behind the build process? \u00b6 Build process summary: \u00b6 creates development environment on top of amd64 Ubuntu 20.04 LTS, downloads proven sources, applies patches on top and uses tested configurations, cross-compiles universal boot loader ( U-Boot ), kernel and other tools and drivers, packs kernel, U-Boot, dtb and root customizations into Debian packages, debootstraps minimalistic Debian Buster and Ubuntu Focal into SD card images, installs additional packets, applies customizations and shrinks image to its actual size. Check this image compiling example with partial cache. Build process details: \u00b6 Creating compile environment \u00b6 First things first. All necessary dependencies are downloaded and installed. This happens though both http and torrent network. Btw. having too much unused traffic? Help us to reduce ours :) Using board configuration \u00b6 We need to get some predefined variables about selected the board. Which kernel & uboot source to use, modules to load, which is the build number, do we need to have a single partition or dual with boot on fat, which extra drivers to compile out of the kernel tree \u2026 All this stuff is predefined for each and every single supported board. Downloading sources \u00b6 When we know which sources to use and where they need to be the download or updated this process starts. This might take from several minutes to several hours. Patching \u00b6 In the patching process we are applying patches to the used sources. The process is - depending on selected board - defined in: lib/patch/kernel/sun7i-default lib/patch/kernel/sunxi-dev ... lib/patch/u-boot/u-boot-default lib/patch/u-boot/u-boot-neo-default ... Patch rules for subdirectories are: KERNEL_FAMILY-BRANCH for kernel and U-BOOT-SOURCE-BRANCH for U-Boot. Debootstrap \u00b6 Debootstrap creates fresh Debian / Ubuntu root filesystem templates or use cached under: output/cache/rootfs/ To recreate those files you need to remove them manually. From time to time they will be recreated anyway if Armbian updates their rootfs cache. Kernel install \u00b6 When the root filesystem is ready we need to install the kernel image with modules, board definitions and firmwares. Along with this we set the CPU frequency min/max, hostname, modules, network interfaces templates. Here is also the place to install headers and fix + native compile them on the way. Distribution fixes \u00b6 Each distribution has it\u2019s own way of doing things: serial console different packets configuration locations Board fixes \u00b6 Each board has their own tricks: different device names, firmware loaders, configuration (de)compilers, hardware configurators Desktop installation \u00b6 You can build a desktop environment withing the image. Consider this feature as experimental. Do not expect to have working hardware acceleration since this is a very complicated task and needs individial care for different boards. External applications \u00b6 This place is reserved for custom applications. There is one example of application: USB redirector. Closing image \u00b6 There is an option to add some extra commands just before closing an image which is also automaticaly shrink to it\u2019s actual size with some small reserve. Directory structure \u00b6 It will be something like this: compile.sh compile execution script lib/bin/ blobs, firmwares, static compiled, bootsplash lib/config/ kernel, board, u-boot, hostapd, package list lib/documentation/ user and developers manual lib/patch/ collection of kernel and u-boot patches lib/scripts/ firstrun, arm hardware info, firmware loaders lib/LICENSE licence description lib/README.md quick manual lib/common.sh creates environment, compiles, shrink image lib/configuration.sh boards presets - kernel source, config, modules, ... lib/distributions.sh system specific installation and fixes lib/main.sh user input and script calls lib/makeboarddeb.sh creates board support package .deb lib/repo-update.sh creates and updates your local repository lib/repo-show-sh show packets in your local repository lib/upgrade.sh script to upgrade older images sources/ source code for kernel, uboot and other utilities output/repository repository output/cache cache for root filesystem and headers compilation output/debs deb packeges output/images zip packed RAW image userpatches/kernel put your kernel patches here userpatches/u-boot put your u-boot patches here userpatches/ put your kernel config here Additional info \u00b6 Allwinner SBC community","title":"What happens behind the build process?"},{"location":"Developer-Guide_Build-Process/#what-happens-behind-the-build-process","text":"","title":"What happens behind the build process?"},{"location":"Developer-Guide_Build-Process/#build-process-summary","text":"creates development environment on top of amd64 Ubuntu 20.04 LTS, downloads proven sources, applies patches on top and uses tested configurations, cross-compiles universal boot loader ( U-Boot ), kernel and other tools and drivers, packs kernel, U-Boot, dtb and root customizations into Debian packages, debootstraps minimalistic Debian Buster and Ubuntu Focal into SD card images, installs additional packets, applies customizations and shrinks image to its actual size. Check this image compiling example with partial cache.","title":"Build process summary:"},{"location":"Developer-Guide_Build-Process/#build-process-details","text":"","title":"Build process details:"},{"location":"Developer-Guide_Build-Process/#creating-compile-environment","text":"First things first. All necessary dependencies are downloaded and installed. This happens though both http and torrent network. Btw. having too much unused traffic? Help us to reduce ours :)","title":"Creating compile environment"},{"location":"Developer-Guide_Build-Process/#using-board-configuration","text":"We need to get some predefined variables about selected the board. Which kernel & uboot source to use, modules to load, which is the build number, do we need to have a single partition or dual with boot on fat, which extra drivers to compile out of the kernel tree \u2026 All this stuff is predefined for each and every single supported board.","title":"Using board configuration"},{"location":"Developer-Guide_Build-Process/#downloading-sources","text":"When we know which sources to use and where they need to be the download or updated this process starts. This might take from several minutes to several hours.","title":"Downloading sources"},{"location":"Developer-Guide_Build-Process/#patching","text":"In the patching process we are applying patches to the used sources. The process is - depending on selected board - defined in: lib/patch/kernel/sun7i-default lib/patch/kernel/sunxi-dev ... lib/patch/u-boot/u-boot-default lib/patch/u-boot/u-boot-neo-default ... Patch rules for subdirectories are: KERNEL_FAMILY-BRANCH for kernel and U-BOOT-SOURCE-BRANCH for U-Boot.","title":"Patching"},{"location":"Developer-Guide_Build-Process/#debootstrap","text":"Debootstrap creates fresh Debian / Ubuntu root filesystem templates or use cached under: output/cache/rootfs/ To recreate those files you need to remove them manually. From time to time they will be recreated anyway if Armbian updates their rootfs cache.","title":"Debootstrap"},{"location":"Developer-Guide_Build-Process/#kernel-install","text":"When the root filesystem is ready we need to install the kernel image with modules, board definitions and firmwares. Along with this we set the CPU frequency min/max, hostname, modules, network interfaces templates. Here is also the place to install headers and fix + native compile them on the way.","title":"Kernel install"},{"location":"Developer-Guide_Build-Process/#distribution-fixes","text":"Each distribution has it\u2019s own way of doing things: serial console different packets configuration locations","title":"Distribution fixes"},{"location":"Developer-Guide_Build-Process/#board-fixes","text":"Each board has their own tricks: different device names, firmware loaders, configuration (de)compilers, hardware configurators","title":"Board fixes"},{"location":"Developer-Guide_Build-Process/#desktop-installation","text":"You can build a desktop environment withing the image. Consider this feature as experimental. Do not expect to have working hardware acceleration since this is a very complicated task and needs individial care for different boards.","title":"Desktop installation"},{"location":"Developer-Guide_Build-Process/#external-applications","text":"This place is reserved for custom applications. There is one example of application: USB redirector.","title":"External applications"},{"location":"Developer-Guide_Build-Process/#closing-image","text":"There is an option to add some extra commands just before closing an image which is also automaticaly shrink to it\u2019s actual size with some small reserve.","title":"Closing image"},{"location":"Developer-Guide_Build-Process/#directory-structure","text":"It will be something like this: compile.sh compile execution script lib/bin/ blobs, firmwares, static compiled, bootsplash lib/config/ kernel, board, u-boot, hostapd, package list lib/documentation/ user and developers manual lib/patch/ collection of kernel and u-boot patches lib/scripts/ firstrun, arm hardware info, firmware loaders lib/LICENSE licence description lib/README.md quick manual lib/common.sh creates environment, compiles, shrink image lib/configuration.sh boards presets - kernel source, config, modules, ... lib/distributions.sh system specific installation and fixes lib/main.sh user input and script calls lib/makeboarddeb.sh creates board support package .deb lib/repo-update.sh creates and updates your local repository lib/repo-show-sh show packets in your local repository lib/upgrade.sh script to upgrade older images sources/ source code for kernel, uboot and other utilities output/repository repository output/cache cache for root filesystem and headers compilation output/debs deb packeges output/images zip packed RAW image userpatches/kernel put your kernel patches here userpatches/u-boot put your u-boot patches here userpatches/ put your kernel config here","title":"Directory structure"},{"location":"Developer-Guide_Build-Process/#additional-info","text":"Allwinner SBC community","title":"Additional info"},{"location":"Developer-Guide_Building-with-Docker/","text":"Officially supported and tested method for building with Docker \u00b6 This method works for building u-boot and kernel packages as well as building full OS images. Building additional packages ( EXTERNAL_NEW ) is not supported. Requirements \u00b6 x86/x64 Linux host that supports running a recent Docker daemon. Refer to Docker documentation for details. Docker version 17.06 CE or newer. Installation on Ubuntu Bionic: apt-key adv --keyserver pool.sks-keyservers.net --recv-keys 0EBFCD88 echo \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" > /etc/apt/sources.list.d/docker.list apt update apt install docker-ce Enough free disk space on the storage used for Docker containers and named volumes. Named volumes path can be changed using standard Docker utilites, refer to Docker documentation for details. Details \u00b6 There are 2 options to start build process: By passing configuration file name ( config-<conf_name>.conf ), stored in userpatches directory, as an argument: # ./compile.sh docker <conf_name> By passing addtional line arguments to compile.sh after docker : # ./compile.sh docker KERNEL_ONLY=yes BOARD=cubietruck BRANCH=current KERNEL_CONFIGURE=yes The process creates and runs a named Docker container armbian with 2 named volumes armbian-cache and armbian-ccache , and mount local directories output and userpatches . Creating and running Docker container manually \u00b6 NOTE: These methods are not supported by Armbian developers. Use them at your own risk. Example: Building Armbian using Red Hat or CentOS \u00b6 Tested by @rfrht First of all, it is important to notice that you will be able to build kernel and u-boot packages. The container method is not suitable for building full Armbian images (the full SD card image containing the userland packages). This setup procedure was validated to work with Red Hat Enterprise Linux 7. Preparing your build host \u00b6 In order to be able to run Docker containers, if you have not done so, just install the Docker package: # yum install -y docker By default, the docker service is not started upon system reboot. If you wish to do so: # systemctl enable docker Ensure that you have the docker service running: # systemctl start docker` Next step, chdir to a directory where you will be checking out the Armbian build repository. I use /usr/src . And then, check out using git (with shallow tree, using --depth 1 , in order to speed up the process): # cd /usr/src # git clone --depth 1 https://github.com/armbian/build And in order to not mistake the newly created build directory, I rename it to build-armbian . cd to the directory: # mv build build-armbian # cd build-armbian Preparing the Container \u00b6 Our Build toolchain provides a scripted way to create a container and run the container. Run: # ./compile.sh docker Give it some minutes, as it downloads a non-neglectible amount of data. After your image is created (named armbian ), it will automatically spawn the Armbian build container. NOTICE : In some cases, it is possible that SELinux might block your access to /root/armbian/cache temporary build directory. You can fix it by either adding the correct SELinux context to your host cache directory, or, disabling SELinux. Get acquainted with the Build system. If you want to get a shell in the container, skipping the compile script, you can also run: # docker run -dit --entrypoint=/bin/bash -v /mnt:/root/armbian/cache armbian_dev The above command will start the container with a shell. To get the shell session: # docker attach <UUID of your container, returned in the above command> If you want to run SSH in your container, log in and install the ssh package: # apt-get install -y ssh Now, define a password and prepare the settings so you sshd can run and you can log in as root: # passwd # sed -i -e 's/PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config # mkdir /var/run/sshd # chmod 0755 /var/run/sshd And finally start sshd : # /usr/sbin/sshd Do NOT type exit - that will stop your container. To leave your container running after starting sshd , just type <Ctrl-P> and <Ctrl-Q> . Now you can ssh to your container.","title":"Building with Docker"},{"location":"Developer-Guide_Building-with-Docker/#officially-supported-and-tested-method-for-building-with-docker","text":"This method works for building u-boot and kernel packages as well as building full OS images. Building additional packages ( EXTERNAL_NEW ) is not supported.","title":"Officially supported and tested method for building with Docker"},{"location":"Developer-Guide_Building-with-Docker/#requirements","text":"x86/x64 Linux host that supports running a recent Docker daemon. Refer to Docker documentation for details. Docker version 17.06 CE or newer. Installation on Ubuntu Bionic: apt-key adv --keyserver pool.sks-keyservers.net --recv-keys 0EBFCD88 echo \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" > /etc/apt/sources.list.d/docker.list apt update apt install docker-ce Enough free disk space on the storage used for Docker containers and named volumes. Named volumes path can be changed using standard Docker utilites, refer to Docker documentation for details.","title":"Requirements"},{"location":"Developer-Guide_Building-with-Docker/#details","text":"There are 2 options to start build process: By passing configuration file name ( config-<conf_name>.conf ), stored in userpatches directory, as an argument: # ./compile.sh docker <conf_name> By passing addtional line arguments to compile.sh after docker : # ./compile.sh docker KERNEL_ONLY=yes BOARD=cubietruck BRANCH=current KERNEL_CONFIGURE=yes The process creates and runs a named Docker container armbian with 2 named volumes armbian-cache and armbian-ccache , and mount local directories output and userpatches .","title":"Details"},{"location":"Developer-Guide_Building-with-Docker/#creating-and-running-docker-container-manually","text":"NOTE: These methods are not supported by Armbian developers. Use them at your own risk.","title":"Creating and running Docker container manually"},{"location":"Developer-Guide_Building-with-Docker/#example-building-armbian-using-red-hat-or-centos","text":"Tested by @rfrht First of all, it is important to notice that you will be able to build kernel and u-boot packages. The container method is not suitable for building full Armbian images (the full SD card image containing the userland packages). This setup procedure was validated to work with Red Hat Enterprise Linux 7.","title":"Example: Building Armbian using Red Hat or CentOS"},{"location":"Developer-Guide_Building-with-Docker/#preparing-your-build-host","text":"In order to be able to run Docker containers, if you have not done so, just install the Docker package: # yum install -y docker By default, the docker service is not started upon system reboot. If you wish to do so: # systemctl enable docker Ensure that you have the docker service running: # systemctl start docker` Next step, chdir to a directory where you will be checking out the Armbian build repository. I use /usr/src . And then, check out using git (with shallow tree, using --depth 1 , in order to speed up the process): # cd /usr/src # git clone --depth 1 https://github.com/armbian/build And in order to not mistake the newly created build directory, I rename it to build-armbian . cd to the directory: # mv build build-armbian # cd build-armbian","title":"Preparing your build host"},{"location":"Developer-Guide_Building-with-Docker/#preparing-the-container","text":"Our Build toolchain provides a scripted way to create a container and run the container. Run: # ./compile.sh docker Give it some minutes, as it downloads a non-neglectible amount of data. After your image is created (named armbian ), it will automatically spawn the Armbian build container. NOTICE : In some cases, it is possible that SELinux might block your access to /root/armbian/cache temporary build directory. You can fix it by either adding the correct SELinux context to your host cache directory, or, disabling SELinux. Get acquainted with the Build system. If you want to get a shell in the container, skipping the compile script, you can also run: # docker run -dit --entrypoint=/bin/bash -v /mnt:/root/armbian/cache armbian_dev The above command will start the container with a shell. To get the shell session: # docker attach <UUID of your container, returned in the above command> If you want to run SSH in your container, log in and install the ssh package: # apt-get install -y ssh Now, define a password and prepare the settings so you sshd can run and you can log in as root: # passwd # sed -i -e 's/PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config # mkdir /var/run/sshd # chmod 0755 /var/run/sshd And finally start sshd : # /usr/sbin/sshd Do NOT type exit - that will stop your container. To leave your container running after starting sshd , just type <Ctrl-P> and <Ctrl-Q> . Now you can ssh to your container.","title":"Preparing the Container"},{"location":"Developer-Guide_FEL-boot/","text":"FEL/NFS boot explanation \u00b6 What is FEL/NFS boot? \u00b6 FEL/NFS boot mode is a possibility to test freshly created Armbian distribution without using SD card. It is implemented by loading u-boot, kernel, initrd, boot script and .bin/.dtb file via USB FEL mode and providing root filesystem via NFS share. NOTE: this mode is designed only for testing. To use root on NFS permanently, use ROOTFS_TYPE=nfs option. NOTE: \u201chot\u201d switching between kernel branches (default <-> dev/next) is not supported Requirements \u00b6 Allwinner device that supports FEL mode. Check wiki to find out how to enter FEL mode with your device USB connection between build host and board OTG port (VM USB passthrough or USB over IP may work too) Network connection between build host and board. For target board wired Ethernet connection is required (either via onboard Ethernet or via USB ethernet adapter that has required kernel modules built-in) NFS ports on build host should be reachable from board perspective (you may need to open ports in firewall or change network configuration of your VM) Selected kernel should have built-in support for DHCP and NFS root filesystem CLEAN_LEVEL=\"make,debs\" to always update u-boot configuration Additional requirements (recommended) \u00b6 DHCP server in local network UART console connected to target board Build script options \u00b6 KERNEL_ONLY=no ROOTFS_TYPE=fel Example: ./compile.sh KERNEL_ONLY=no BOARD=cubietruck BRANCH=current PROGRESS_DISPLAY=plain RELEASE=jessie BUILD_DESKTOP=no ROOTFS_TYPE=fel Shutdown and reboot \u00b6 Once you start FEL boot, you will see this prompt: [ o.k. ] Press any key to boot again, <q> to finish [ FEL ] Pressing q deletes current rootfs and finishes build process, so you need to shut down or reboot your board to avoid possible problems unmounting/deleting temporary rootfs. All changes to root filesystem will persist until you exit FEL mode. To reboot again into testing system, switch your board into FEL mode and press any key other than q . Because kernel and .bin/.dtb file are loaded from rootfs each time, it\u2019s possible to update kernel or its configuration (via apt-get , dtc , fex2bin / bin2fex ) from within running system. Advanced configuration \u00b6 If you don\u2019t have DHCP server in your local network or if you need to alter kernel command line, use lib/scripts/fel-boot.cmd.template as a template and save modified script as userpatches/fel-boot.cmd . Check this for configuring static IP for NFS root Set FEL_DTB_FILE to relative path to .dtb or .bin file if it can\u2019t be obtained from u-boot config (mainline kernel) or boot/script.bin (legacy kernel) You may need to set these additional options (it\u2019s a good idea to put them in userpatches/lib.config : Set FEL_NET_IFNAME to name of your network interface if you have more than one non-loopback interface with assigned IPv4 address on your build host Set FEL_LOCAL_IP to IP address that can be used to reach NFS server on your build host if it can\u2019t be obtained from ifconfig (i.e. port forwarding to VM guest) Set FEL_AUTO=yes to skip prompt before trying FEL load Customization \u00b6 You can even create userpatches/fel-hooks.sh and define there 2 functions: fel_post_prepare and fel_pre_load . All normal build variables like $BOARD, $BRANCH and so on can be used in these functions to define specific actions. fel_post_prepare is executed once after setting up u-boot script and NFS share, you can use it to add extra stuff to boot.scr (like gpio set or setenv machid ) based on device name. fel_pre_load is executed before calling sunxi-fel, you can use it to implement logic to select one of multiple connected boards; to pass additional arguments to sunxi-fel you can use FEL_EXTRA_ARGS variable. An example is provided as scripts/fel-hooks.sh.example .","title":"FEL boot"},{"location":"Developer-Guide_FEL-boot/#felnfs-boot-explanation","text":"","title":"FEL/NFS boot explanation"},{"location":"Developer-Guide_FEL-boot/#what-is-felnfs-boot","text":"FEL/NFS boot mode is a possibility to test freshly created Armbian distribution without using SD card. It is implemented by loading u-boot, kernel, initrd, boot script and .bin/.dtb file via USB FEL mode and providing root filesystem via NFS share. NOTE: this mode is designed only for testing. To use root on NFS permanently, use ROOTFS_TYPE=nfs option. NOTE: \u201chot\u201d switching between kernel branches (default <-> dev/next) is not supported","title":"What is FEL/NFS boot?"},{"location":"Developer-Guide_FEL-boot/#requirements","text":"Allwinner device that supports FEL mode. Check wiki to find out how to enter FEL mode with your device USB connection between build host and board OTG port (VM USB passthrough or USB over IP may work too) Network connection between build host and board. For target board wired Ethernet connection is required (either via onboard Ethernet or via USB ethernet adapter that has required kernel modules built-in) NFS ports on build host should be reachable from board perspective (you may need to open ports in firewall or change network configuration of your VM) Selected kernel should have built-in support for DHCP and NFS root filesystem CLEAN_LEVEL=\"make,debs\" to always update u-boot configuration","title":"Requirements"},{"location":"Developer-Guide_FEL-boot/#additional-requirements-recommended","text":"DHCP server in local network UART console connected to target board","title":"Additional requirements (recommended)"},{"location":"Developer-Guide_FEL-boot/#build-script-options","text":"KERNEL_ONLY=no ROOTFS_TYPE=fel Example: ./compile.sh KERNEL_ONLY=no BOARD=cubietruck BRANCH=current PROGRESS_DISPLAY=plain RELEASE=jessie BUILD_DESKTOP=no ROOTFS_TYPE=fel","title":"Build script options"},{"location":"Developer-Guide_FEL-boot/#shutdown-and-reboot","text":"Once you start FEL boot, you will see this prompt: [ o.k. ] Press any key to boot again, <q> to finish [ FEL ] Pressing q deletes current rootfs and finishes build process, so you need to shut down or reboot your board to avoid possible problems unmounting/deleting temporary rootfs. All changes to root filesystem will persist until you exit FEL mode. To reboot again into testing system, switch your board into FEL mode and press any key other than q . Because kernel and .bin/.dtb file are loaded from rootfs each time, it\u2019s possible to update kernel or its configuration (via apt-get , dtc , fex2bin / bin2fex ) from within running system.","title":"Shutdown and reboot"},{"location":"Developer-Guide_FEL-boot/#advanced-configuration","text":"If you don\u2019t have DHCP server in your local network or if you need to alter kernel command line, use lib/scripts/fel-boot.cmd.template as a template and save modified script as userpatches/fel-boot.cmd . Check this for configuring static IP for NFS root Set FEL_DTB_FILE to relative path to .dtb or .bin file if it can\u2019t be obtained from u-boot config (mainline kernel) or boot/script.bin (legacy kernel) You may need to set these additional options (it\u2019s a good idea to put them in userpatches/lib.config : Set FEL_NET_IFNAME to name of your network interface if you have more than one non-loopback interface with assigned IPv4 address on your build host Set FEL_LOCAL_IP to IP address that can be used to reach NFS server on your build host if it can\u2019t be obtained from ifconfig (i.e. port forwarding to VM guest) Set FEL_AUTO=yes to skip prompt before trying FEL load","title":"Advanced configuration"},{"location":"Developer-Guide_FEL-boot/#customization","text":"You can even create userpatches/fel-hooks.sh and define there 2 functions: fel_post_prepare and fel_pre_load . All normal build variables like $BOARD, $BRANCH and so on can be used in these functions to define specific actions. fel_post_prepare is executed once after setting up u-boot script and NFS share, you can use it to add extra stuff to boot.scr (like gpio set or setenv machid ) based on device name. fel_pre_load is executed before calling sunxi-fel, you can use it to implement logic to select one of multiple connected boards; to pass additional arguments to sunxi-fel you can use FEL_EXTRA_ARGS variable. An example is provided as scripts/fel-hooks.sh.example .","title":"Customization"},{"location":"Developer-Guide_Testing-Procedures/","text":"It is important for tests to be performed in a consistent manner. The purpose of formalized testing procedures is to provide a proven, reproducible process for verifying device compatibility and various features within Armbian. The overall goal is to reduce variance in testing methodologies between individual contributors while enstilling confidence within new contributors and encouraging them to perform quality bug reports and ideally a pull/merge request. Hardware: Micro SD card \u00b6 Insert the micro SD card directly into the corresponding port on the target device, if possible. If intermediate hardware such as a microSD/USB adapter is used and the card is not detected, please include details of the adapter within the test results Verify that the card is recognized in lsblk Verify that the card is recognized by a file manager (If a device is ejected within the file manager, you may have to physically re-insert the card for it to appear again.) Verify that the card can be mounted within a file manager Navigate to the root directory of the card within a file manager. Verify that the maximum storage capacity indicated is appropriate given the storage marked on the card Verify that a non-empty text file can be written to the card Verify that existing files may be read on the card Using a N-GB card, verify that checksum evaluations pass if approximately N * 1 GB files are written to the card","title":"Developer Guide Testing Procedures"},{"location":"Developer-Guide_Testing-Procedures/#hardware-micro-sd-card","text":"Insert the micro SD card directly into the corresponding port on the target device, if possible. If intermediate hardware such as a microSD/USB adapter is used and the card is not detected, please include details of the adapter within the test results Verify that the card is recognized in lsblk Verify that the card is recognized by a file manager (If a device is ejected within the file manager, you may have to physically re-insert the card for it to appear again.) Verify that the card can be mounted within a file manager Navigate to the root directory of the card within a file manager. Verify that the maximum storage capacity indicated is appropriate given the storage marked on the card Verify that a non-empty text file can be written to the card Verify that existing files may be read on the card Using a N-GB card, verify that checksum evaluations pass if approximately N * 1 GB files are written to the card","title":"Hardware: Micro SD card"},{"location":"Developer-Guide_User-Configurations/","text":"User provided patches \u00b6 You can add your own patches outside build script. Place your patches inside appropriate directory, for kernel or u-boot. There are no limitations except all patches must have file name extension .patch . User patches directory structure mirrors directory structure of patch . Look for the hint at the beginning of patching process to select proper directory for patches. Example: [ o.k. ] Started patching process for [ kernel sunxi-dev 4.4.0-rc6 ] [ o.k. ] Looking for user patches in [ userpatches/kernel/sunxi-dev ] Patch with same file name in userpatches directory tree substitutes one in patch . To replace a patch provided by Armbian maintainers, copy it from patch to corresponding directory in userpatches and edit it to your needs. To disable a patch, create empty file in corresponding directory in userpatches . User provided configuration \u00b6 If file userpatches/lib.config exists, it will be called and can override the particular kernel and u-boot versions. It can also add additional packages to be installed, by adding to PACKAGE_LIST_ADDITIONAL . For a comprehensive list of available variables, look through lib/configuration.sh . Some examples of what you can change: PACKAGE_LIST_ADDITIONAL=\"$PACKAGE_LIST_ADDITIONAL python-serial python\" # additional packages [[ $LINUXFAMILY == sunxi64 && $BRANCH == dev ]] && BOOTBRANCH='tag:v2017.09' # conditionally change u-boot git branch/tag KERNELBRANCH=\"tag:v5.4.28\" #always change to this kernel tag User provided kernel config \u00b6 If file userpatches/linux-$KERNELFAMILY-$KERNELBRANCH.config exists, it will be used instead of default one from config . Look for the hint at the beginning of kernel compilation process to select proper config file name. Example: [ o.k. ] Compiling dev kernel [ @host ] [ o.k. ] Using kernel config file [ config/linux-sunxi-dev.config ] User provided sources config overrides \u00b6 If file userpatches/sources/$LINUXFAMILY.conf exists, it will be used in addition to the default one from config/sources . Look for the hint at the beginning of compilation process to select proper config file name. Please note that there are some exceptions for LINUXFAMILY like sunxi (32-bit mainline sunxi) and sunxi64 (64-bit mainline sunxi) Example: [ o.k. ] Adding user provided sunxi64 overrides User provided image customization script \u00b6 You can run additional commands to customize created image. Edit file: userpatches/customize-image.sh and place your code here. You may test values of variables noted in the file to use different commands for different configurations. Those commands will be executed in a chroot environment just before closing image. To add files to image easily, put them in userpatches/overlay and access them in /tmp/overlay from customize-image.sh Partitioning of the SD card \u00b6 In case you define $FIXED_IMAGE_SIZE at build time the partition containing the rootfs will be made of this size. Default behaviour when this is not defined is to shrink the partition to minimum size at build time and expand it to the card\u2019s maximum capacity at boot time (leaving an unpartitioned spare area of ~5% when the size is 4GB or less to help the SD card\u2019s controller with wear leveling and garbage collection on old/slow cards). You can prevent the partition expansion from within customize-image.sh by a touch /root/.no_rootfs_resize or configure the resize operation by either a percentage or a sector count using /root/.rootfs_resize ( 50% will use only half of the card\u2019s size if the image size doesn\u2019t exceed this or 3887103s for example will use sector 3887103 as partition end. Values without either % or s will be ignored)","title":"User Configurations"},{"location":"Developer-Guide_User-Configurations/#user-provided-patches","text":"You can add your own patches outside build script. Place your patches inside appropriate directory, for kernel or u-boot. There are no limitations except all patches must have file name extension .patch . User patches directory structure mirrors directory structure of patch . Look for the hint at the beginning of patching process to select proper directory for patches. Example: [ o.k. ] Started patching process for [ kernel sunxi-dev 4.4.0-rc6 ] [ o.k. ] Looking for user patches in [ userpatches/kernel/sunxi-dev ] Patch with same file name in userpatches directory tree substitutes one in patch . To replace a patch provided by Armbian maintainers, copy it from patch to corresponding directory in userpatches and edit it to your needs. To disable a patch, create empty file in corresponding directory in userpatches .","title":"User provided patches"},{"location":"Developer-Guide_User-Configurations/#user-provided-configuration","text":"If file userpatches/lib.config exists, it will be called and can override the particular kernel and u-boot versions. It can also add additional packages to be installed, by adding to PACKAGE_LIST_ADDITIONAL . For a comprehensive list of available variables, look through lib/configuration.sh . Some examples of what you can change: PACKAGE_LIST_ADDITIONAL=\"$PACKAGE_LIST_ADDITIONAL python-serial python\" # additional packages [[ $LINUXFAMILY == sunxi64 && $BRANCH == dev ]] && BOOTBRANCH='tag:v2017.09' # conditionally change u-boot git branch/tag KERNELBRANCH=\"tag:v5.4.28\" #always change to this kernel tag","title":"User provided configuration"},{"location":"Developer-Guide_User-Configurations/#user-provided-kernel-config","text":"If file userpatches/linux-$KERNELFAMILY-$KERNELBRANCH.config exists, it will be used instead of default one from config . Look for the hint at the beginning of kernel compilation process to select proper config file name. Example: [ o.k. ] Compiling dev kernel [ @host ] [ o.k. ] Using kernel config file [ config/linux-sunxi-dev.config ]","title":"User provided kernel config"},{"location":"Developer-Guide_User-Configurations/#user-provided-sources-config-overrides","text":"If file userpatches/sources/$LINUXFAMILY.conf exists, it will be used in addition to the default one from config/sources . Look for the hint at the beginning of compilation process to select proper config file name. Please note that there are some exceptions for LINUXFAMILY like sunxi (32-bit mainline sunxi) and sunxi64 (64-bit mainline sunxi) Example: [ o.k. ] Adding user provided sunxi64 overrides","title":"User provided sources config overrides"},{"location":"Developer-Guide_User-Configurations/#user-provided-image-customization-script","text":"You can run additional commands to customize created image. Edit file: userpatches/customize-image.sh and place your code here. You may test values of variables noted in the file to use different commands for different configurations. Those commands will be executed in a chroot environment just before closing image. To add files to image easily, put them in userpatches/overlay and access them in /tmp/overlay from customize-image.sh","title":"User provided image customization script"},{"location":"Developer-Guide_User-Configurations/#partitioning-of-the-sd-card","text":"In case you define $FIXED_IMAGE_SIZE at build time the partition containing the rootfs will be made of this size. Default behaviour when this is not defined is to shrink the partition to minimum size at build time and expand it to the card\u2019s maximum capacity at boot time (leaving an unpartitioned spare area of ~5% when the size is 4GB or less to help the SD card\u2019s controller with wear leveling and garbage collection on old/slow cards). You can prevent the partition expansion from within customize-image.sh by a touch /root/.no_rootfs_resize or configure the resize operation by either a percentage or a sector count using /root/.rootfs_resize ( 50% will use only half of the card\u2019s size if the image size doesn\u2019t exceed this or 3887103s for example will use sector 3887103 as partition end. Values without either % or s will be ignored)","title":"Partitioning of the SD card"},{"location":"Developer-Guide_Using-Vagrant/","text":"Quick Start with Vagrant \u00b6 Vagrant HOST Steps \u00b6 The following steps are performed on the host that runs Vagrant. Installing Vagrant and Downloading Armbian \u00b6 Virtualbox Version \u00b6 WARNING: We\u2019ll be using Virtualbox as a virtualization provider for Vagrant . Virtualbox has documented issues running Xenial under heavy disk IO . Please make sure your version of Virtualbox is >= 5.1.12 where the issue, \u201cStorage: fixed a problem with the LsiLogic SCSI controller where requests could be lost with SMP guests\u201d , appears to have been resolved. First, you\u2019ll need to install Vagrant on your host box. Next, you\u2019ll need to install a plug-in that will enable us to resize the primary storage device. Without it, the default Vagrant images are too small to build Armbian. vagrant plugin install vagrant-disksize Now we\u2019ll need to install git and clone the Armbian repo. While this might seem obvious, we rely on it being there when we use Vagrant to bring up our guest-build box. # Clone the project. git clone --depth 1 https://github.com/armbian/build # Make the Vagrant box available. This might take a while but only needs to be done once. vagrant box add ubuntu/bionic64 # If the box gets updated by the folks at HashiCorp, we'll want to update our copy too. # This only needs done once and a while. vagrant box update Armbian Directory Structure \u00b6 Before we bring up the box, take note of the directory structure used by the Armbian build tool. When you read the Vagrantfile (which is in the build/config/templates directory) you\u2019ll see that Vagrant will mount local output and userpatches directories. This is helpful as it enables you to easily retrieve your images from the host once built, and customize the build process . Creating the Vagrant Guest Box Used to Build \u00b6 Let\u2019s bring the box up. This might take a minute or two depending on your bandwidth and hardware. # We have to be in the same directory as the Vagrant file, which is in the build/config/templates directory. cd build/config/templates # Note that you can edit the Vagrant file to specify the number of cpus and amount of memory you want Vagrant to use. # And now we simply let vagrant create our box and bring it up. vagrant up # When the box has been installed we can get access via ssh. # (No need for passwords, Vagrant installs the keys we'll need.) vagrant ssh Important note \u00b6 It is strongly recommended to halt and restart the Vagrant box after building an image. Check this issue for details. Vagrant GUEST Steps \u00b6 The following steps are all run on the guest Vagrant created for us. Once it\u2019s finally up and you\u2019re logged in, it works much like any of the other install methods (NOTE: again, these commands are run on the guest box). # Let's get building! cd armbian sudo ./compile.sh More Vagrant HOST Steps \u00b6 Wrap up your vagrant box when no longer needed (log out of the guest before running these commands on the host system): # Shutdown, but leave the box around for more building at a later time: vagrant halt # Trash the box and remove all the related storage devices. vagrant destroy","title":"Building with Vagrant"},{"location":"Developer-Guide_Using-Vagrant/#quick-start-with-vagrant","text":"","title":"Quick Start with Vagrant"},{"location":"Developer-Guide_Using-Vagrant/#vagrant-host-steps","text":"The following steps are performed on the host that runs Vagrant.","title":"Vagrant HOST Steps"},{"location":"Developer-Guide_Using-Vagrant/#installing-vagrant-and-downloading-armbian","text":"","title":"Installing Vagrant and Downloading Armbian"},{"location":"Developer-Guide_Using-Vagrant/#virtualbox-version","text":"WARNING: We\u2019ll be using Virtualbox as a virtualization provider for Vagrant . Virtualbox has documented issues running Xenial under heavy disk IO . Please make sure your version of Virtualbox is >= 5.1.12 where the issue, \u201cStorage: fixed a problem with the LsiLogic SCSI controller where requests could be lost with SMP guests\u201d , appears to have been resolved. First, you\u2019ll need to install Vagrant on your host box. Next, you\u2019ll need to install a plug-in that will enable us to resize the primary storage device. Without it, the default Vagrant images are too small to build Armbian. vagrant plugin install vagrant-disksize Now we\u2019ll need to install git and clone the Armbian repo. While this might seem obvious, we rely on it being there when we use Vagrant to bring up our guest-build box. # Clone the project. git clone --depth 1 https://github.com/armbian/build # Make the Vagrant box available. This might take a while but only needs to be done once. vagrant box add ubuntu/bionic64 # If the box gets updated by the folks at HashiCorp, we'll want to update our copy too. # This only needs done once and a while. vagrant box update","title":"Virtualbox Version"},{"location":"Developer-Guide_Using-Vagrant/#armbian-directory-structure","text":"Before we bring up the box, take note of the directory structure used by the Armbian build tool. When you read the Vagrantfile (which is in the build/config/templates directory) you\u2019ll see that Vagrant will mount local output and userpatches directories. This is helpful as it enables you to easily retrieve your images from the host once built, and customize the build process .","title":"Armbian Directory Structure"},{"location":"Developer-Guide_Using-Vagrant/#creating-the-vagrant-guest-box-used-to-build","text":"Let\u2019s bring the box up. This might take a minute or two depending on your bandwidth and hardware. # We have to be in the same directory as the Vagrant file, which is in the build/config/templates directory. cd build/config/templates # Note that you can edit the Vagrant file to specify the number of cpus and amount of memory you want Vagrant to use. # And now we simply let vagrant create our box and bring it up. vagrant up # When the box has been installed we can get access via ssh. # (No need for passwords, Vagrant installs the keys we'll need.) vagrant ssh","title":"Creating the Vagrant Guest Box Used to Build"},{"location":"Developer-Guide_Using-Vagrant/#important-note","text":"It is strongly recommended to halt and restart the Vagrant box after building an image. Check this issue for details.","title":"Important note"},{"location":"Developer-Guide_Using-Vagrant/#vagrant-guest-steps","text":"The following steps are all run on the guest Vagrant created for us. Once it\u2019s finally up and you\u2019re logged in, it works much like any of the other install methods (NOTE: again, these commands are run on the guest box). # Let's get building! cd armbian sudo ./compile.sh","title":"Vagrant GUEST Steps"},{"location":"Developer-Guide_Using-Vagrant/#more-vagrant-host-steps","text":"Wrap up your vagrant box when no longer needed (log out of the guest before running these commands on the host system): # Shutdown, but leave the box around for more building at a later time: vagrant halt # Trash the box and remove all the related storage devices. vagrant destroy","title":"More Vagrant HOST Steps"},{"location":"Governance_Maintainers_TBD/","text":"Maintainers \u00b6 Board / Platform / Maintainers \u00b6 Area Lead Maintainer Maintainers Acronyms, Codenames additional info Allwinner @martinayotte @igorpecovnik, @jernejsk sunxi, sunxi64 Amlogic @Tonymac32 @igorpecovnik, @martinayotte meson, meson64 Rockchip @Tonymac32 @igorpecovnik, @martinayotte, @JMCC rockchip, rockchip64, rk3399 @JMCC: Renegade only Mediatek @chwe17 mt7623 Marvell @gprovost @ebin-dev mvebu,mvebu64 Samsung odroidxu4 Pine64 @Tido Armbian Base Maintainers \u00b6 Area Lead Maintainer Maintainers Acronyms, Codenames additional info Build Scripts @igorpecovnik @martinayotte, @lanefu /lib/*.sh code responsible for building images Armbian-Tools @igorpecovnik @botfap armbian-config, armbian-monitor userland tools provided by Armbian Armbian-Tools: armbian-config @gprovst armbian-config Multimedia @JMCC, @jernejsk, @Miouyouyou Other Roles \u00b6 Area Lead Maintainer Maintainers Acronyms, Codenames additional info Release Management @igorpecovnik Testing and Code Quality, CI @lanefu @igorpecovnik Security Documentation @Werner Community Engagement @NicoD, @tido Legal and Financial @igorpecovnik Web and Infrastucture @lauri IRC & Services @Werner Hackers Emeritus \u00b6 Members who have stepped away from the project, but had a huge impact. We always welcome their contributions and wisdom. @tkaiser @zador.blood.stained","title":"Maintainers #"},{"location":"Governance_Maintainers_TBD/#maintainers","text":"","title":"Maintainers"},{"location":"Governance_Maintainers_TBD/#board-platform-maintainers","text":"Area Lead Maintainer Maintainers Acronyms, Codenames additional info Allwinner @martinayotte @igorpecovnik, @jernejsk sunxi, sunxi64 Amlogic @Tonymac32 @igorpecovnik, @martinayotte meson, meson64 Rockchip @Tonymac32 @igorpecovnik, @martinayotte, @JMCC rockchip, rockchip64, rk3399 @JMCC: Renegade only Mediatek @chwe17 mt7623 Marvell @gprovost @ebin-dev mvebu,mvebu64 Samsung odroidxu4 Pine64 @Tido","title":"Board / Platform / Maintainers"},{"location":"Governance_Maintainers_TBD/#armbian-base-maintainers","text":"Area Lead Maintainer Maintainers Acronyms, Codenames additional info Build Scripts @igorpecovnik @martinayotte, @lanefu /lib/*.sh code responsible for building images Armbian-Tools @igorpecovnik @botfap armbian-config, armbian-monitor userland tools provided by Armbian Armbian-Tools: armbian-config @gprovst armbian-config Multimedia @JMCC, @jernejsk, @Miouyouyou","title":"Armbian Base Maintainers"},{"location":"Governance_Maintainers_TBD/#other-roles","text":"Area Lead Maintainer Maintainers Acronyms, Codenames additional info Release Management @igorpecovnik Testing and Code Quality, CI @lanefu @igorpecovnik Security Documentation @Werner Community Engagement @NicoD, @tido Legal and Financial @igorpecovnik Web and Infrastucture @lauri IRC & Services @Werner","title":"Other Roles"},{"location":"Governance_Maintainers_TBD/#hackers-emeritus","text":"Members who have stepped away from the project, but had a huge impact. We always welcome their contributions and wisdom. @tkaiser @zador.blood.stained","title":"Hackers Emeritus"},{"location":"Hardware_Allwinner-A20/","text":"Allwinner A10 & A20 boards \u00b6 Overview \u00b6 Both kernels are stable and production ready, but you should use them for different purposes since their basic support differ: legacy: video acceleration, NAND support, connecting displays mainline: headless server, office desktop operations (not multimedia oriented) Legacy \u00b6 System images with legacy kernel Please note that upstream support for kernel 3.4.x has ended in 2017 so this kernel will not receive security updates in the future. \u00b6 Kernel 3.4.x with large hardware support, headers and some firmware included Enabled audio devices: analog, 8 channel HDMI, spdif and I2S (if wired and enabled in HW configuration) Bluetooth ready (working with supported external keys) Enabled overlayfs I2C ready and tested with small 16\u00d72 LCD. Basic i2c tools included. SPI ready and tested with ILI9341 based 2.4\u2033 TFT LCD display. Drivers for small TFT LCD display modules. Clustering / stacking Onboard LED attached to SD card activity (script.bin) Bugs or limitation \u00b6 NAND install sometime fails. Workaround: install Lubuntu to NAND with Phoenix tools and run install again. Shutdown results into reboot under certain conditions. Mainline \u00b6 System images with mainline kernel Mainline with large hardware support, headers and some firmware included Docker ready Enabled audio devices: analog, SPDIF (if available) & USB USB / UAS \u2013 more efficient disk access over USB (A20 and H3) CAN bus \u2013 Controller Area Network USB OTG connector \u2013 OTG or host mode Bluetooth ready (working with supported external keys) I2C ready and tested with small 16\u00d72 LCD. Basic i2c tools included. Onboard LED attached to SD card activity (not enabled on all boards yet) Bugs or limitation \u00b6 No HW acceleration for desktop and video decoding NAND is not supported yet Screen output from kernel is set to HDMI by default. Boot loader can detect and switch, kernel not. HDMI audio is not supported yet SATA port multiplier support is disabled by default, can be enabled by adding kernel parameter ahci_sunxi.enable_pmp=1 Desktop \u00b6 HW accelerated video playback (legacy kernel only) MALI Open GLES (legacy kernel only) Pre-installed: Firefox, LibreOffice Writer, Thunderbird Lightweight XFCE desktop Autologin, when normal user is created \u2013 no login manager (/etc/default/nodm) Notes \u00b6 Setting non-standard monitor settings for A10, A20 and A31 based boards in u-boot \u00b6 Following commands (example) needs to be executed in u-boot command prompt: setenv video-mode sunxi:1024x768-24@60,monitor=dvi,hpd=0,edid=0,overscan_x=1,overscan_y=2 saveenv Since environment is reset after flashing u-boot, you need to do this after every u-boot upgrade or put this to u-boot script Resources \u00b6 Armbian packages repository","title":"A10 and A20"},{"location":"Hardware_Allwinner-A20/#allwinner-a10-a20-boards","text":"","title":"Allwinner A10 &amp; A20 boards"},{"location":"Hardware_Allwinner-A20/#overview","text":"Both kernels are stable and production ready, but you should use them for different purposes since their basic support differ: legacy: video acceleration, NAND support, connecting displays mainline: headless server, office desktop operations (not multimedia oriented)","title":"Overview"},{"location":"Hardware_Allwinner-A20/#legacy","text":"System images with legacy kernel","title":"Legacy"},{"location":"Hardware_Allwinner-A20/#please-note-that-upstream-support-for-kernel-34x-has-ended-in-2017-so-this-kernel-will-not-receive-security-updates-in-the-future","text":"Kernel 3.4.x with large hardware support, headers and some firmware included Enabled audio devices: analog, 8 channel HDMI, spdif and I2S (if wired and enabled in HW configuration) Bluetooth ready (working with supported external keys) Enabled overlayfs I2C ready and tested with small 16\u00d72 LCD. Basic i2c tools included. SPI ready and tested with ILI9341 based 2.4\u2033 TFT LCD display. Drivers for small TFT LCD display modules. Clustering / stacking Onboard LED attached to SD card activity (script.bin)","title":"Please note that upstream support for kernel 3.4.x has ended in 2017 so this kernel will not receive security updates in the future."},{"location":"Hardware_Allwinner-A20/#bugs-or-limitation","text":"NAND install sometime fails. Workaround: install Lubuntu to NAND with Phoenix tools and run install again. Shutdown results into reboot under certain conditions.","title":"Bugs or limitation"},{"location":"Hardware_Allwinner-A20/#mainline","text":"System images with mainline kernel Mainline with large hardware support, headers and some firmware included Docker ready Enabled audio devices: analog, SPDIF (if available) & USB USB / UAS \u2013 more efficient disk access over USB (A20 and H3) CAN bus \u2013 Controller Area Network USB OTG connector \u2013 OTG or host mode Bluetooth ready (working with supported external keys) I2C ready and tested with small 16\u00d72 LCD. Basic i2c tools included. Onboard LED attached to SD card activity (not enabled on all boards yet)","title":"Mainline"},{"location":"Hardware_Allwinner-A20/#bugs-or-limitation_1","text":"No HW acceleration for desktop and video decoding NAND is not supported yet Screen output from kernel is set to HDMI by default. Boot loader can detect and switch, kernel not. HDMI audio is not supported yet SATA port multiplier support is disabled by default, can be enabled by adding kernel parameter ahci_sunxi.enable_pmp=1","title":"Bugs or limitation"},{"location":"Hardware_Allwinner-A20/#desktop","text":"HW accelerated video playback (legacy kernel only) MALI Open GLES (legacy kernel only) Pre-installed: Firefox, LibreOffice Writer, Thunderbird Lightweight XFCE desktop Autologin, when normal user is created \u2013 no login manager (/etc/default/nodm)","title":"Desktop"},{"location":"Hardware_Allwinner-A20/#notes","text":"","title":"Notes"},{"location":"Hardware_Allwinner-A20/#setting-non-standard-monitor-settings-for-a10-a20-and-a31-based-boards-in-u-boot","text":"Following commands (example) needs to be executed in u-boot command prompt: setenv video-mode sunxi:1024x768-24@60,monitor=dvi,hpd=0,edid=0,overscan_x=1,overscan_y=2 saveenv Since environment is reset after flashing u-boot, you need to do this after every u-boot upgrade or put this to u-boot script","title":"Setting non-standard monitor settings for A10, A20 and A31 based boards in u-boot"},{"location":"Hardware_Allwinner-A20/#resources","text":"Armbian packages repository","title":"Resources"},{"location":"Hardware_Allwinner-H3/","text":"Allwinner H3 boards \u00b6 Overview \u00b6 The H3 SoC from Allwinner is meant for OTT boxes and therefore its reference design is not accompanied by a separate PMIC (power management IC) unlike A series Allwinner SoCs (like A10, A20, A64, \u2026). No PMIC means also that there is no battery charging/monitoring implemented so H3 is not that much suited for mobile devices. On the other hand some pretty cheap H3 boards were released that can be driven with rather low consumption and therefore combining H3 devices with a battery became a real use case with boards like Orange Pi One/Lite , NanoPi NEO and Neo AIR . As usual SoC and device information can be found in Linux-sunxi wiki. Same applies to status of mainlining kernel efforts . Adding to the usual SoC feature set (I2C, SPI, PWM, UART, SDIO, GPIO and so on) H3 has one USB OTG port, 3 real USB host ports (not exposed on all devices), Fast- and Gigabit Ethernet capablities (board specific), a Mali400MP2 GPU and Allwinner\u2019s video encoding/decoding engine. When CPU or GPU cores are fully utilized H3 tends to overheat over time like any other popular ARM SoC released within the last 2-3 years. With Armbian we provide sane dvfs (dynamic voltage frequency scaling) settings that help a lot with throttling. In case you plan to operate your H3 device constantly under high load please check Armbian forums first since boards behave differently (related to voltage regulation and PCB size and design \u2013 some use copper layers to spread the heat away from the SoC). Also consider applying a heatsink to the SoC (a fan should not be necessary unless you want to do number crunching on your board and then you obviously chose the wrong device). You find some differentiation criteria regarding supported H3 devices as well as an overview/history of H3 software support in our forums or use Jean-Luc\u2019s nice comparison table (both slightly outdated since more H3 devices have been released in the meantime). Kernel support \u00b6 Almost all features of the H3 SoC are supported on Armbian\u2019s current branch. Please refer to the Linux sunxi support sheet . Default settings \u00b6 CPU frequency settings are 240-912 MHz on NanoPi NEO, 240-1200 MHz on BPi M2+, NanoPi M1 and Beelink X2, 480-1200 MHz on OPi One/Lite and 480-1296 MHz on the other boards (cpufreq governor is interactive therefore the boards only increase CPU speed and consumption when needed). The differences are due to different voltage regulators and heat dissipation behaviour. Armbian unlike older/other H3 OS images uses the green led as \u2018power on\u2019 indicator (blinking means \u2018ready to login\u2019 or \u2018shutting down\u2019), the red led (blue on NanoPis) can be used for your own purpose. Tips and tricks (general) \u00b6 An insufficient power supply is the root cause of many weird symptoms/problems . Never trust in ratings written on the PSU since they might be wrong, the PSU might be old/dying and cable/contact resistance adds to problems. In other words: Before you blame Armbian for strange behaviour please try at least one second power supply (this applies to both PSU and cable between PSU and board if this is separate \u2013 especially USB cables really suck due to high resistance leading to severe voltage drops). In case you experience instabilities check your SD card using armbianmonitor -c $HOME and think about installing RPi-Monitor for H3 to get an idea whether you suffer from overheating ( sudo armbianmonitor -r will install everything needed). Especially for desktop images the speed of your SD card matters. If possible try to use our nand-sata-install script to move the rootfs away from SD card. The script also works with USB disks flawlessly ( some background information ). Tips and tricks (H3 specific / lowering consumption) (outdated) \u00b6 Recent research showed that H3 boards operated as wired IoT nodes need way less power compared to Raspberry Pis in the same situation (ethernet active). If you want to use your H3 device headless (server/IoT) and care about power consumption then there exist a couple of tweaks to get your board being more energy efficient when using in the meantime unsupported 3.x kernel (no tests done yet with up-to-date legacy / current kernel): Disabling HDMI/GPU saves ~200mW. Allowing to temporarely only negotiate a Fast Ethernet connection on GbE capable boards saves +350 mW. Adjusting DRAM clockspeed is surprisingly another way to control consumption (on NanoPi NEO for example changing DRAM clockspeed between 132 MHz and 672 MHz results in consumption differences of 470mW). Limiting maximum CPU clockspeed will help with lowering maximum consumption (think about scripts running amok or something going terribly wrong), the same applies to limiting the count of active CPU cores. Choosing a board with Fast instead of Gigabit Ethernet or disabling GbE on the latter using ethtool or ifconfig saves at least 150 mW (board specific). As an example: We chose default Armbian settings for NanoPi NEO to ensure this board is not able to exceed 2W consumption when running with no peripherals connected. This resulted in CPU and DRAM clockspeed of just 480/408 MHz while booting (the first ~20 seconds). In normal operation we limit maximum CPU clockspeed to 912 MHz to stay below the 2W consumption barrier even in worst case scenarios. In case you want to have a few more percent maximum CPU performance you would need to set maximum cpufreq to 1200 MHz instead of \u2018just\u2019 912 MHz maximum CPU clock using our new h3consumption tool . Be warned: This will both heavily increase consumption and SoC temperature since exceeding 912 MHz CPU clockspeed means feeding the SoC with 1.3V instead of 1.1V core voltage (most smaller H3 devices use a voltage regulator only switching between two voltages to feed the SoC based on load). Walking this route in the other direction is more interesting: In case you want to use an H3 device as IoT node you might want to limit both idle and maximum consumption. That should involve disabling stuff not needed (eg. HDMI/GPU since this saves 200mW) or limiting ressource consumption: Lowering maximum clockspeeds for both CPU and DRAM or even disabling CPU cores (which helps not with idle consumption since ARM cores enter low-power modes if not needed but can help lowering maximum consumption requirements). Since all of this stuff is based on recent research and being still WiP please consider reading through relevant threads in Armbian forums and join development/research/discussions: SBC consumption/performance comparisons and Default settings for NanoPi NEO/Air .","title":"H2+ and H3"},{"location":"Hardware_Allwinner-H3/#allwinner-h3-boards","text":"","title":"Allwinner H3 boards"},{"location":"Hardware_Allwinner-H3/#overview","text":"The H3 SoC from Allwinner is meant for OTT boxes and therefore its reference design is not accompanied by a separate PMIC (power management IC) unlike A series Allwinner SoCs (like A10, A20, A64, \u2026). No PMIC means also that there is no battery charging/monitoring implemented so H3 is not that much suited for mobile devices. On the other hand some pretty cheap H3 boards were released that can be driven with rather low consumption and therefore combining H3 devices with a battery became a real use case with boards like Orange Pi One/Lite , NanoPi NEO and Neo AIR . As usual SoC and device information can be found in Linux-sunxi wiki. Same applies to status of mainlining kernel efforts . Adding to the usual SoC feature set (I2C, SPI, PWM, UART, SDIO, GPIO and so on) H3 has one USB OTG port, 3 real USB host ports (not exposed on all devices), Fast- and Gigabit Ethernet capablities (board specific), a Mali400MP2 GPU and Allwinner\u2019s video encoding/decoding engine. When CPU or GPU cores are fully utilized H3 tends to overheat over time like any other popular ARM SoC released within the last 2-3 years. With Armbian we provide sane dvfs (dynamic voltage frequency scaling) settings that help a lot with throttling. In case you plan to operate your H3 device constantly under high load please check Armbian forums first since boards behave differently (related to voltage regulation and PCB size and design \u2013 some use copper layers to spread the heat away from the SoC). Also consider applying a heatsink to the SoC (a fan should not be necessary unless you want to do number crunching on your board and then you obviously chose the wrong device). You find some differentiation criteria regarding supported H3 devices as well as an overview/history of H3 software support in our forums or use Jean-Luc\u2019s nice comparison table (both slightly outdated since more H3 devices have been released in the meantime).","title":"Overview"},{"location":"Hardware_Allwinner-H3/#kernel-support","text":"Almost all features of the H3 SoC are supported on Armbian\u2019s current branch. Please refer to the Linux sunxi support sheet .","title":"Kernel support"},{"location":"Hardware_Allwinner-H3/#default-settings","text":"CPU frequency settings are 240-912 MHz on NanoPi NEO, 240-1200 MHz on BPi M2+, NanoPi M1 and Beelink X2, 480-1200 MHz on OPi One/Lite and 480-1296 MHz on the other boards (cpufreq governor is interactive therefore the boards only increase CPU speed and consumption when needed). The differences are due to different voltage regulators and heat dissipation behaviour. Armbian unlike older/other H3 OS images uses the green led as \u2018power on\u2019 indicator (blinking means \u2018ready to login\u2019 or \u2018shutting down\u2019), the red led (blue on NanoPis) can be used for your own purpose.","title":"Default settings"},{"location":"Hardware_Allwinner-H3/#tips-and-tricks-general","text":"An insufficient power supply is the root cause of many weird symptoms/problems . Never trust in ratings written on the PSU since they might be wrong, the PSU might be old/dying and cable/contact resistance adds to problems. In other words: Before you blame Armbian for strange behaviour please try at least one second power supply (this applies to both PSU and cable between PSU and board if this is separate \u2013 especially USB cables really suck due to high resistance leading to severe voltage drops). In case you experience instabilities check your SD card using armbianmonitor -c $HOME and think about installing RPi-Monitor for H3 to get an idea whether you suffer from overheating ( sudo armbianmonitor -r will install everything needed). Especially for desktop images the speed of your SD card matters. If possible try to use our nand-sata-install script to move the rootfs away from SD card. The script also works with USB disks flawlessly ( some background information ).","title":"Tips and tricks (general)"},{"location":"Hardware_Allwinner-H3/#tips-and-tricks-h3-specific-lowering-consumption-outdated","text":"Recent research showed that H3 boards operated as wired IoT nodes need way less power compared to Raspberry Pis in the same situation (ethernet active). If you want to use your H3 device headless (server/IoT) and care about power consumption then there exist a couple of tweaks to get your board being more energy efficient when using in the meantime unsupported 3.x kernel (no tests done yet with up-to-date legacy / current kernel): Disabling HDMI/GPU saves ~200mW. Allowing to temporarely only negotiate a Fast Ethernet connection on GbE capable boards saves +350 mW. Adjusting DRAM clockspeed is surprisingly another way to control consumption (on NanoPi NEO for example changing DRAM clockspeed between 132 MHz and 672 MHz results in consumption differences of 470mW). Limiting maximum CPU clockspeed will help with lowering maximum consumption (think about scripts running amok or something going terribly wrong), the same applies to limiting the count of active CPU cores. Choosing a board with Fast instead of Gigabit Ethernet or disabling GbE on the latter using ethtool or ifconfig saves at least 150 mW (board specific). As an example: We chose default Armbian settings for NanoPi NEO to ensure this board is not able to exceed 2W consumption when running with no peripherals connected. This resulted in CPU and DRAM clockspeed of just 480/408 MHz while booting (the first ~20 seconds). In normal operation we limit maximum CPU clockspeed to 912 MHz to stay below the 2W consumption barrier even in worst case scenarios. In case you want to have a few more percent maximum CPU performance you would need to set maximum cpufreq to 1200 MHz instead of \u2018just\u2019 912 MHz maximum CPU clock using our new h3consumption tool . Be warned: This will both heavily increase consumption and SoC temperature since exceeding 912 MHz CPU clockspeed means feeding the SoC with 1.3V instead of 1.1V core voltage (most smaller H3 devices use a voltage regulator only switching between two voltages to feed the SoC based on load). Walking this route in the other direction is more interesting: In case you want to use an H3 device as IoT node you might want to limit both idle and maximum consumption. That should involve disabling stuff not needed (eg. HDMI/GPU since this saves 200mW) or limiting ressource consumption: Lowering maximum clockspeeds for both CPU and DRAM or even disabling CPU cores (which helps not with idle consumption since ARM cores enter low-power modes if not needed but can help lowering maximum consumption requirements). Since all of this stuff is based on recent research and being still WiP please consider reading through relevant threads in Armbian forums and join development/research/discussions: SBC consumption/performance comparisons and Default settings for NanoPi NEO/Air .","title":"Tips and tricks (H3 specific / lowering consumption) (outdated)"},{"location":"Hardware_Allwinner-H5-A64/","text":"Allwinner H5 and A64 boards \u00b6 Overview \u00b6 See the generic Allwinner page Warning \u00b6 Using the board without cooling in conjunction with the stable release of Ambian using kernel 4.19.y there is a risk of the board getting permanently damaged due to overheating. If you decide to try the board without cooling, you can use sudo armbianmonitor -r to keep an eye on the temperatures.","title":"H5 and A64"},{"location":"Hardware_Allwinner-H5-A64/#allwinner-h5-and-a64-boards","text":"","title":"Allwinner H5 and A64 boards"},{"location":"Hardware_Allwinner-H5-A64/#overview","text":"See the generic Allwinner page","title":"Overview"},{"location":"Hardware_Allwinner-H5-A64/#warning","text":"Using the board without cooling in conjunction with the stable release of Ambian using kernel 4.19.y there is a risk of the board getting permanently damaged due to overheating. If you decide to try the board without cooling, you can use sudo armbianmonitor -r to keep an eye on the temperatures.","title":"Warning"},{"location":"Hardware_Allwinner-H6/","text":"Allwinner H6 \u00b6 CPU frequency \u00b6 See the generic Allwinner page The H6 CPU frequency has ben soft-capped at 1,48 GHz to avoid thermal throttling too fast. This limit can be lifted by editing /etc/default/cpufrequtils and set MAX_SPEED to 1810000 . With the release of Armbian 20.05 \u201cKagu\u201d new thermal zones have been added making this limitation obsolete and therefore has been removed. All H6 boards now clocking at the highest possible value OOB. Warning Adding proper cooling is highly recommended. PCIe (un-)supported \u00b6 Some H6 SoC based boards (like Pine H64 Model a, discontinued) are shipped with a PCIe slot. This slot cannot work out of the box as it has to be considered as broken by design. Linux-Sunxi writes about this: Allwinner H6 has a quirky PCIe controller that doesn\u2019t map the PCIe address space properly (only 64k accessible at one time) to CPU, and accessing the PCIe config space, I/O space or memory space will need to be wrapped. As Linux doesn\u2019t wrap PCIe memory space access, it\u2019s not possible to do a proper PCIe controller driver for H6. The BSP kernel modifies the driver to wrap the access, so it\u2019s also not generic, and only devices with modified driver will work. Icenowy is working on a wrapper to make PCIe work. Check forums .","title":"H6"},{"location":"Hardware_Allwinner-H6/#allwinner-h6","text":"","title":"Allwinner H6"},{"location":"Hardware_Allwinner-H6/#cpu-frequency","text":"See the generic Allwinner page The H6 CPU frequency has ben soft-capped at 1,48 GHz to avoid thermal throttling too fast. This limit can be lifted by editing /etc/default/cpufrequtils and set MAX_SPEED to 1810000 . With the release of Armbian 20.05 \u201cKagu\u201d new thermal zones have been added making this limitation obsolete and therefore has been removed. All H6 boards now clocking at the highest possible value OOB. Warning Adding proper cooling is highly recommended.","title":"CPU frequency"},{"location":"Hardware_Allwinner-H6/#pcie-un-supported","text":"Some H6 SoC based boards (like Pine H64 Model a, discontinued) are shipped with a PCIe slot. This slot cannot work out of the box as it has to be considered as broken by design. Linux-Sunxi writes about this: Allwinner H6 has a quirky PCIe controller that doesn\u2019t map the PCIe address space properly (only 64k accessible at one time) to CPU, and accessing the PCIe config space, I/O space or memory space will need to be wrapped. As Linux doesn\u2019t wrap PCIe memory space access, it\u2019s not possible to do a proper PCIe controller driver for H6. The BSP kernel modifies the driver to wrap the access, so it\u2019s also not generic, and only devices with modified driver will work. Icenowy is working on a wrapper to make PCIe work. Check forums .","title":"PCIe (un-)supported"},{"location":"Hardware_Allwinner/","text":"Enable Hardware Features \u00b6 Some boards require some manual configuration to turn on/off certain features In some cases, the procedure is \u201cless than obvious\u201d, so we document some basic examples here. Generic howto for Allwinner devices \u00b6 Legacy or current kernel ? \u00b6 Many Armbian images come in two flavours : Legacy (using an older kernel version) and current (up-to-date LTS kernel). Depending on kernel version, the procedure to enable/disable features is not the same. Legacy kernel (4.19.x): DT (Device Tree) overlays Current kernel (5.4.x) : DT (Device Tree) overlays Note: Support for older kernel versiones (like 3.4.x or 3.10.x) has been dropped. How to reconfigure video output? \u00b6 This affect current kernel only. U-Boot supports HDMI and LCD output on Allwinner sunxi SoCs, LCD output requires the CONFIG_VIDEO_LCD_MODE Kconfig value to be set. The sunxi U-Boot driver supports the following video-mode options: monitor=[none|dvi|hdmi|lcd|vga|composite-*] - Select the video output to use none : Disable video output. dvi/hdmi : Selects output over the hdmi connector with dvi resp. hdmi output format, if edid is used the format is automatically selected. lcd : Selects video output to a LCD screen. vga : Selects video output over the VGA connector. composite-pal/composite-ntsc/composite-pal-m/composite-pal-nc : Selects composite video output, note the specified resolution is ignored with composite video output. Defaults to monitor=dvi . hpd=[0|1] - Enable use of the HDMI HotPlug Detect feature 0: Disabled. Configure DVI/HDMI output even if no cable is detected 1: Enabled. Fallback to the LCD / VGA / none in that order (if available) Defaults to hpd=1 . hpd_delay=<int> - How long to wait for the HDMI HPD signal in milliseconds When the monitor and the board power up at the same time, it may take some time for the monitor to assert the HPD signal. This configures how long to wait for the HPD signal before assuming no cable is connected. Defaults to hpd_delay=500 . edid=[0|1] - Enable use of DDC + EDID to get monitor info 0: Disabled. 1: Enabled. If valid EDID info was read from the monitor the EDID info will overrides the xres, yres and refresh from the video-mode env. variable. Defaults to edid=1 . overscan_x/overscan_y=<int> - Set x/y overscan value This configures a black border on the left and right resp. top and bottom to deal with overscanning displays. Defaults to overscan_x=32 and overscan_y=20 for composite monitors, 0 for other monitors. For example to always use the HDMI connector, even if no cable is inserted, using edid info when available and otherwise initalizing it at 1024x768@60Hz, use: setenv video-mode sunxi:1024x768-24@60,monitor=dvi,hpd=0,edid=0 . Parameters regarding video must be saved into U-Boot environment file since they must be read before reading boot script. You can do this by adding saveenv command at the end of boot script (boot.cmd). Remember to recompile boot.cmd to boot.scr and note that changes will come into action after second boot. What flavour am I using ? \u00b6 Best way to know is by checking your kernel version : root@bananapipro:~# uname -a Linux bananapipro 4.5.2-sunxi #11 SMP Thu Apr 28 21:53:25 CEST 2016 armv7l GNU/Linux In this example the kernel version is 4.5.2 so you can use DT to tweak some settings. If you get a kernel version 3.X then you\u2019ll be certainly using FEX like on an Orange Pi Plus 2E : root@orangepiplus2e:~# uname -a Linux orangepiplus2e 3.4.112-sun8i #10 SMP PREEMPT Wed Jun 1 19:43:08 CEST 2016 armv7l GNU/Linux FEX (outdated/unsupported, informational only) \u00b6 Which file should I edit \u00b6 Armbian embed a lot of BIN files, but a symlink point to the one in use : root@orangepiplus2e:~# ls -la /boot/script.bin lrwxrwxrwx 1 root root 22 Jun 1 20:30 /boot/script.bin -> bin/orangepiplus2e.bin Updating a FEX \u00b6 You may need to use sudo with all the following commands. The whole process won\u2019t overwrite any of your files. If you\u2019re paranoid, you can make a proper backup of your BIN file : cp /boot/script.bin /boot/bin/script.bin.backup Then you can decompile your BIN into a FEX : bin2fex /boot/script.bin /tmp/custom.fex Finally you can edit your FEX file with your favorite text editor and compile it back to a BIN : fex2bin /tmp/custom.fex /boot/bin/custom.bin The last step is to change the symlink to use your custom BIN : ln -sf /boot/bin/custom.bin /boot/script.bin H3 based Orange Pi, legacy kernel \u00b6 Enable serial /dev/ttyS3 on pins 8 and 10 of the 40 pin header \u00b6 Update the FEX configuration (which is compiled into a .bin) located at /boot/script.bin Decompile .bin to .fex cd /boot bin2fex script.bin > custom.fex rm script.bin # only removes symbolic link Edit .fex file [uart3] uart_used = 1 ; Change from 0 to 1 uart_port = 3 uart_type = 2 ; In this case we have a 2 pin UART uart_tx = port:PA13<3><1><default><default> uart_rx = port:PA14<3><1><default><default> Compile .fex to .bin fex2bin custom.fex > script.bin Reboot Notice that /dev/ttyS3 appears. That is your new UART device. Connect your LCD display \u00b6 I tried three different display connection types: I2C, (4bit) parallel and SPI. All of them are working perfectly with my image. I didn\u2019t took a picture of the third one. It\u2019s a standard Hitachi HD44780 based 20\u00d74 LCD, wired and tested according to Wiring(B)PI example . I2C I am using this code for mainline kernel and with changed line : /dev/i2c-%u = /dev/i2c-2 for Legacy kernel. SPI I am using 2.4\u2033 240\u00d7320 SPI TFT LCD Serial Port Module+5/3.3V Pbc Adapter Micro SD ILI9341 Wire according to this map . You have to use Armbian 1.5 or newer. Currently working only under Legacy kernel. Add this to your /etc/modules: fbtft_device name=adafruit22a rotate=90 speed=48000000 fps=50 gpios=reset:25,led:19,dc:24 Reboot Test \u2013 display some picture on the screen: fbi -d /dev/fb2 -T 1 -noverbose -a yourimage.jpg Troubleshooting and settings for other displays LVDS Currently working only under Legacy kernel. Image has pre-loaded settings for two LVDS display. To enable 7 inch. ln -sf /boot/bin/bananapilcd7.bin /boot/script.bin To enable 5 inch. ln -sf /boot/bin/bananapilcd5.bin /boot/script.bin If you need touch screen support, add this module to your /etc/modules ft5x_ts","title":"Allwinner (Generic)"},{"location":"Hardware_Allwinner/#enable-hardware-features","text":"Some boards require some manual configuration to turn on/off certain features In some cases, the procedure is \u201cless than obvious\u201d, so we document some basic examples here.","title":"Enable Hardware Features"},{"location":"Hardware_Allwinner/#generic-howto-for-allwinner-devices","text":"","title":"Generic howto for Allwinner devices"},{"location":"Hardware_Allwinner/#legacy-or-current-kernel","text":"Many Armbian images come in two flavours : Legacy (using an older kernel version) and current (up-to-date LTS kernel). Depending on kernel version, the procedure to enable/disable features is not the same. Legacy kernel (4.19.x): DT (Device Tree) overlays Current kernel (5.4.x) : DT (Device Tree) overlays Note: Support for older kernel versiones (like 3.4.x or 3.10.x) has been dropped.","title":"Legacy or current kernel ?"},{"location":"Hardware_Allwinner/#how-to-reconfigure-video-output","text":"This affect current kernel only. U-Boot supports HDMI and LCD output on Allwinner sunxi SoCs, LCD output requires the CONFIG_VIDEO_LCD_MODE Kconfig value to be set. The sunxi U-Boot driver supports the following video-mode options: monitor=[none|dvi|hdmi|lcd|vga|composite-*] - Select the video output to use none : Disable video output. dvi/hdmi : Selects output over the hdmi connector with dvi resp. hdmi output format, if edid is used the format is automatically selected. lcd : Selects video output to a LCD screen. vga : Selects video output over the VGA connector. composite-pal/composite-ntsc/composite-pal-m/composite-pal-nc : Selects composite video output, note the specified resolution is ignored with composite video output. Defaults to monitor=dvi . hpd=[0|1] - Enable use of the HDMI HotPlug Detect feature 0: Disabled. Configure DVI/HDMI output even if no cable is detected 1: Enabled. Fallback to the LCD / VGA / none in that order (if available) Defaults to hpd=1 . hpd_delay=<int> - How long to wait for the HDMI HPD signal in milliseconds When the monitor and the board power up at the same time, it may take some time for the monitor to assert the HPD signal. This configures how long to wait for the HPD signal before assuming no cable is connected. Defaults to hpd_delay=500 . edid=[0|1] - Enable use of DDC + EDID to get monitor info 0: Disabled. 1: Enabled. If valid EDID info was read from the monitor the EDID info will overrides the xres, yres and refresh from the video-mode env. variable. Defaults to edid=1 . overscan_x/overscan_y=<int> - Set x/y overscan value This configures a black border on the left and right resp. top and bottom to deal with overscanning displays. Defaults to overscan_x=32 and overscan_y=20 for composite monitors, 0 for other monitors. For example to always use the HDMI connector, even if no cable is inserted, using edid info when available and otherwise initalizing it at 1024x768@60Hz, use: setenv video-mode sunxi:1024x768-24@60,monitor=dvi,hpd=0,edid=0 . Parameters regarding video must be saved into U-Boot environment file since they must be read before reading boot script. You can do this by adding saveenv command at the end of boot script (boot.cmd). Remember to recompile boot.cmd to boot.scr and note that changes will come into action after second boot.","title":"How to reconfigure video output?"},{"location":"Hardware_Allwinner/#what-flavour-am-i-using","text":"Best way to know is by checking your kernel version : root@bananapipro:~# uname -a Linux bananapipro 4.5.2-sunxi #11 SMP Thu Apr 28 21:53:25 CEST 2016 armv7l GNU/Linux In this example the kernel version is 4.5.2 so you can use DT to tweak some settings. If you get a kernel version 3.X then you\u2019ll be certainly using FEX like on an Orange Pi Plus 2E : root@orangepiplus2e:~# uname -a Linux orangepiplus2e 3.4.112-sun8i #10 SMP PREEMPT Wed Jun 1 19:43:08 CEST 2016 armv7l GNU/Linux","title":"What flavour am I using ?"},{"location":"Hardware_Allwinner/#fex-outdatedunsupported-informational-only","text":"","title":"FEX (outdated/unsupported, informational only)"},{"location":"Hardware_Allwinner/#which-file-should-i-edit","text":"Armbian embed a lot of BIN files, but a symlink point to the one in use : root@orangepiplus2e:~# ls -la /boot/script.bin lrwxrwxrwx 1 root root 22 Jun 1 20:30 /boot/script.bin -> bin/orangepiplus2e.bin","title":"Which file should I edit"},{"location":"Hardware_Allwinner/#updating-a-fex","text":"You may need to use sudo with all the following commands. The whole process won\u2019t overwrite any of your files. If you\u2019re paranoid, you can make a proper backup of your BIN file : cp /boot/script.bin /boot/bin/script.bin.backup Then you can decompile your BIN into a FEX : bin2fex /boot/script.bin /tmp/custom.fex Finally you can edit your FEX file with your favorite text editor and compile it back to a BIN : fex2bin /tmp/custom.fex /boot/bin/custom.bin The last step is to change the symlink to use your custom BIN : ln -sf /boot/bin/custom.bin /boot/script.bin","title":"Updating a FEX"},{"location":"Hardware_Allwinner/#h3-based-orange-pi-legacy-kernel","text":"","title":"H3 based Orange Pi, legacy kernel"},{"location":"Hardware_Allwinner/#enable-serial-devttys3-on-pins-8-and-10-of-the-40-pin-header","text":"Update the FEX configuration (which is compiled into a .bin) located at /boot/script.bin Decompile .bin to .fex cd /boot bin2fex script.bin > custom.fex rm script.bin # only removes symbolic link Edit .fex file [uart3] uart_used = 1 ; Change from 0 to 1 uart_port = 3 uart_type = 2 ; In this case we have a 2 pin UART uart_tx = port:PA13<3><1><default><default> uart_rx = port:PA14<3><1><default><default> Compile .fex to .bin fex2bin custom.fex > script.bin Reboot Notice that /dev/ttyS3 appears. That is your new UART device.","title":"Enable serial /dev/ttyS3 on pins 8 and 10 of the 40 pin header"},{"location":"Hardware_Allwinner/#connect-your-lcd-display","text":"I tried three different display connection types: I2C, (4bit) parallel and SPI. All of them are working perfectly with my image. I didn\u2019t took a picture of the third one. It\u2019s a standard Hitachi HD44780 based 20\u00d74 LCD, wired and tested according to Wiring(B)PI example . I2C I am using this code for mainline kernel and with changed line : /dev/i2c-%u = /dev/i2c-2 for Legacy kernel. SPI I am using 2.4\u2033 240\u00d7320 SPI TFT LCD Serial Port Module+5/3.3V Pbc Adapter Micro SD ILI9341 Wire according to this map . You have to use Armbian 1.5 or newer. Currently working only under Legacy kernel. Add this to your /etc/modules: fbtft_device name=adafruit22a rotate=90 speed=48000000 fps=50 gpios=reset:25,led:19,dc:24 Reboot Test \u2013 display some picture on the screen: fbi -d /dev/fb2 -T 1 -noverbose -a yourimage.jpg Troubleshooting and settings for other displays LVDS Currently working only under Legacy kernel. Image has pre-loaded settings for two LVDS display. To enable 7 inch. ln -sf /boot/bin/bananapilcd7.bin /boot/script.bin To enable 5 inch. ln -sf /boot/bin/bananapilcd5.bin /boot/script.bin If you need touch screen support, add this module to your /etc/modules ft5x_ts","title":"Connect your LCD display"},{"location":"Hardware_Freescale-imx6/","text":"Cubox and Hummingboard boards \u00b6 Legacy \u00b6 System images with legacy kernel Kernel 3.14.x with large hardware support, headers and some firmware included Docker ready \u2013 what is Docker ? PCI-E operational (Hummingboard Pro, Gate & Edge) mSATA / m2 operational (Hummingboard Pro & Edge) Enabled audio devices: HDMI, spdif, analogue Bluetooth ready (working with Cubox-i/HB PRO on-board device or external key) I2C ready and tested with small 16\u00d72 LCD. Basic i2c tools included. SPI ready and tested with ILI9341 based 2.4\u2033 TFT LCD display. Drivers for small TFT LCD display modules. USB redirector \u2013 for sharing USB over TCP/IP (disabled by default /etc/init.d/rc.usbsrvd) Bugs or limitation \u00b6 Gigabit ethernet transfer rate is around 50% of its theoretical max rate (internal chip bus limitation) Mainline \u00b6 System images with mainline kernel Mainline with large hardware support, headers and some firmware included Docker ready \u2013 what is Docker ? PCI-E operational (Hummingboard Pro, Gate & Edge) mSATA / m2 operational (Hummingboard Pro & Edge) Enabled audio devices Bluetooth ready (working with supported external keys) Bugs or limitation \u00b6 Gigabit ethernet transfer rate is around 50% of its theoretical max rate (internal chip bus limitation) Desktop \u00b6 Pre-installed: Firefox, LibreOffice Writer, Thunderbird Lightweight XFCE desktop Autologin, when normal user is created \u2013 no login manager (/etc/default/nodm) Connect your LCD display \u00b6 I tried two different display connection types: I2C and SPI. Both are working perfectly with my image 2.6 or higher. I am using 2.4\u2033 240\u00d7320 SPI TFT LCD Serial Port Module+5/3.3V Pbc Adapter Micro SD ILI9341 Wire according to this map . You have to use Armbian 1.5 or newer. Currently working only under Legacy kernel. Add this to your /etc/modules: fbtft_device name=adafruit22a rotate=90 speed=48000000 fps=50 gpios=reset:67,led:72,dc:195 busnum=1 Reboot Test \u2013 display some picture on the screen: fbi -d /dev/fb2 -T 1 -noverbose -a yourimage.jpg Troubleshooting and settings for other displays LVDS GPIO \u00b6 How to control HummingBoard GPIO from kernel space? Udoo Quad \u00b6 Kernel 3.14.x and 4.4.x with some hardware support, headers and some firmware included Docker ready \u2013 what is Docker ? Wireless adapter with DHCP ready but disabled (/etc/network/interfaces, WPA2: normal connect, bonding / notebook or AP mode). It can handle between 40-70Mbit/s. SATA operational Enabled analogue (VT1613) and HDMI audio device Bugs \u00b6 SATA & USB install not working on legacy kernel Udoo Neo \u00b6 Kernel 3.14.x with some hardware support, headers and some firmware included Wireless adapter with DHCP ready but disabled","title":"Freescale i.MX6"},{"location":"Hardware_Freescale-imx6/#cubox-and-hummingboard-boards","text":"","title":"Cubox and Hummingboard boards"},{"location":"Hardware_Freescale-imx6/#legacy","text":"System images with legacy kernel Kernel 3.14.x with large hardware support, headers and some firmware included Docker ready \u2013 what is Docker ? PCI-E operational (Hummingboard Pro, Gate & Edge) mSATA / m2 operational (Hummingboard Pro & Edge) Enabled audio devices: HDMI, spdif, analogue Bluetooth ready (working with Cubox-i/HB PRO on-board device or external key) I2C ready and tested with small 16\u00d72 LCD. Basic i2c tools included. SPI ready and tested with ILI9341 based 2.4\u2033 TFT LCD display. Drivers for small TFT LCD display modules. USB redirector \u2013 for sharing USB over TCP/IP (disabled by default /etc/init.d/rc.usbsrvd)","title":"Legacy"},{"location":"Hardware_Freescale-imx6/#bugs-or-limitation","text":"Gigabit ethernet transfer rate is around 50% of its theoretical max rate (internal chip bus limitation)","title":"Bugs or limitation"},{"location":"Hardware_Freescale-imx6/#mainline","text":"System images with mainline kernel Mainline with large hardware support, headers and some firmware included Docker ready \u2013 what is Docker ? PCI-E operational (Hummingboard Pro, Gate & Edge) mSATA / m2 operational (Hummingboard Pro & Edge) Enabled audio devices Bluetooth ready (working with supported external keys)","title":"Mainline"},{"location":"Hardware_Freescale-imx6/#bugs-or-limitation_1","text":"Gigabit ethernet transfer rate is around 50% of its theoretical max rate (internal chip bus limitation)","title":"Bugs or limitation"},{"location":"Hardware_Freescale-imx6/#desktop","text":"Pre-installed: Firefox, LibreOffice Writer, Thunderbird Lightweight XFCE desktop Autologin, when normal user is created \u2013 no login manager (/etc/default/nodm)","title":"Desktop"},{"location":"Hardware_Freescale-imx6/#connect-your-lcd-display","text":"I tried two different display connection types: I2C and SPI. Both are working perfectly with my image 2.6 or higher. I am using 2.4\u2033 240\u00d7320 SPI TFT LCD Serial Port Module+5/3.3V Pbc Adapter Micro SD ILI9341 Wire according to this map . You have to use Armbian 1.5 or newer. Currently working only under Legacy kernel. Add this to your /etc/modules: fbtft_device name=adafruit22a rotate=90 speed=48000000 fps=50 gpios=reset:67,led:72,dc:195 busnum=1 Reboot Test \u2013 display some picture on the screen: fbi -d /dev/fb2 -T 1 -noverbose -a yourimage.jpg Troubleshooting and settings for other displays LVDS","title":"Connect your LCD display"},{"location":"Hardware_Freescale-imx6/#gpio","text":"How to control HummingBoard GPIO from kernel space?","title":"GPIO"},{"location":"Hardware_Freescale-imx6/#udoo-quad","text":"Kernel 3.14.x and 4.4.x with some hardware support, headers and some firmware included Docker ready \u2013 what is Docker ? Wireless adapter with DHCP ready but disabled (/etc/network/interfaces, WPA2: normal connect, bonding / notebook or AP mode). It can handle between 40-70Mbit/s. SATA operational Enabled analogue (VT1613) and HDMI audio device","title":"Udoo Quad"},{"location":"Hardware_Freescale-imx6/#bugs","text":"SATA & USB install not working on legacy kernel","title":"Bugs"},{"location":"Hardware_Freescale-imx6/#udoo-neo","text":"Kernel 3.14.x with some hardware support, headers and some firmware included Wireless adapter with DHCP ready but disabled","title":"Udoo Neo"},{"location":"Hardware_Marvell/","text":"Helios4 \u00b6 Overview \u00b6 All builds provide 100% hardware support for Helios4. Build Version Status \u00b6 Default \u00b6 U-Boot : 2018.11 Linux Kernel : Mainline 4.14.y OS : Debian 9 Stretch Next \u00b6 U-Boot : Mainline 2019.04 Linux Kernel : Mainline 4.19.y OS : Debian 10 Buster or Ubuntu Bionic Known Limitations \u00b6 SDcard High Speed timing have compatibility issue with some brands. Temporary workaround : Disable UHS option/support. Can be manually enable, refer to the following page . During SATA heavy load, accessing SPI NOR Flash will generate ATA errors. Temporary workaround : Disable SPI NOR flash. Can be manually enable, refer to the following page . Notes \u00b6 Find more details about hardware support and configuration on Helios4 Wiki . Clearfog Pro/Base \u00b6 Overview \u00b6 Both builds provide close to 100% hardware support, some slight differences are listed below. Build Version Status \u00b6 Default \u00b6 System images with mainline 4.14.x kernel and u-boot 2018.1 Mainline kernel with large hardware support, headers and some firmware included Docker ready Both mPCIe are operational and convertible to mSATA , M2 operational Added patch to unlock Atheros regulatory restrictions which unlock 5Ghz AP mode in cheap Atheros cards (ath9 driver) Bluetooth ready (working with supported external keys) I2C ready. Basic i2c tools included. SPI ready but untested. SFP is working at up to 1GB/s even with faster fiber modules Next \u00b6 System images with mainline 4.19.x kernel and u-boot 2018.1 Mainline kernel with large hardware support, headers and some firmware included Docker ready Both mPCIe are operational and convertible to mSATA , M2 operational Added patch to unlock Atheros regulatory restrictions which unlock 5Ghz AP mode in cheap Atheros cards (ath9 driver) Bluetooth ready (working with supported external keys) I2C ready. Basic i2c tools included. SPI ready but untested. SFP ready and tested with a copper 1G module SFP DDMI is operational ( sudo ethtool -m eth2 ) Bugs or limitation \u00b6 all builds suffer from minor problems with specific mPCIe combinations. If you run into problems check this test matrix for some known working/not working combinations. Converting mPCIe to mSATA \u00b6 To convert mPCIe to mSATA you have to enable the corresponding patches in u-boot-mvebu . Afterwards rebuild u-boot with our build system and write the new u-boot to your boot medium. If you need assistance ask in the forum. Notes \u00b6 In case you ever run into troubles and ask for help in the forums please ensure to provide a serial console log (UART adapter on board accessible through Micro USB with 115200/8/N/1 settings) The boards can boot from various sources that are adjustable with a DIP switch. Comprehensive information about the necessary preparations available here .","title":"Marvell Armada"},{"location":"Hardware_Marvell/#helios4","text":"","title":"Helios4"},{"location":"Hardware_Marvell/#overview","text":"All builds provide 100% hardware support for Helios4.","title":"Overview"},{"location":"Hardware_Marvell/#build-version-status","text":"","title":"Build Version Status"},{"location":"Hardware_Marvell/#default","text":"U-Boot : 2018.11 Linux Kernel : Mainline 4.14.y OS : Debian 9 Stretch","title":"Default"},{"location":"Hardware_Marvell/#next","text":"U-Boot : Mainline 2019.04 Linux Kernel : Mainline 4.19.y OS : Debian 10 Buster or Ubuntu Bionic","title":"Next"},{"location":"Hardware_Marvell/#known-limitations","text":"SDcard High Speed timing have compatibility issue with some brands. Temporary workaround : Disable UHS option/support. Can be manually enable, refer to the following page . During SATA heavy load, accessing SPI NOR Flash will generate ATA errors. Temporary workaround : Disable SPI NOR flash. Can be manually enable, refer to the following page .","title":"Known Limitations"},{"location":"Hardware_Marvell/#notes","text":"Find more details about hardware support and configuration on Helios4 Wiki .","title":"Notes"},{"location":"Hardware_Marvell/#clearfog-probase","text":"","title":"Clearfog Pro/Base"},{"location":"Hardware_Marvell/#overview_1","text":"Both builds provide close to 100% hardware support, some slight differences are listed below.","title":"Overview"},{"location":"Hardware_Marvell/#build-version-status_1","text":"","title":"Build Version Status"},{"location":"Hardware_Marvell/#default_1","text":"System images with mainline 4.14.x kernel and u-boot 2018.1 Mainline kernel with large hardware support, headers and some firmware included Docker ready Both mPCIe are operational and convertible to mSATA , M2 operational Added patch to unlock Atheros regulatory restrictions which unlock 5Ghz AP mode in cheap Atheros cards (ath9 driver) Bluetooth ready (working with supported external keys) I2C ready. Basic i2c tools included. SPI ready but untested. SFP is working at up to 1GB/s even with faster fiber modules","title":"Default"},{"location":"Hardware_Marvell/#next_1","text":"System images with mainline 4.19.x kernel and u-boot 2018.1 Mainline kernel with large hardware support, headers and some firmware included Docker ready Both mPCIe are operational and convertible to mSATA , M2 operational Added patch to unlock Atheros regulatory restrictions which unlock 5Ghz AP mode in cheap Atheros cards (ath9 driver) Bluetooth ready (working with supported external keys) I2C ready. Basic i2c tools included. SPI ready but untested. SFP ready and tested with a copper 1G module SFP DDMI is operational ( sudo ethtool -m eth2 )","title":"Next"},{"location":"Hardware_Marvell/#bugs-or-limitation","text":"all builds suffer from minor problems with specific mPCIe combinations. If you run into problems check this test matrix for some known working/not working combinations.","title":"Bugs or limitation"},{"location":"Hardware_Marvell/#converting-mpcie-to-msata","text":"To convert mPCIe to mSATA you have to enable the corresponding patches in u-boot-mvebu . Afterwards rebuild u-boot with our build system and write the new u-boot to your boot medium. If you need assistance ask in the forum.","title":"Converting mPCIe to mSATA"},{"location":"Hardware_Marvell/#notes_1","text":"In case you ever run into troubles and ask for help in the forums please ensure to provide a serial console log (UART adapter on board accessible through Micro USB with 115200/8/N/1 settings) The boards can boot from various sources that are adjustable with a DIP switch. Comprehensive information about the necessary preparations available here .","title":"Notes"},{"location":"Process_Armbian-Task-Tracking/","text":"Armbian Task Management \u00b6 Overview \u00b6 TLDR; Keep task discussions in the forum. GitHub Issues are just for task metadata. Tasks associated with code will have an issue created in GitHub, but all dialog regarding tasks will reside on the forum in a topic containing the github Issue ID of the task. What is a task? \u00b6 A task is something actionable that results in some sort of tangible output. ex: code, documentation, QA findings. Example sources of tasks include: feature requests, bugs, QA, general following of development roadmap. Not all support issues are tasks, but a support issue can generate a task. Task Creation Procedure \u00b6 Create issue in Armbian GitHub Repo under appropriate milestone Copy the numeric ID of issue created Create new topic under the Tasks subforum on the Armbian Forums Use the the naming convention of [ISSUE_ID] - Issue Name Copy the URL of task subforum topic just created Create comment on GitHub Issue with the following Content: Please keep all discussion for this issue on the forum topic available below: [URL](URL) Lock comments on GitHub Issue Task tracking with GitHub Issues \u00b6 GitHub Issues provide an easy method to track and filter tasks by using tags and milestones. Issues also make it easy to easily associate commits and merge requests with a task. Effectively we just use GitHub issues for the metadata for reporting. Labels \u00b6 Use labels identify the purpose of a task. bug is used to tag tasks that address Armbian-level bugs not-our-bug is used to identify tasks that are bugs in upstream code. They are not Armbian bugs, but may impact Armbian. enhancement is used to identify tasks that are new features for Armbian. Milestones \u00b6 Use milestones to divide tasks into claimed and unclaimed work. claimed tasks milestone contains tasks which have been assigned. unclaimed tasks milestone contains tasks that need an owner. Forum Tasks \u00b6 Converting a topic to a task \u00b6 Sometimes support discussions can become tasks. A forum admin can assist in moving the topic to Tasks forum group. A cooresponding issue will need to be created. Future Process Improvements \u00b6 Enhancements desired for this process (This should be a task!) Issue Hook \u00b6 Ideally we can have a forum topic created upon issue creation. This will save some time.","title":"Armbian Task Management #"},{"location":"Process_Armbian-Task-Tracking/#armbian-task-management","text":"","title":"Armbian Task Management"},{"location":"Process_Armbian-Task-Tracking/#overview","text":"TLDR; Keep task discussions in the forum. GitHub Issues are just for task metadata. Tasks associated with code will have an issue created in GitHub, but all dialog regarding tasks will reside on the forum in a topic containing the github Issue ID of the task.","title":"Overview"},{"location":"Process_Armbian-Task-Tracking/#what-is-a-task","text":"A task is something actionable that results in some sort of tangible output. ex: code, documentation, QA findings. Example sources of tasks include: feature requests, bugs, QA, general following of development roadmap. Not all support issues are tasks, but a support issue can generate a task.","title":"What is a task?"},{"location":"Process_Armbian-Task-Tracking/#task-creation-procedure","text":"Create issue in Armbian GitHub Repo under appropriate milestone Copy the numeric ID of issue created Create new topic under the Tasks subforum on the Armbian Forums Use the the naming convention of [ISSUE_ID] - Issue Name Copy the URL of task subforum topic just created Create comment on GitHub Issue with the following Content: Please keep all discussion for this issue on the forum topic available below: [URL](URL) Lock comments on GitHub Issue","title":"Task Creation Procedure"},{"location":"Process_Armbian-Task-Tracking/#task-tracking-with-github-issues","text":"GitHub Issues provide an easy method to track and filter tasks by using tags and milestones. Issues also make it easy to easily associate commits and merge requests with a task. Effectively we just use GitHub issues for the metadata for reporting.","title":"Task tracking with GitHub Issues"},{"location":"Process_Armbian-Task-Tracking/#labels","text":"Use labels identify the purpose of a task. bug is used to tag tasks that address Armbian-level bugs not-our-bug is used to identify tasks that are bugs in upstream code. They are not Armbian bugs, but may impact Armbian. enhancement is used to identify tasks that are new features for Armbian.","title":"Labels"},{"location":"Process_Armbian-Task-Tracking/#milestones","text":"Use milestones to divide tasks into claimed and unclaimed work. claimed tasks milestone contains tasks which have been assigned. unclaimed tasks milestone contains tasks that need an owner.","title":"Milestones"},{"location":"Process_Armbian-Task-Tracking/#forum-tasks","text":"","title":"Forum Tasks"},{"location":"Process_Armbian-Task-Tracking/#converting-a-topic-to-a-task","text":"Sometimes support discussions can become tasks. A forum admin can assist in moving the topic to Tasks forum group. A cooresponding issue will need to be created.","title":"Converting a topic to a task"},{"location":"Process_Armbian-Task-Tracking/#future-process-improvements","text":"Enhancements desired for this process (This should be a task!)","title":"Future Process Improvements"},{"location":"Process_Armbian-Task-Tracking/#issue-hook","text":"Ideally we can have a forum topic created upon issue creation. This will save some time.","title":"Issue Hook"},{"location":"Process_Contribute/","text":"Collaborate on the project \u00b6 How? \u00b6 Fork the project Make one or more well commented and clean commits to the repository. Perform a pull request in github\u2019s web interface. If it is a new feature request, don\u2019t start the coding first. Remember to open an issue to discuss the new feature. If you are struggling, check WEB or CLI step by step guide on contributing. Where are sources? \u00b6 Build script: https://github.com/armbian/build Documentation: https://github.com/armbian/documentation Armbian-config tool: https://github.com/armbian/config Help with donations \u00b6 If you find our project useful, then we\u2019d really appreciate it if you\u2019d consider contributing to the project however you can. Donating is the easiest way to help us \u2013 you can use PayPal and Bitcoin or you can buy us something from our Amazon.de wish list. http://www.armbian.com/donate/ Thanks!","title":"Contribute"},{"location":"Process_Contribute/#collaborate-on-the-project","text":"","title":"Collaborate on the project"},{"location":"Process_Contribute/#how","text":"Fork the project Make one or more well commented and clean commits to the repository. Perform a pull request in github\u2019s web interface. If it is a new feature request, don\u2019t start the coding first. Remember to open an issue to discuss the new feature. If you are struggling, check WEB or CLI step by step guide on contributing.","title":"How?"},{"location":"Process_Contribute/#where-are-sources","text":"Build script: https://github.com/armbian/build Documentation: https://github.com/armbian/documentation Armbian-config tool: https://github.com/armbian/config","title":"Where are sources?"},{"location":"Process_Contribute/#help-with-donations","text":"If you find our project useful, then we\u2019d really appreciate it if you\u2019d consider contributing to the project however you can. Donating is the easiest way to help us \u2013 you can use PayPal and Bitcoin or you can buy us something from our Amazon.de wish list. http://www.armbian.com/donate/ Thanks!","title":"Help with donations"},{"location":"Process_Documentation/","text":"Armbian Documentation \u00b6 Overview \u00b6 Documentation is written in markdown and stored in the docs/ subfolder. Images go in docs/images This repo is meant for storing and quick glances. Official output is http://docs.armbian.com . Armbian Documentation is available in the following formats: mkdocs site http://docs.armbian.com . PDF user guides (in progress) Armbian Documentation relies on a file naming convention: Parent-Topic-Name_Child-Topic-Name.md Parent-Topic-Name and Child-Topic-Name are separated by an underscore _ . Hyphens - are automatically converted to spaces. Please try to avoid creating new parent topics unless absolutely necessary. Current Parent Topics: Hardware Process Release Developer Guide User Guide Howto .gitignore \u00b6 For easier testing and commits .gitignore is configured to ignore site/ mkdocs.yml should probably be added, but we can commit for now Required Packages \u00b6 The documentation build process will require the following packages: git python-jinja2 mkdocs Install these on the development host using: sudo apt-get install -y -qq git python-jinja2 mkdocs Tools \u00b6 mkArmbianDocs.py \u00b6 generates mkdocs.yml file based on contents of docs/ command-line options for input and output directories requires the python-jinja2 module which may not be installed by default not needed unless making changes to the structure of the documentation see mkArmbianDocs.py -h for help missing tools \u00b6 The following capabilities are not yet available. html2doc output to PDF user manual automated mkdocs deployment to http://docs.armbian.com generating \u00b6 From the parent folder of the repo, run: tools/mkArmbianDocs.py && mkdocs build This will generate the mkdocs.yml configuration file and then generate the mkdocs site to the site/ folder. testing \u00b6 To preview locally, execute the preview server mkdocs serve . You will be able to make edits to existing files and observe the results in real time. After changing text in an existing file, use this command to rebuild and view the documentation: mkdocs build --clean && mkdocs serve After adding a new file, either hand-edit mkdocs.yml , or rerun tools/mkArmbianDocs.py . Quick Start \u00b6 pip install mkdocs git clone https://github.com/armbian/documentation #vim docs/[Parent Topic Example]-child-topic-example.md #generate config, build, launch local preview server tools/mkArmbianDocs.py && mkdocs build --clean && mkdocs serve git add docs/*.md git commit -m \"added new howto on exampling\" git push","title":"Documentation"},{"location":"Process_Documentation/#armbian-documentation","text":"","title":"Armbian Documentation"},{"location":"Process_Documentation/#overview","text":"Documentation is written in markdown and stored in the docs/ subfolder. Images go in docs/images This repo is meant for storing and quick glances. Official output is http://docs.armbian.com . Armbian Documentation is available in the following formats: mkdocs site http://docs.armbian.com . PDF user guides (in progress) Armbian Documentation relies on a file naming convention: Parent-Topic-Name_Child-Topic-Name.md Parent-Topic-Name and Child-Topic-Name are separated by an underscore _ . Hyphens - are automatically converted to spaces. Please try to avoid creating new parent topics unless absolutely necessary. Current Parent Topics: Hardware Process Release Developer Guide User Guide Howto","title":"Overview"},{"location":"Process_Documentation/#gitignore","text":"For easier testing and commits .gitignore is configured to ignore site/ mkdocs.yml should probably be added, but we can commit for now","title":".gitignore"},{"location":"Process_Documentation/#required-packages","text":"The documentation build process will require the following packages: git python-jinja2 mkdocs Install these on the development host using: sudo apt-get install -y -qq git python-jinja2 mkdocs","title":"Required Packages"},{"location":"Process_Documentation/#tools","text":"","title":"Tools"},{"location":"Process_Documentation/#mkarmbiandocspy","text":"generates mkdocs.yml file based on contents of docs/ command-line options for input and output directories requires the python-jinja2 module which may not be installed by default not needed unless making changes to the structure of the documentation see mkArmbianDocs.py -h for help","title":"mkArmbianDocs.py"},{"location":"Process_Documentation/#missing-tools","text":"The following capabilities are not yet available. html2doc output to PDF user manual automated mkdocs deployment to http://docs.armbian.com","title":"missing tools"},{"location":"Process_Documentation/#generating","text":"From the parent folder of the repo, run: tools/mkArmbianDocs.py && mkdocs build This will generate the mkdocs.yml configuration file and then generate the mkdocs site to the site/ folder.","title":"generating"},{"location":"Process_Documentation/#testing","text":"To preview locally, execute the preview server mkdocs serve . You will be able to make edits to existing files and observe the results in real time. After changing text in an existing file, use this command to rebuild and view the documentation: mkdocs build --clean && mkdocs serve After adding a new file, either hand-edit mkdocs.yml , or rerun tools/mkArmbianDocs.py .","title":"testing"},{"location":"Process_Documentation/#quick-start","text":"pip install mkdocs git clone https://github.com/armbian/documentation #vim docs/[Parent Topic Example]-child-topic-example.md #generate config, build, launch local preview server tools/mkArmbianDocs.py && mkdocs build --clean && mkdocs serve git add docs/*.md git commit -m \"added new howto on exampling\" git push","title":"Quick Start"},{"location":"Process_Merge-Policy/","text":"Merge Policy \u00b6 Overview \u00b6 Note: This document is a Work In Progress and is subject to change. Definitions may be relocated to a seperate document in the future. This policy is targeted for Maintainers for Lead Maintainers who have commit access to master branch. This document describes the tags needed for different mege types. See Definitions. The types of code maintained fall into the following categories: Kernel U-Boot Build Scripts Kernel and U-Boot maintainers are usually grouped by SoC Architecture. Supported boards will have the most scrunity with code review. U-Boot Patches \u00b6 Standard Contributors provide tested-by submitter ( armbianmonitor -u with a fresh build) SoC maintainer maybe submit a PR with only a reviewed by of the lead SoC maintainer Kernel Related Patches \u00b6 default and next branches \u00b6 DT changes reviewed by at least one person familiar with this SoC (lead maintainer or deputy), tested-by the contributor who sends it (armbianmonitor).. trivial module activation doesn\u2019t matter dev branches \u00b6 Constraints are at the discretion of the SoC mantainer. This builds are not expected to be stable. Armbian Build Scripts \u00b6 This pertains to code used to build system images, OS configuration, and supporting packages. (Basically Anything not U-Boot or Kernel source) lib scripts \u00b6 Requires at least one Reviewed-by configuration \u00b6 board promotion \u00b6 Boards have different levels of commitment / support. EOL, CSC, WIP, Supported. To promote a board from WIP to Supported an Acked-by from a Lead Maintainer is required. kernel config \u00b6 Changes in default & next kernel config should provide at least tested-by with armbianmonitor -u Changes in dev are at the discretion of maintainer. No constraints kernel sources \u00b6 Change kernel source repos, branches, versions can be very disruptive to stable builds. Sufficient communication should occur stable changes. u-boot and kernel version bump for default and next requires tested-by from Maintainers and/or testers on at least two different boards for the impacted platform. kernelsources switch (next default) needs a discussion on forum or github documented in PR and Acked-by Lead Maintainer. These changes are risky and things can go terrible wrong here\u2026 dev source changes are at the discretion of the Lead Maintainer Boardfamily tweaks require at least reviewed-by packages \u00b6 minimum require Acked-by Definitions \u00b6 Code Review Terms \u00b6 click here for attribution to terms used below Signed-off-by \u00b6 Certifies that you wrote it or otherwise have the right to pass it on as a open-source patch. Acked-by \u00b6 If a person was not directly involved in the preparation or handling of a patch but wishes to signify and record their approval of it then they can arrange to have an Acked-by: line. Acked-by: does not necessarily indicate acknowledgement of the entire patch. Tested-by \u00b6 A Tested-by: tag indicates that the patch has been successfully tested (in some environment) by the person named. This tag informs maintainers that some testing has been performed, provides a means to locate testers for future patches, and ensures credit for the testers. Reviewed-by \u00b6 A Reviewed-by tag is a statement of opinion that the patch is an appropriate modification of the kernel without any remaining serious technical issues. Any interested reviewer (who has done the work) can offer a Reviewed-by tag for a patch. Other \u00b6 Maintainer \u00b6 An Individual designated to moderate, support and make decisions for a codebase or component. There can be multiple maintainers assigned to any given thing. Lead Maintainer \u00b6 A more experienced maintainer that will decide on high-impact and stategic changes and have final say in disputes. A lead maintainer may share or designiate responsibility to some or all components within their domain of responsibility. SoC \u00b6 System on-a-Chip.","title":"Merge Policy"},{"location":"Process_Merge-Policy/#merge-policy","text":"","title":"Merge Policy"},{"location":"Process_Merge-Policy/#overview","text":"Note: This document is a Work In Progress and is subject to change. Definitions may be relocated to a seperate document in the future. This policy is targeted for Maintainers for Lead Maintainers who have commit access to master branch. This document describes the tags needed for different mege types. See Definitions. The types of code maintained fall into the following categories: Kernel U-Boot Build Scripts Kernel and U-Boot maintainers are usually grouped by SoC Architecture. Supported boards will have the most scrunity with code review.","title":"Overview"},{"location":"Process_Merge-Policy/#u-boot-patches","text":"Standard Contributors provide tested-by submitter ( armbianmonitor -u with a fresh build) SoC maintainer maybe submit a PR with only a reviewed by of the lead SoC maintainer","title":"U-Boot Patches"},{"location":"Process_Merge-Policy/#kernel-related-patches","text":"","title":"Kernel Related Patches"},{"location":"Process_Merge-Policy/#default-and-next-branches","text":"DT changes reviewed by at least one person familiar with this SoC (lead maintainer or deputy), tested-by the contributor who sends it (armbianmonitor).. trivial module activation doesn\u2019t matter","title":"default and next branches"},{"location":"Process_Merge-Policy/#dev-branches","text":"Constraints are at the discretion of the SoC mantainer. This builds are not expected to be stable.","title":"dev branches"},{"location":"Process_Merge-Policy/#armbian-build-scripts","text":"This pertains to code used to build system images, OS configuration, and supporting packages. (Basically Anything not U-Boot or Kernel source)","title":"Armbian Build Scripts"},{"location":"Process_Merge-Policy/#lib-scripts","text":"Requires at least one Reviewed-by","title":"lib scripts"},{"location":"Process_Merge-Policy/#configuration","text":"","title":"configuration"},{"location":"Process_Merge-Policy/#board-promotion","text":"Boards have different levels of commitment / support. EOL, CSC, WIP, Supported. To promote a board from WIP to Supported an Acked-by from a Lead Maintainer is required.","title":"board promotion"},{"location":"Process_Merge-Policy/#kernel-config","text":"Changes in default & next kernel config should provide at least tested-by with armbianmonitor -u Changes in dev are at the discretion of maintainer. No constraints","title":"kernel config"},{"location":"Process_Merge-Policy/#kernel-sources","text":"Change kernel source repos, branches, versions can be very disruptive to stable builds. Sufficient communication should occur stable changes. u-boot and kernel version bump for default and next requires tested-by from Maintainers and/or testers on at least two different boards for the impacted platform. kernelsources switch (next default) needs a discussion on forum or github documented in PR and Acked-by Lead Maintainer. These changes are risky and things can go terrible wrong here\u2026 dev source changes are at the discretion of the Lead Maintainer Boardfamily tweaks require at least reviewed-by","title":"kernel sources"},{"location":"Process_Merge-Policy/#packages","text":"minimum require Acked-by","title":"packages"},{"location":"Process_Merge-Policy/#definitions","text":"","title":"Definitions"},{"location":"Process_Merge-Policy/#code-review-terms","text":"click here for attribution to terms used below","title":"Code Review Terms"},{"location":"Process_Merge-Policy/#signed-off-by","text":"Certifies that you wrote it or otherwise have the right to pass it on as a open-source patch.","title":"Signed-off-by"},{"location":"Process_Merge-Policy/#acked-by","text":"If a person was not directly involved in the preparation or handling of a patch but wishes to signify and record their approval of it then they can arrange to have an Acked-by: line. Acked-by: does not necessarily indicate acknowledgement of the entire patch.","title":"Acked-by"},{"location":"Process_Merge-Policy/#tested-by","text":"A Tested-by: tag indicates that the patch has been successfully tested (in some environment) by the person named. This tag informs maintainers that some testing has been performed, provides a means to locate testers for future patches, and ensures credit for the testers.","title":"Tested-by"},{"location":"Process_Merge-Policy/#reviewed-by","text":"A Reviewed-by tag is a statement of opinion that the patch is an appropriate modification of the kernel without any remaining serious technical issues. Any interested reviewer (who has done the work) can offer a Reviewed-by tag for a patch.","title":"Reviewed-by"},{"location":"Process_Merge-Policy/#other","text":"","title":"Other"},{"location":"Process_Merge-Policy/#maintainer","text":"An Individual designated to moderate, support and make decisions for a codebase or component. There can be multiple maintainers assigned to any given thing.","title":"Maintainer"},{"location":"Process_Merge-Policy/#lead-maintainer","text":"A more experienced maintainer that will decide on high-impact and stategic changes and have final say in disputes. A lead maintainer may share or designiate responsibility to some or all components within their domain of responsibility.","title":"Lead Maintainer"},{"location":"Process_Merge-Policy/#soc","text":"System on-a-Chip.","title":"SoC"},{"location":"Process_Release-Model/","text":"Release model \u00b6 Release Dates Armbian runs \u201ctrain\u201d based releases. Whatever is ready to board the train, does so. Whatever isn\u2019t ready, has to wait for the next train. This enables us to have a predictable release cycles making it easy to plan. It also puts the responsibility on developers to make sure they have features ready on time. Armbian releases quarterly at the end of February, May, August, November . Offset is because we all know that nothing happens for half of December. At the beginning of a release cycle, we have a planning meeting and two weeks before the end of the release we freeze integration of new features . Release Cycle Releases last 3 months. Each release starts with a planning meeting. After planning, developers and development teams build their deliverable using whatever methods (scrum, kanban, waterfall, \u2026 ) they want but shall commit their code frequently, leading up to the last 2 weeks . The project does not accept \u201cdumps\u201d of code at the end. Commit early and often on master. Two weeks before the release date, we halt feature integration and only allow bug fixes. At some point during those two weeks, we start the release candidate process. This process starts by pulling a branch off master that will become the release branch. That frees up master for development on the next release. On the release candidate branch we work on bug fixes, and choose \u201crelease candidate\u201d, RC, tags. The software at that tag is a candidate for release, and it is submitted to automated and manual tests on real hardware. If automated tests are passing, we can officially tag it as the release. If it doesn\u2019t, we enter another bug fix cycle and create a new release candidate. We iterate until we have a candidate that can be the formal release. Usually, this takes 2-3 cycles and 1-3 weeks of time. Development epics, stories and bugs for each release are tracked through Jira . Release Branching, Versioning and Tags \u00b6 Branches in Armbian follow this convention: Master branch (master): Main development will happen on the master branch. This is the latest and greatest branch, but is always \u201cstable\u201d and \u201cdeployable\u201d. All tests always pass on this branch. Maintenance branch (support): This is the long-term maintenance branch per release. Development branch (dev) : This is a branch created for lengthy and/or involved feature development that could destabilize master. Each Armbian release will have the following version format: Format: <major>.<minor>.<revision> <major> and <minor> version will be incremented at the end of the release cycles while <revision> is incremented for a fix (or set of fixes) Tags are used in ad-hoc manner. Release Naming \u00b6 version codename release month work 19.11 Vaquita November done 20.02 Chiru February done 20.05 Kagu May done 20.08 Caple August planned 20.11 Tamandua November by http://www.codenamegenerator.com/ Release Planning \u00b6 A release planning starts with an public IRC meeting where developers and interested users come together in first Saturday, one month before the release month . Dates for 2020 : April 4th July 4th October 3rd Agenda: check meeting attendees (if nick is not self explanatory, add your forum/github handle. Just say hi or something) choose upcoming release officer (so far it was me and Lane) present tasks, bugs or project you are working on (open discussion if there will not be much people, otherwise meeting officer call people out). Jira should be open in not already. cycle Jira backlog: discuss task / bug (one at a time) assign to person / release / tag re-prioritise cycle open issues and PR on build engine board status update on download pages and build engine (wip, supported, eol) change (build) branch protection rule to \u201cRequire pull request reviews before merging\u201d decide upon best meetings hours misc / open discussion Tips: when you got a voice, be concise (1-2 min) and make it clear when you stop. (\u201cNo more, I\u2019m done\u201d) channel is recorded so a summary and adjustments to Jira can made afterwards, ideally along with the meeting Meeting location is IRC channel #armbian on freenode . Meeting starts at 2pm GMT . Release Coordinating \u00b6 Summary \u00b6 A release starts as a RC Branch cut from master at freeze time. Once a RC Branch is cut, master can be unfrozen and development can continue. RC Branches accept bug fixes. The bug fixes should be cherry-picked back to master branch. Once the RC Is stable. A Final release is made. A release is never merged to master. Once a release is complete, it only should be updated for severe bugs and severe security vulnerabilities. A release is only maintained until the next release. 1. Forum Communication \u00b6 Create a new thread in the Armbian Build Framework Subforum Ex topic name: Ambian 20.02 (Chiru) Release Thread Tag the post with relase, release version, and codename Use the following template to begin the body of the release thread: Release Candidate Code Freeze Date: YYYY-MM-DD Release Date: YYYY-MM-DD Release Candidate Branch Link: URL Release Changelog: URL Release Coordinator: @yourname Testing Tracking Sheet: https://example.com/link (google sheets) The goal of this thread is to discuss testing, bugfixes, and the overall quality of the release. Once the release is complete, this thread should be locked and unpinned. Before Code Freeze \u2013 Make note in the thread the incomplete jira issues tagged for the release example After test images are procuded, engage in community for assistants wih testing.. forums, twitter, etc. share this tool 2. Release Candidate Branch Management \u00b6 For code freeze \u2013 create a RC branch in the format (vYY.MM-rcX) ex: v20.02-rc1 If Possible, create Jira tickets for major changes in github that were not tracked in Jira Begin Testing Process. See Release Testing Do not modify branch directy. Only accept PRs Only accept PRs for Bugfixes. No features Update master branch version to the NEXT release version with -trunk ex. If RC is v20.02.0-rc1 Master bacomes v20.05.0-trunk FIXME ? Coordinate with Igor or other Admins generate test build from branch ? Repeat build, test, and bugfix process until release is stable Cherry-pick bugfixes back into master Create Final Release branch from RC 3. Release \u00b6 In Github create a Release from final release branch Copy Release notes generated by Jira Release into Github form Add other appropriate information into release github release notes Point Armbian build system to new release Update armbian documentation to reflect current release Celebrate Release Testing \u00b6 See Opportunties for improvement Reflection on Prior Releases \u00b6 Opportunities for Improvement \u00b6 wireless driver testing \u00b6 wireless is a particularly sensitive issue. We need to test, fix, or at least be able to inform others of what is broken Bug Tracking \u00b6 Testing \u00b6 Image Downloads \u00b6 Positive Observations \u00b6 Good response from community for testing assistance Release was on time \u00b6","title":"Model"},{"location":"Process_Release-Model/#release-model","text":"Release Dates Armbian runs \u201ctrain\u201d based releases. Whatever is ready to board the train, does so. Whatever isn\u2019t ready, has to wait for the next train. This enables us to have a predictable release cycles making it easy to plan. It also puts the responsibility on developers to make sure they have features ready on time. Armbian releases quarterly at the end of February, May, August, November . Offset is because we all know that nothing happens for half of December. At the beginning of a release cycle, we have a planning meeting and two weeks before the end of the release we freeze integration of new features . Release Cycle Releases last 3 months. Each release starts with a planning meeting. After planning, developers and development teams build their deliverable using whatever methods (scrum, kanban, waterfall, \u2026 ) they want but shall commit their code frequently, leading up to the last 2 weeks . The project does not accept \u201cdumps\u201d of code at the end. Commit early and often on master. Two weeks before the release date, we halt feature integration and only allow bug fixes. At some point during those two weeks, we start the release candidate process. This process starts by pulling a branch off master that will become the release branch. That frees up master for development on the next release. On the release candidate branch we work on bug fixes, and choose \u201crelease candidate\u201d, RC, tags. The software at that tag is a candidate for release, and it is submitted to automated and manual tests on real hardware. If automated tests are passing, we can officially tag it as the release. If it doesn\u2019t, we enter another bug fix cycle and create a new release candidate. We iterate until we have a candidate that can be the formal release. Usually, this takes 2-3 cycles and 1-3 weeks of time. Development epics, stories and bugs for each release are tracked through Jira .","title":"Release model"},{"location":"Process_Release-Model/#release-branching-versioning-and-tags","text":"Branches in Armbian follow this convention: Master branch (master): Main development will happen on the master branch. This is the latest and greatest branch, but is always \u201cstable\u201d and \u201cdeployable\u201d. All tests always pass on this branch. Maintenance branch (support): This is the long-term maintenance branch per release. Development branch (dev) : This is a branch created for lengthy and/or involved feature development that could destabilize master. Each Armbian release will have the following version format: Format: <major>.<minor>.<revision> <major> and <minor> version will be incremented at the end of the release cycles while <revision> is incremented for a fix (or set of fixes) Tags are used in ad-hoc manner.","title":"Release Branching, Versioning and Tags"},{"location":"Process_Release-Model/#release-naming","text":"version codename release month work 19.11 Vaquita November done 20.02 Chiru February done 20.05 Kagu May done 20.08 Caple August planned 20.11 Tamandua November by http://www.codenamegenerator.com/","title":"Release Naming"},{"location":"Process_Release-Model/#release-planning","text":"A release planning starts with an public IRC meeting where developers and interested users come together in first Saturday, one month before the release month . Dates for 2020 : April 4th July 4th October 3rd Agenda: check meeting attendees (if nick is not self explanatory, add your forum/github handle. Just say hi or something) choose upcoming release officer (so far it was me and Lane) present tasks, bugs or project you are working on (open discussion if there will not be much people, otherwise meeting officer call people out). Jira should be open in not already. cycle Jira backlog: discuss task / bug (one at a time) assign to person / release / tag re-prioritise cycle open issues and PR on build engine board status update on download pages and build engine (wip, supported, eol) change (build) branch protection rule to \u201cRequire pull request reviews before merging\u201d decide upon best meetings hours misc / open discussion Tips: when you got a voice, be concise (1-2 min) and make it clear when you stop. (\u201cNo more, I\u2019m done\u201d) channel is recorded so a summary and adjustments to Jira can made afterwards, ideally along with the meeting Meeting location is IRC channel #armbian on freenode . Meeting starts at 2pm GMT .","title":"Release Planning"},{"location":"Process_Release-Model/#release-coordinating","text":"","title":"Release Coordinating"},{"location":"Process_Release-Model/#summary","text":"A release starts as a RC Branch cut from master at freeze time. Once a RC Branch is cut, master can be unfrozen and development can continue. RC Branches accept bug fixes. The bug fixes should be cherry-picked back to master branch. Once the RC Is stable. A Final release is made. A release is never merged to master. Once a release is complete, it only should be updated for severe bugs and severe security vulnerabilities. A release is only maintained until the next release.","title":"Summary"},{"location":"Process_Release-Model/#1-forum-communication","text":"Create a new thread in the Armbian Build Framework Subforum Ex topic name: Ambian 20.02 (Chiru) Release Thread Tag the post with relase, release version, and codename Use the following template to begin the body of the release thread: Release Candidate Code Freeze Date: YYYY-MM-DD Release Date: YYYY-MM-DD Release Candidate Branch Link: URL Release Changelog: URL Release Coordinator: @yourname Testing Tracking Sheet: https://example.com/link (google sheets) The goal of this thread is to discuss testing, bugfixes, and the overall quality of the release. Once the release is complete, this thread should be locked and unpinned. Before Code Freeze \u2013 Make note in the thread the incomplete jira issues tagged for the release example After test images are procuded, engage in community for assistants wih testing.. forums, twitter, etc. share this tool","title":"1. Forum Communication"},{"location":"Process_Release-Model/#2-release-candidate-branch-management","text":"For code freeze \u2013 create a RC branch in the format (vYY.MM-rcX) ex: v20.02-rc1 If Possible, create Jira tickets for major changes in github that were not tracked in Jira Begin Testing Process. See Release Testing Do not modify branch directy. Only accept PRs Only accept PRs for Bugfixes. No features Update master branch version to the NEXT release version with -trunk ex. If RC is v20.02.0-rc1 Master bacomes v20.05.0-trunk FIXME ? Coordinate with Igor or other Admins generate test build from branch ? Repeat build, test, and bugfix process until release is stable Cherry-pick bugfixes back into master Create Final Release branch from RC","title":"2. Release Candidate Branch Management"},{"location":"Process_Release-Model/#3-release","text":"In Github create a Release from final release branch Copy Release notes generated by Jira Release into Github form Add other appropriate information into release github release notes Point Armbian build system to new release Update armbian documentation to reflect current release Celebrate","title":"3. Release"},{"location":"Process_Release-Model/#release-testing","text":"See Opportunties for improvement","title":"Release Testing"},{"location":"Process_Release-Model/#reflection-on-prior-releases","text":"","title":"Reflection on Prior Releases"},{"location":"Process_Release-Model/#opportunities-for-improvement","text":"","title":"Opportunities for Improvement"},{"location":"Process_Release-Model/#wireless-driver-testing","text":"wireless is a particularly sensitive issue. We need to test, fix, or at least be able to inform others of what is broken","title":"wireless driver testing"},{"location":"Process_Release-Model/#bug-tracking","text":"","title":"Bug Tracking"},{"location":"Process_Release-Model/#testing","text":"","title":"Testing"},{"location":"Process_Release-Model/#image-downloads","text":"","title":"Image Downloads"},{"location":"Process_Release-Model/#positive-observations","text":"Good response from community for testing assistance Release was on time","title":"Positive Observations"},{"location":"Process_Release-Model/#_1","text":"","title":""},{"location":"Quick_facts/","text":"What is Armbian Linux? \u00b6 Armbian Linux provides optimized Debian and Ubuntu Linux images for ARM-based SBCs. There is an incredible ecosystem of small computing platforms that are powerful alternatives to the Raspberry Pi. Armbian\u2019s mission is to provide a uniform system offering that is trustworthy to run on any of the dozens of OS-neglected ARM single board computers. Challenges \u00b6 Armbian is the opposite of Raspbian \u00b6 Raspbian has dozens of contributors to focus on a single SBC platform. Armbian has a dozen contributors to focus on 100+ SBCs spread over 30 platforms. Balancing Development and Support \u00b6 Given the point above, resources are thin. Armbian developers have to focus on the core mission of maintaining the Armbian Build Platform . We heavily rely on other members of the community to support each other. Although Armbian does provide a lot of user friendly features , the reality is that Armbian is for more advanced users. If you are really struggling with your SBC, you may want to consider first getting more comfortable with Raspbian Linux on the Raspberry Pi. More SBCs continuously coming to market \u00b6 SBC and TV Box manufacturers love to design and ship new products. Unfortunately they do not like to spend time on software and instead rely on community projects such as Armbian to fill in the gaps. Benefits \u00b6 Simple \u00b6 BASH shell, standard Debian/Ubuntu utilities. Common and specific features can be with minimalistic menu-driven utility. Login is possible via serial, HDMI/VGA or SSH. Light \u00b6 No bloatware or spyware. Special utilities are completely optional. Suitable for newcomers and professionals. Optimized \u00b6 A distributed image is compacted to real data size and starts at around of 1G. Size is optimized for SD card usage. Bigger is better. Installing applications later severely reduces the life of your SD card. They were not designed for this type of usage. Fast \u00b6 Boards are optimized on kernel and userspace level. DVFS optimization, memory log caching, browser profile memory caching, swap usage tuning, garbage commit delay. Our system runs almost read-only and is one of the the fastest Linux for many development boards in just about every case. Secure \u00b6 Security level is on a stock Debian/Ubuntu level and can be hardened with the configuration utility. It provides a good starting point for industrial or home usage. The system is regularly inspected by professionals within the community. Each official stable build is thoroughly tested. Images are a direct base for all 3rd party builders. Supported \u00b6 Providing long term updates, security fixes, documentation, user support. Smart \u00b6 Deep understanding how boards work, how operating system work and how hardware should be designed to run better. Involved in board design. Experience in Linux since early 90\u2019. Specialized in ARM development boards since 2013. Open \u00b6 Open source build script and kernel development, maintenance and distribution for more than 30 different ARM and ARM64 Linux kernels . Powerful build and software development tools. Can run in fully parallel mode. Can run under Docker.","title":"Quick facts"},{"location":"Quick_facts/#what-is-armbian-linux","text":"Armbian Linux provides optimized Debian and Ubuntu Linux images for ARM-based SBCs. There is an incredible ecosystem of small computing platforms that are powerful alternatives to the Raspberry Pi. Armbian\u2019s mission is to provide a uniform system offering that is trustworthy to run on any of the dozens of OS-neglected ARM single board computers.","title":"What is Armbian Linux?"},{"location":"Quick_facts/#challenges","text":"","title":"Challenges"},{"location":"Quick_facts/#armbian-is-the-opposite-of-raspbian","text":"Raspbian has dozens of contributors to focus on a single SBC platform. Armbian has a dozen contributors to focus on 100+ SBCs spread over 30 platforms.","title":"Armbian is the opposite of Raspbian"},{"location":"Quick_facts/#balancing-development-and-support","text":"Given the point above, resources are thin. Armbian developers have to focus on the core mission of maintaining the Armbian Build Platform . We heavily rely on other members of the community to support each other. Although Armbian does provide a lot of user friendly features , the reality is that Armbian is for more advanced users. If you are really struggling with your SBC, you may want to consider first getting more comfortable with Raspbian Linux on the Raspberry Pi.","title":"Balancing Development and Support"},{"location":"Quick_facts/#more-sbcs-continuously-coming-to-market","text":"SBC and TV Box manufacturers love to design and ship new products. Unfortunately they do not like to spend time on software and instead rely on community projects such as Armbian to fill in the gaps.","title":"More SBCs continuously coming to market"},{"location":"Quick_facts/#benefits","text":"","title":"Benefits"},{"location":"Quick_facts/#simple","text":"BASH shell, standard Debian/Ubuntu utilities. Common and specific features can be with minimalistic menu-driven utility. Login is possible via serial, HDMI/VGA or SSH.","title":"Simple"},{"location":"Quick_facts/#light","text":"No bloatware or spyware. Special utilities are completely optional. Suitable for newcomers and professionals.","title":"Light"},{"location":"Quick_facts/#optimized","text":"A distributed image is compacted to real data size and starts at around of 1G. Size is optimized for SD card usage. Bigger is better. Installing applications later severely reduces the life of your SD card. They were not designed for this type of usage.","title":"Optimized"},{"location":"Quick_facts/#fast","text":"Boards are optimized on kernel and userspace level. DVFS optimization, memory log caching, browser profile memory caching, swap usage tuning, garbage commit delay. Our system runs almost read-only and is one of the the fastest Linux for many development boards in just about every case.","title":"Fast"},{"location":"Quick_facts/#secure","text":"Security level is on a stock Debian/Ubuntu level and can be hardened with the configuration utility. It provides a good starting point for industrial or home usage. The system is regularly inspected by professionals within the community. Each official stable build is thoroughly tested. Images are a direct base for all 3rd party builders.","title":"Secure"},{"location":"Quick_facts/#supported","text":"Providing long term updates, security fixes, documentation, user support.","title":"Supported"},{"location":"Quick_facts/#smart","text":"Deep understanding how boards work, how operating system work and how hardware should be designed to run better. Involved in board design. Experience in Linux since early 90\u2019. Specialized in ARM development boards since 2013.","title":"Smart"},{"location":"Quick_facts/#open","text":"Open source build script and kernel development, maintenance and distribution for more than 30 different ARM and ARM64 Linux kernels . Powerful build and software development tools. Can run in fully parallel mode. Can run under Docker.","title":"Open"},{"location":"Release_Changelog/","text":"20.05.6 / 19.06.2020 [ AR-324 ] - Add Rockchip RK322X SoC support 20.05.4 / 16.06.2020 [ AR-311 ] - Initrd on Focal can get corrupted followup fix 20.05.3 / 10.06.2020 [ AR-300 ] - Enable HDMI audio for OrangePi 4 [ AR-305 ] - K-worker creates load on Allwinner devices [ AR-282 ] - Rockpi 4B 1Gb doesn't boot modern kernel / u-boot 20.05.2 / 05.06.2020 [ AR-294 ] - Initrd on Focal can get corrupted 20.05.1 / 31.05.2020 Kagu Finished projects [ AR-108 ] - Upgrade remaining kernels to 5.4.y [ AR-158 ] - Update 3rd party wireless drivers [ AR-159 ] - Switch fake-hwclock to hardware RTC on mvebu family [ AR-168 ] - Add NanoPi R2S board support [ AR-180 ] - Update Wireguard drivers on kernels below 5.4.y [ AR-184 ] - Improve slow booting on Rockchip RK3399 devices [ AR-185 ] - Change download images compression format [ AR-190 ] - Update wireless driver for RTL88x2BU [ AR-196 ] - Upgrade u-boot to 2020.04 where possible [ AR-201 ] - Introduce CI autotest facility [ AR-207 ] - Merge rockpis-dev into rockchip64 [ AR-208 ] - Consolidate u-boot variants for mvebu family [ AR-210 ] - Add support for more HDMI resolutions on Rockchip RK3288 devices [ AR-215 ] - Move meson64 dev branch to 5.6.y [ AR-221 ] - Upgrade imx6 current to 5.6.y [ AR-222 ] - Port Docker image building to Ubuntu 20.04 [ AR-226 ] - Add Hardkernel Odroid C4 mainline u-boot / kernel [ AR-236 ] - Attach Meson64 CURRENT to 5.6.y [ AR-238 ] - Updating hostapd, PSD and theme package in repository [ AR-247 ] - Revitalise Udoo board [ AR-250 ] - Improve usage of external patches [ AR-253 ] - Add prerm script for headers [ AR-254 ] - Add Banana Pi M2 Zero [ AR-257 ] - Bring Odroid C1 back from the EOL with latest upstream kernel [ AR-260 ] - Add Nanopi A64 board support [ AR-261 ] - Add Rockpi S mainline board support [ AR-262 ] - Move Allwinner development branch to 5.6.y [ AR-278 ] - Add snap free Chromium to Ubuntu Focal [ AR-279 ] - Add Hardkernel Odroid C4 stock kernel Solved bugs [ AR-109 ] - Upgrade is not done properly on some boards [ AR-165 ] - Instability with Rock64 and Rock PRO [ AR-177 ] - No serial gadget console on Nanopi Neo2 black [ AR-181 ] - Odroid N2 crashes during USB rsync backups [ AR-198 ] - Olimex Lime 2 doesn't boot from eMMC [ AR-204 ] - CPUfreq defaults missing on update [ AR-205 ] - No sound output with OrangePi 4 in dev and current [ AR-211 ] - Chrony fails to start on Ubuntu Focal [ AR-212 ] - Random MAC on Nanopi R2S [ AR-220 ] - Disable 3D support in Bionic due to broken mesa packages [ AR-231 ] - Unstable stmmac network driver on Meson64 [ AR-237 ] - Desktop install on Ubuntu Focal installs Gnome3 desktop [ AR-239 ] - Chrony fails to start on Focal [ AR-240 ] - Broken VFAT kernel upgrade [ AR-244 ] - Thermal throttling on H5 doesn't work properly [ AR-245 ] - Hostapd doesn't go up [ AR-248 ] - Odroid C4 CPU speed is limited to 1.5Ghz [ AR-249 ] - Problems with CI testings [ AR-251 ] - Fix kernel 5.7.y packages patch [ AR-255 ] - Fix Debian mirrors URL [ AR-263 ] - Fix audio on Renegade [ AR-269 ] - Add correct CPU regulator configuration for the NanoPI R1 [ AR-274 ] - Add missing iozone3 package to the minimal image [ AR-277 ] - Distinguish nightly and stable images at the download pages [ AR-286 ] - Armbian-resize-filesystem fails on first run due to missing fdisk in Bullseye [ AR-287 ] - Make sure cryptsetup-initramfs is installed in any case Closed tasks [ AR-150 ] - Disable Stretch image creation for Helios4 and Clearfog [ AR-157 ] - Add Ubuntu Focal 20.04 as a supported build host [ AR-186 ] - Blacklist 3D engine on headless images [ AR-189 ] - Move wireless driver for 8189ES from patch to git [ AR-195 ] - Adding Ubuntu 20.04 to all builds [ AR-209 ] - Disable CONFIG_VIDEO_DE2 in u-boot for Allwinner devices [ AR-213 ] - Make manual for .xz images and check their authentication [ AR-228 ] - Enable audio and USB on Nanopi A64 [ AR-229 ] - Bump with AUFS for DEV kernels [ AR-232 ] - Switch Odroid XU4 DEV branch to Libreelec branch [ AR-234 ] - Disable ZSH update prompt on every two weeks [ AR-242 ] - Enable SELinux [ AR-252 ] - Improve source code cleaning [ AR-258 ] - Enables PCIE PHY with Mezzanine NVME [ AR-259 ] - Add mp8859 regulator to current for RK3399-ROC-PC [ AR-264 ] - Enable RTL8723DS WiFI driver [ AR-265 ] - Remove Xenial from supported host OS [ AR-266 ] - Fix dependency for native building on Linux Mint and Debian Buster [ AR-267 ] - Enable Cedrus video acceleration on Allwinner kernels [ AR-268 ] - Add higher clock for Allwinner H6 [ AR-270 ] - Add support for alternate console UARTs in Allwinner H3 u-boot [ AR-271 ] - Lower DDR clock rate to 504MHz for H5 boards [ AR-280 ] - Update CONF, CSC and WIP statuses according to support level [ AR-285 ] - Improve thermal throttling on Allwinner H6 [ AR-288 ] - Add vendor name to the board config files 20.02.12 / 27.4.2020 Added preview images for Odroid C4 20.02.8 / 26.3.2020 update kernels with upstream versions, synchronise and test kernel sources download 20.02.7 / 26.3.2020 Updated images for Rockpi S, Odroid XU4 and FriendlyARM Nanopc T3, T3+, M3, Fire3 20.02.6 / 23.3.2020 Updated images for Rockpi S and Orangepi 4 Updated armbian-config (fixed OMV installer) 20.02.5 / 19.3.2020 Updated images for Orangepi 4, Bananapi and Rockpi S 20.02.4 / 18.3.2020 Added images for Nanopi R2S and Bananapi M2 Zero Kernel update for Odroud XU4 20.02.3 / 21.2.2020 Updating images for Le potato, Khadas Vim1,La Frite, Nanopik2 S905, Odroid N2/C2 - fixing audio Updating images for Orangepi 4 - boot loader problem 20.02.2 / 18.2.2020 Chiru Tasks [ AR-46 ] - Support for single function run [ AR-47 ] - Adding Docker shell support [ AR-49 ] - Move sunxi kernel to 5.4.y [ AR-79 ] - Check and adjust AUFS patch for 5.4.y [ AR-80 ] - Move imx6 to 5.4.y [ AR-81 ] - Enable Meson64 DEV at 5.4.y [ AR-82 ] - Move Mvebu64 / Espressobin dev kernel to 5.4.y [ AR-84 ] - Move rockchip64 current to 5.4.y [ AR-85 ] - Adjusted Sunvell R69 [ AR-90 ] - Add support for Nanopi M4 v2 [ AR-92 ] - Enable stable MAC address from cpuid on rk3399 [ AR-96 ] - Update Xradio wireless driver [ AR-97 ] - Tag supported builds properly at download pages [ AR-98 ] - Enable missing Kuberenetes kernel dependency [ AR-100 ] - Add Debian Bullseye and Ubuntu Focal [ AR-112 ] - Enabled internal WLAN on RockPi S [ AR-113 ] - Install wireguard tools only when selected [ AR-114 ] - Enable audio codec on Orangepi Win [ AR-115 ] - Add drivers for Realtek RTL8811CU and RTL8821C chipsets [ AR-116 ] - Remove annoying debug message filling logs on 8189es [ AR-117 ] - Add Pine H64 model B [ AR-124 ] - Enable wireless on Rockpi-S [ AR-127 ] - Refactoring wifi patches [ AR-128 ] - Adding WIP support for Pinebook PRO [ AR-129 ] - Move NanopiM4 V2 and Pine H64 under supported [ AR-134 ] - Update AUFS version on Odroid XU4 and Nanopi Fire3/T3/T3+ [ AR-138 ] - Update RK3399 legacy kernel (Nanopi M4, T4, Neo4) to latest upstream version [ AR-139 ] - Nanpi R1 - move primary serial console to ttyS1 which is on the chassis [ AR-143 ] - Create OpenHab installation instructions for their official documentation [ AR-146 ] - Update rockchip-legacy to most recent upstream kernel version [ AR-147 ] - Enable analogue audio on Allwinner H6 [ AR-148 ] - [ mvebu-current ] Fix cpufreq (dynamic frequency scaling) [ AR-149 ] - [ mvebu-current ] Fix pcie issues [ AR-153 ] - Enable USB3 for Rock64/Renegade with RK3328 on mainline kernel [ AR-154 ] - Add analogue audio driver to Allwinner H6 [ AR-155 ] - Enable Cedrus video acceleration support on Allwinner boards [ AR-167 ] - Add upstream patches for Odroid XU4 [ AR-172 ] - USB3 Support for Rockchip Bugs [ AR-74 ] - User patches directories not created [ AR-76 ] - Rockchip64 missing CPU_MIN variable [ AR-77 ] - Wrong board name variable for Orangepi RK 3399 [ AR-83 ] - Packaging patch broken for kernel 5.4.y [ AR-86 ] - CPU freq scaling for H6 doesn't work in K5.4 [ AR-88 ] - Banana Pi M3 does not boot [ AR-89 ] - Tinkerboard S doesn't start from eMMC [ AR-91 ] - Broken Allwinner overlays [ AR-94 ] - Espressobin v7 with 2gb of ram fail to boot [ AR-102 ] - Missing packaging patch for Rockpis legacy kernel [ AR-103 ] - PPA way of adding sources are failing on Ubuntu [ AR-104 ] - 32bit rust compiler doesn't run new kernels [ AR-105 ] - Orangepi Zero Plus 2 doesn't boot [ AR-106 ] - Wireguard breaks building on 5.4.y [ AR-107 ] - Improve compiler and rootfs download process [ AR-110 ] - Missing Bionic image for Nanopi Neo Plus2 [ AR-111 ] - Some versions of Orangepi Win does not boot modern kernel [ AR-118 ] - NanoPi M4V2 ethernet partialy broken in one side [ AR-123 ] - OpenHAB2 installation is failing [ AR-125 ] - Wireless driver for 8188EUS breaks on K4.14 [ AR-126 ] - Nanopi M3/Fire3/PC3 compilation breaks [ AR-130 ] - Instability with various A64 boards [ AR-131 ] - Add support for 3rd version of Pinebook A64 panel [ AR-133 ] - Odroid XU4 legacy kernel images instability [ AR-141 ] - Odroid XU4 current with kernel 5.4.y seems unstable [ AR-142 ] - Cryptsetup disk encryption build feature broken [ AR-144 ] - Tinkerboard break booting [ AR-145 ] - Missing HDMI audio on H3 boards [ AR-152 ] - Display issues with Bionic Mesa update [ AR-164 ] - Htop package does not build in qemu under Ubuntu Focal 20.04 [ AR-166 ] - Rootfs cache number creates a window of 12h when users are forced to rebuild cache [ AR-170 ] - Wireless not connecting for SBCs [ AR-171 ] - Fix broken loading process on MiQi [ AR-173 ] - Fix makefile of kernel headers 4.4.210 for rk3399 [ AR-174 ] - Teres Keyboard Not Working Stories [ AR-48 ] - Bump u-boot to 2020.01 on RK3399 boards [ AR-156 ] - WIP orangepi 4 preliminary support 19.11.3 / 20.11.2019 Tasks [ AR-1 ] - Adding support category for distributions [ AR-4 ] - Remove Allwinner legacy [ AR-5 ] - Drop Udoo family and move Udoo board into newly created imx6 family [ AR-9 ] - Rename sunxi-next to sunxi-legacy [ AR-10 ] - Rename sunxi-dev to sunxi-current [ AR-11 ] - Adding Radxa Rockpi S support [ AR-13 ] - Rename rockchip64-default to rockchip64-legacy [ AR-14 ] - Add rockchip64-current as mainline source [ AR-15 ] - Drop Rockchip 4.19.y NEXT, current become 5.3.y [ AR-16 ] - Rename RK3399 default to legacy [ AR-17 ] - Rename Odroid XU4 next and default to legacy 4.14.y, add DEV 5.4.y [ AR-18 ] - Add Odroid N2 current mainline [ AR-19 ] - Move Odroid C1 to meson family [ AR-20 ] - Rename mvebu64-default to mvebu64-legacy [ AR-21 ] - Rename mvebu-default to mvebu-legacy [ AR-22 ] - Rename mvebu-next to mvebu-current [ AR-23 ] - Drop meson64 default and next, current becomes former DEV 5.3.y [ AR-24 ] - Drop cubox family and move Cubox/Hummingboard boards under imx6 [ AR-26 ] - Adjust motd [ AR-27 ] - Enabling distribution release status [ AR-28 ] - Added new GCC compilers [ AR-29 ] - Implementing Ubuntu Eoan [ AR-30 ] - Add desktop packages per board or family [ AR-31 ] - Remove (Ubuntu/Debian) distribution name from image filename [ AR-32 ] - Move arch configs from configuration.sh to separate arm64 and armhf config files [ AR-33 ] - Revision numbers for beta builds changed to day_in_the_year [ AR-34 ] - Patches support linked patches [ AR-35 ] - Break meson64 family into gxbb and gxl [ AR-36 ] - Add Nanopineo2 Black [ AR-38 ] - Upgrade option from old branches to new one via armbian-config [ AR-41 ] - Show full timezone info [ AR-43 ] - Merge Odroid N2 to meson64 [ AR-44 ] - Enable FORCE_BOOTSCRIPT_UPDATE for all builds [ AR-57 ] - New kernel feature requested CONFIG_BLK_DEV_DRBD [ AR-60 ] - Modified logrotate.service [ AR-63 ] - Docker maintenance features Bugs [ AR-25 ] - Armbian resize stopped working in Ubuntu 19.10 or higher [ AR-40 ] - When changing console layout it does not change [ AR-51 ] - Prevent configuring locale [ AR-52 ] - Broken desktop install [ AR-54 ] - Upstream package name changed [ AR-55 ] - Wireless driver remove patch for Odroid XU4 broke down [ AR-56 ] - Missing CPU regulator [ AR-58 ] - Troubles with wireless on Nanopi DUO & Opi Zero [ AR-59 ] - Compressed files are getting back to /var/log [ AR-62 ] - No HDMI sound on various meson64 boards [ AR-64 ] - Docker require root [ AR-68 ] - Broken Ethernet on Pine64+ Stories [ AR-61 ] - Adding support for LOCAL_MIRROR [ AR-65 ] - Moving configs under userpatches [ AR-66 ] - Enable build system torrent download by default [ AR-67 ] - Install Docker when we want to build under Docker [ AR-69 ] - Use kernel command line instead of a patch [ AR-70 ] - Enable Lima kernel driver on meson64 [ AR-73 ] - Enable PCI on Rockpi 4 and overlay for GEN2 speed 5.98 / 9.10.2019 changed ntptime with chrony fixed serial console on several hosts added FriendlyARM ZeroPi enabled gadgets on rockchip64 bumped RK3399 boards to latest kernel, recreate images and repository merged odroidxu4 down to default since we only have one kernel fixed Cubox images, move them to stock kernel fixed low Synaptic search speed Build script: script configurations were migrated to userpatches added option to create minimal images with around 500Mb in size BUILD_MINIMAL=\u201dyes\u201d added initial support of MCIMX7SABRE board (CSC) updates for xt-q8l-v10 (CSC) vagrant-disksize is beeing determined automatically Docker is installed automatically if one want use it (Debian based build host only) refactor build all images scripting that images can be build in full parallel mode added one file for storing which combinations shell be made for each board replaced Etcher with dd + verify for directly burning images when done cleaned initial config and remove confusing advanced options out v5.92 / 2.8.2019 updated sunxi NEXT (4.19.63) and DEV (5.2.5) kernels updated htop application to show cpu speed and temperature (buster / disco) v5.91 / 31.7.2019 created new images for Helios4 and Clearfog Pro/Base moved mvebu DEFAULT, NEXT and DEV branch to next kernel (LTS) and U-boot version fixed armada_thermal sensor reading, adjusted Helios4 fancontrol configuration fixed ODT on data signals of DDR RAM for Armada A388 SOMs recreated Armbian Buster images due to a bug in Network manager which in some cases failed to initiate network connection Armbian-config: added Emby installation updated Plex install to use official repo added netmask-to-CIDR function for manual IP configuration v5.90 / 7.7.2019 added Armbian Buster images for all boards added Macchiatobin Doubleshot CSS target and images added images with test kernel v5.1.y for: Orangepi3, Lite2, One+, PineH64, Odroid C1, Teres, Pinebook added wireless drivers for 88x2bu added eMMC support for Nanopi K2 (booting from doesn\u2019t work yet) added dual w1 overlay for meson64 family updated wireless drivers for Realtek 8811, 8812, 8814 and 8821 updated wireless drivers for rtl8188eus & rtl8188eu & rtl8188etv added latest Wireguard driver enable eMMC on Orangepi Win Plus enable Bluetooth on Tinkerboard, Nanopi4, Rockpi 4 CLI images improved ALSA config on Tinkerboard fixed Bluetooth on Nanopi M4/Neo4/T4 and Rockpi4 fixed wireless drivers on OPi3 & Lite2 fixed temperature readout on Allwinner H5 boards fixed SPI related bug on Allwinner 5.1.y kernel fixed HDMI output and bump kernel to 5.1.y on imx6 boards fixed eMMC install, add rootdev= to armbianEnv if missing fixed A10/A20 SATA write speed set default build target from Debian Stretch to Buster for all boards changed CPU clock back to 1.5/1.8Ghz defaults on boards with RK3399 to minimise thermal throttling changed motd console welcome text to: \u201cWelcome to Debian Stretch with Armbian Linux 5.1.6-sunxi\u201d changed display manager to lightdm by default and remove nodm completely changed u-boot for A64 to upstream sources changed RK3399 to U-boot 2019.04 added URL to the build script and commit hash to /etc/armbian-release file added synaptic package manager and on-board keyboard to the desktop base added \u201clogout\u201d to the panel/menu added normal users to additional groups: disk tty users games updated all kernels with upstream updated ATF and bootloader on Espressobin, supporting all versions Build script: added mirrors for speed-up building in China mainland added support for download compilers and rootfs cache via torrent network added new output image compression option (xz) enabled Debian Buster and Ubuntu Disco (unsupported) targets few Docker building improvements, caching image replace curl with aria2 Linaro compilers update to 2019.02 Armbian-config: added Gimp installation added enable/disable Avahi updated OMV installer, OMV5 preparations enable screen resolution changer for Odroid N2 enable CPU speed and governor adjustment v5.87 / 26.5.2019 added support for Odroid N2 , Nanopi R1 , Nanopi Duo2 enabled nightly images for Orangepi3, One+, Lite2, PineH64, Rock64pro, RockPi4b enabled nigtly Buster and Disco images for Le Potato recompiled all images and pushed update where updates are known to work (sunxi, sunxi64, meson64, \u2026) improved SATA write speed on A20 chips for up to 300% fixed thermal throtling for H5 devices mainline u-boot moved 2019.04 most development kernels moved to 5.1.y added separate DT for espressobinv7, updated boot loader enable WoL for eth0 on Helios4 Build script: added Debian Buster and Ubuntu Disco (WIP) improved building under Docker. Source code is not copied to docker image, caching image Linaro compilers update to 2019.02 fixed incomplete cleaning of the source code Armbian-config: fixed kernel changing fixed sources download fixed Hass.IO and TVheadend install added menu driven CPU frequency/governor adjustement improved two-factor authentication added meson64 and rockchip to overlay/hardware configuration improved hostapd management Infrastructure: main download server has been hooked to 10GbE connection. added web/http seeds to torrent download. Torrent download could/should fully utilize your download capacity. major forum upgrade ( v4.4.3 ) added another IPV6 capable EU mirror https://mirrors.dotsrc.org v5.76 / 11.2.2019 remove Exagear Desktop v5.75 / 10.2.2019 added updated driver for Realtek 8811, 8812, 8814 and 8821 chipsets added Wireguard support to remaining kernels (except lower than 3.10) images rebuild with latest upstream sources, mainline u-boot was bumped to 2018.11 v5.74 / 31.1.2019 fixing systemd related bug found in sunxi legacy 3.4.y kernels v5.73 / 29.1.2019 much faster nand-sata-install operations. Thanks to @dedalodaelus added support for @wireguard on all kernels higher than 3.10.y fixed drivers for popular DVB tuner S960 (all kernels) fixed bug in wireless drivers on Cubietruck, BananpiPRO, Bananapi+ fixed AP mode on Orangepi PC+, Prime, One, .. when using kernel 4.19.y added prolific USB-to-USB bridges in mvebu-next/dev added nftables masquerade in mvebu64-next added MD raid support for SUNXI64 upgrade bugfix for Helios4 updated hostapd to 2.7 fixed 1512MHz OPP on Renegade fixed DRM crashing for rockchip64 mainline u-boot bumped to 2018.11 (update goes manually from nand-sata-install utility) added testing images for Orangepi RK3399 and Radxa Rockpi 4B v5.72 / 16.1.2019 added additional repository mirror (updated armbian-config) fixed Tinkerboard DTB in repository and images rebuild v5.71 / 16.1.2019 updated images for Odroid C2, Lepotato and Nanopik2-S905 due to this bug v5.70 / 12.1.2019 sunxi-next and sunxi64-next were moved from 4.14.y to 4.19.y (remake of all AW images) better DVFS on H3/H5/A64, enabled higher cpu speed. added overlay support for Tinkerboard/rockchip next and kernel upped to 4.19.y updated next kernel for Odroid XU4 to 4.19.y updated next kernel for Odroid C2, Lepotato and Nanopik2-S905 to 4.19.y with overlay support fixed poweroff on H5 H5/A64 lost experimental status, upgraded images and upstream/bugfix kernel upgrade for Rock64, Renegade, u-boot update is moved from automated to manual (armbian-config) to minimize boot related troubles added two repository mirrors: China and France (armbian-config -> Personal -> Mirror) changed switching to alternative kernels from armbian-config. It is possible to select a direct version and it only replaces kernel (safer) first official build for Olimex Teres mainline kernel builds for: Pine64, Pine64so, Olinuxino A64, OrangepiWin added more download variants for Rock64, Renegade, Tritium H3&H5 updated images for Z28PRO, Bananapi PRO, Espressobin, Olimex Micro, Lime, Udoo, Bananapi M2, Bananapi M2U, v5.68 / 30.12.2018 updated Espressobin images, kernel updated to 4.19.y v5.67 / 26.11.2018 updated Helios4 images added experimental mainline kernel images for Pinebook and Pinebook 1080p v5.67 / 12.11.2018 updated images for Bananapi R2 with eMMC install support. v5.66 / 8.11.2018 added Mediatek MT7623 family. added images for Bananapi R2 with kernel 4.19.y without official support. v5.66 / 7.11.2018 removing Odroid C2 official support, drop its default 3.16.y kernel from build engine and merge with the meson64 family. attach meson64 dev to 4.19.y drop Udoo Neo completly, drop Udoo Quad default and dev kernel. Odroid XU4: drop kernel 3.10.y, default branch is upgraded to offical 4.14.y, next becomes vanilla 4.19.y v5.65 / 6.11.2018 Cubox-i/Hummigboard: drop kernel 3.14.y and move 4.14.y to default, next becomes 4.19.y, dev 4.19.y with a mainline u-boot v5.64 / 9.10.2018 updated images and packages for Helios4. added images for Nanopi Neo4. v5.63 / 8.10.2018 updated images for Helios4 with SPI booting support. updated armbian-config. Added advanced ZSH shell install with most used plugins and tmux. v5.62 / 1.10.2018 updated armbian-config v5.61 / 26.9.2018 updated armbian-config, fixed Chromium on Debian builds with a workaround. We are overwriting package with last known working one. It will show some error on startup which is safe to ignore. This workaround will fade out with Chromium upstream update. v5.60 / 19.9.2018 Changes overview: General: Ubuntu Xenial was replaced with Bionic unless kernel was too old for the change, Debian Jessie becomes EOL and its building is not maintained anymore while you will still receive kernel updates, Emergency swap file creation is disabled by default since we use compressed memory (ZRAM) as an alternative, vm.swappiness has been changed from 0 to 100 (if you run databases on your board you might want to revert this change in /etc/sysctl.conf ), RAM logging also uses ZRAM now and rotates logs automagically, all images were rebuilt, except boards for which support ended, significantly lighter - browser only - desktop images (< 1.5G), fixed hanging on headers installation, install boot script (BSP package) if not present. This fixes upgrade or kernel switching problems, Proper bind mount directory when installing to SATA/USB and booting from SD, update for wireless drivers 8812/11/14AU, 8188EU and AUFS, Bugfix when a temperature is not present or readings are invalid, Also showing bridge IP addresses in MOTD, storing package list compressed - saves 50-70Mb, enlarging automated apt-get update and purge intervals, smaller overhead for CLI images, improved alternative kernel switching, stop setting Google\u2019s DNS server as default for privacy reasons. Family: sunxi and sunxi64, u-boot was bumped to 2018.05, NEXT branch was updated to the latest 4.14.y, DEV is attached to 4.18.y + fixed overlay support, mvebu64, default BSP kernel was upgraded to 4.14.y, NEXT to 4.18.y, odroidc1, experimental NEXT kernel branch was attached to 4.18.y, odroidc2 kernel was merged with meson64 on the source level, meson64 u-boot was pushed to 2018.05, a default was updated to the latest 4.14.y, NEXT to 4.18.y, rk3288, u-boot was pushed to 2018.05, legacy kernel cleaned and fixed after upstream troubles, NEXT branch was updated to the latest 4.14.y, rockchip64, rk3399 was split into rk3399 for Friendly ARM boards and rockchip64 for Rock64 and RockPro, Ayufan repository. Merging is postponed for the future, s5p6818 family support added NEXT branch was updated to the latest 4.14.y, mvebu, NEXT branch was updated to latest 4.14.y, DEV attached to 4.18.y, fixed randomly failing X server on imx6 family, Board: added WIP support for Firefly RK3399, Lime A64, Renegade, Rockpro64, Olimex Teres added experimental images for Bananapi M3 and Cubietruck+, adeed support for: Tinkerboard S, Rock64, Orangepi Zero Plus, Nanopi Neo Core2, Nanopi M4, added NEO 1.1 regulator overlay, added Helios4 device tree with FAN control for modern kernel, enabled SPI access on Espressobin, updated SPI boot firmware on Espressobin (18.09.1) with many fixes and support for booting from USB, SATA, eMMC or SD, added Tinkerboard S DC-IN voltage to armbianmonitor, fixed network interface initialization, fixed clock drift on Bananapi boards, enabled concurrent AP/STA mode on Tinkerboard, improved support for NanoPi Fire 3 (added SPU1705, DVFS, thermal tables, etc.), fixed network crashing on high load. Affected: Odroid C1/C2, Le Potato kernel 4.18.y, fixed wireless, eMMC and Bluetooth on (unsupported) Z28 PRO and changed boot order, fixed eMMC install on NanoPC T3+ and Docker dependencies on Fire3, M3, NanoPC T3+, added eMMC and DVFS support on Espressobin mainline kernel, ported Tinkerboard UMS to modern u-boot, enabled 1392 MHz cpufreq OPP on all RK3328 devices, enabled 1992/1512MHz cpufreq OPP on all RK3399 devices, added eMMC to OlinuXino A64 kernel and u-boot, added Sunvell R69 CSC target, OrangepiWin: fixed BT, fixed ethernet on (unsupported) Bananapi M64. Build script: changed recommended build host to Bionic, Xenial still supported for everything except building Bionic images, added support for burning image directly to SD card when your build is done by using Etcher for CLI, added support for making LUKS encrypted root images, parameters: CRYPTROOT_ENABLE=yes, CRYPTROOT_PASSPHRASE=unlockpass, fixed building under Docker, bumped to Bionic host, added building Bionic and block building it for images with too old kernels, added multibranch support (LIB_TAG). Infrastructure: build machine main SSD and memory upgrade, switched from bare metal Ubuntu Xenial to fully optimsed Debian KVM server, free build capacity is avaliable for any armbian related activity upon request, download server drive capacity and download speed upgrade, IPV6, geo load balancing for repository and download server is under testing, improved repository management. Possibility to add packages via Github, introducing new internal parameter, example: BUILD_ALL=\u201dyes\u201d REBUILD_IMAGES=\u201dbananapi,udoo,rock64\u201d to specify which images need rebuilding, main torrent server cleanup, removed deprecated images, creating report https://beta.armbian.com/buildlogs/report.html when building all kernels. Prepared to include simple per board testing report where exists https://github.com/armbian/testings. Known bugs: modern kernel support on A64 boards is mainly broken. v5.59 / 18.8.2018 rebuilt images for Espressobin with kernel 4.18.y, Nanopc T4 v5.58 / 13.8.2018 rebuilt images for Bananapi, Bananapi Pro, Bananapi+, Odroid C2, Odroid XU4 updated repository for Odroid C2/XU4, changed NEXT from 4.9.y to 4.14.y v5.58 / 13.8.2018 rebuilt images for Bananapi, Bananapi Pro, Bananapi+ v5.57 / 11.8.2018 added Bionic desktop and Stretch CLI images for RK3399 powered Nanopc T4 v5.56 / 10.8.2018 rebuilt images for Pinebook. Added Bionic build v5.55 / 9.8.2018 rebuilt images for Orangepi One+, Orangepi Lite 2 and Pine H64. Enabled USB3, network, THS, DVFS, higher frequencies, HDMI on 4.18.y DEV branch images. v5.55 / 3.8.2018 added Stretch and Bionic mainline kernel images for Odroid C1 (testing), rebuilt images for Bananapi M3 (fixed ethernet) v5.54 / 25.7.2018 updated images for Odroid C2, Nanopi M3, Nanopi Fire 3 and NanoPC T3+, Espressobin, Cubox-i/HB and Le potato added preview images without end user support for Bananapi M3 , Cubietruck+ and Bananapi M2 Berry . v5.53 / 23.7.2018 Z28PRO images updated. Fixed wireless and Bluetooth FriendlyARM Nanopi K2 S905 images updated. Fixed ethernet problems. FriendlyARM Nanopi K1+ images updated. Fixed HDMI out and wireless v5.51 / 4.7.2018 Helios4 Stretch and Bionic images update v5.50 / 28.6.2018 Espressobin images rebuild and repository update, default 4.4.138, next 4.17.3, dev 4.18.RC, hardware crypto support in 4.17.y, zram and zswap Odroid C2 bugfix update v5.49 / 28.6.2018 Amlogic Meson64 family (Odroid C2, Lepotato and FriendlyARM K2 S905) were merged into one kernel. Default images comes with kernel 4.14.52, next with 4.17.3 and DEV with 4.18.RC, updated boot scripts, implemented latest kernel bug fixes updated kernels, desktop packages and armbian config on the stable repository (apt update & upgrade) v5.48 / 26.6.2018 added nightly images for Odroid C2 with 4.16.y (NEXT) and 4.18.y (DEV) and hopefully fixed ethernet driver v5.47 / 22.6.2018 Odroid C2 images rebuild. Legacy kernel was upgraded to 3.16.57, next to 4.14.51, u-boot to 2018.05 Added Tritium H5 v5.46 / 20.6.2018 Added Olimex Teres nightly builds Added FriendlyARM Nanopi K1 plus v5.46 / 6.6.2018 Added Orange Pi Lite 2 and One plus nightly builds v5.45 / 23.5.2018 Orangepi Zero+ images rebuild v5.44 / 10.5.2018 Espressobin images were rebuilt and moved under stable. Kernel 4.14.40, Stretch, Xenial and Bionic. Fixed bootloader, ath10 wireless card support added initial Bionic storage to the main apt repository Cubox-i / Hummingboard bugfix update to 4.16.y and images rebuild Odroid C2 images rebuild v5.41 / 10.2.2018 fixed LED driver on Helios4 bugfix update on sunxi/sunxi64 kernel. Updated to 4.14.18 kernel update for MVEBU next (4.14.18 and default 4.4.115) for Clearfog and Helios4. Upstream fixes,AUFS and Realtek 881yAU drivers update v5.40 / 5.2.2018 fixed eMMC support on Odroid C2 NEXT, kernel 4.14.y updated PWM driver on Helios4 kernel update for MVEBU next (Clearfog, Helios4) v5.38 / 29.1.2018 updated all images added H3/H5 testing images with kernel 4.14.y added Nanopi M3/T3+/Fire testing image fixed Bluetooth on Orangepi Win main repository update with recent kernel on all NEXT builds v5.37 / 23.1.2018 bugfix release armbianmonitor -u fix setting cronjob permissions replace broken u-boot packages on A20 boards updated utilities: hostapd, sunxi-tools, armbian-config updated images: Bananapi, PRO, M2, BeelinkX2, Clearfog,Cubieboard2, Cubietruck, Cubox-i/HB, Espressobin, Helios4 v5.36 / 3.12.2017 bugfix release v5.35 / 25.11.2017 mainline kernel updated to 4.13.y mainline u-boot updated to v2017.09 added new sunxi Device Tree overlays, fixed and improved old overlays Micro-USB g_serial console is enabled by default on most small Allwiner based boards Olimex Lime2 and Micro: merging eMMC and normal versions Odroid C2: next and dev branches migrated to mainline u-boot Odroid XU4: added dev branch, next branch migrated to mainline u-boot Clearfog: added dev branch with mainline u-boot added supports for 7\u201d RPi display to Tinkerboard with legacy kernel All mainline kernels: added Realtek 8811AU/8812AU/8814AU USB wireless driver with monitor mode and frame injection All boards: added kernel source packages to the repository (Package names linux-source-${BRANCH}-${LINUXFAMILY} , i.e. linux-source-sunxi-next ) Kernel headers are no longer installed by default to new images Additional out of tree drivers and USB Redirector are no longer installed by default to new images Switching from emergency swap to zram on new Ubuntu Xenial images New hardware support (stable/supported images): NanoPi Duo, Orange Pi R1, Pinebook New hardware support (experimental): Le Potato, NanoPi NEO 2, Orange Pi Zero Plus, Orange Pi Zero Plus 2 (H5) sunxi mainline u-boot: reenabled USB keyboard support and disabled stopping the boot sequence with any key - autoboot now can be aborted with Desktop images: xterm was replaced with full featured xfce terminal, added memory profile caching for Chromium, added OpenVPN connector, shortcuts to armbian-config, support and donate were moved to menu, default icon theme was changed to lighter one (Numix), fixed login greeter theme, changed wallpaper. changed CMA handling on Allwinner legacy kernels armbian-config: was splitted from board support packages to a new package armbian-config managing board hardware configurations, hotspot, Bluetooth, SSH server freezing/unfreezing kernel upgrade switching between stable and beta builds, switching between alternative kernels, installing/uninstalling kernel headers, changing timezone, locales, hostname, running diagnostic tools, enabling/disabling RDP server, 3rd party software installer: Samba, OMV, Pi hole, Transmission, \u2026 Build script: added Debian Stretch most tweaks moved from inline files to separate files in board support package firmware blobs moved to a separate repository disabled distcc in extra software compilation process due to toolchain compatibility issues Known problems Allwinner A20/sun7i legacy boards. Changed CMA settings prevents playing video. You need to add cma=96M to kernel command line v5.34 / 18.10.2017 bugfix Odroid XU4/HC1 image rebuild due to broken USB install on kernel 4.9.x added Le Potato and Orange Pi Zero testing image (mainline kernel) Tinkerboard, MiQi and Pinebook images rebuilt v5.33 / 24.09.2017 Odroid XU4/HC1 images were rebuilt. v5.33 / 21.09.2017 Tinkerboard and MiQi images were rebuilt. Rockchip legacy kernel was updated to 4.4.88 and mainline (NEXT) to 4.13.3. v5.32 / 23.06.2017 bugfix release due to broken crypto functions on kernel 4.11.x v5.31 / 15.06.2017 bugfix release due to network failure on some A10 / A20 boards End of support notice Following boards are no longer receiving support and updates since this version: Cubieboard (Allwinner A10) - not enough hardware samples to maintain support Lamobo R1 (Allwinner A20) - hardware design flaws, poor software support for the onboard switch Olimex Lime A10 v5.30 / 14.06.2017 mainline kernel updated to 4.11 mainline u-boot updated to v2017.05 Firefox was replaced with Chromium (desktop images) sunxi mainline configuration: added Device Tree overlays support (new images only) sunxi mainline configuration: added armbian-add-overlay helper for compiling and activating DT overlays (new images only) log2ram: fixed saving /var/log contents on shutdown new hardware support (stable/supported images): Xunlong Orange Pi Zero Plus 2 (H3), ASUS TinkerBoard, MiQi reworked package updates MOTD script to speed up the login process added config file /etc/default/armbian-motd for disabling MOTD components added armbian-config dialog-based configuration program (WIP) Banana Pi M2: fixed HDMI video output Clearfog: adjusted temperature readout i.MX6 mainline: enabled support for HDMI audio and PCIe bus End of support notice Following boards are no longer receiving support and updates since this version: Orange Pi (Allwinner A20) - no hardware samples, out of stock Orange Pi Mini (Allwinner A20) - no hardware samples, out of stock LeMaker Guitar (Actions S500) Roseapple Pi (Actions S500) v5.26,5.27 / 24.02.2017 security update for most kernels (packages only) fixes for hostapd configuration v5.25 / 2.2.2017 nand-sata-install expanded functionality: you can partition destination and choose file-system type: ext2, ext3, ext4 and BTRFS (BTRFS requires kernel 4.4+) added new boards: Clearfog Base, Lime2 eMMC, Lime A33, NanoPi M1+, OrangePi Zero, OrangePi PC2 (mainline only, experimental) new default kernel for Clearfog(s), changed kernel family to \u201cmvebu\u201d to avoid conflicts disabled wireless power management by default to improve performance with certain drivers added wireless drivers to mainline kernels: OrangePi Zero, Neo Air implemented initrd loading support for all boards moved all images to single ext4 partition scheme changed default wallpaper, startup icon, shadows to windows on desktop builds Firefox web cache moved to memory added g_serial driver to boards without a network connector, working on both kernel (Opi Zero,Opi Lite,FA Neo Air) added \u201cSoftware boutique\u201d application installer on desktop builds (currently not working properly on arm64) added per board patching option added u-boot video driver and boot logo to H3 based boards added simplefb video driver (HDMI only) to mainline H3 kernel updated MALI driver on H3 platform, fixed problems on 2GB boards changed Ethernet switch driver on Lamobo R1 to DSA based one (mainline kernel) fixed soft cursor (CLI) for H3 legacy and Odroid C2 expand and adjust multiple kernel configurations based on user requests adjusted sunxi boot script to support booting in SPI flash + USB storage scenario (w/o the SD card) dropped support for Debian Wheezy and Ubuntu Trusty releases sunxi mainline kernel was updated to 4.9.x, some dev kernels to 4.10 added log2ram (Ramlog alternative) to default installation changed first run logic, disabled forced automatic reboot changed new user account creation logic, disabled forced reboot on user creation failure v5.24 this version is not released, it was used for the nightly or user-built images v5.23 / 23.10.2016 fixed bug in nand-sata-install fixed u-boot update bug on Allwinner platform Known problems: Lamobo R1 fails to boot upon upgrade v5.22 / 22.10.2016 fixed eMMC install on Odroid C2 firmware package was splitted into minimal (default) and full versions patched Dirty COW exploit on all kernels added Odroid XU4 mainline kernel image added Olimex A33 mainline kernel image added Overlay FS for Cubox, Udoo and Udoo Neo booting problems fixed on more boards updated wireless driver on M2+ (dhd) updated driver for OV5640 on sun8i default kernel sunxi-next kernel version updated to 4.8.4 BananaPi M1+ now uses upstream DTB file sun7i-a20-bananapi-m1-plus.dtb , boot script adjusting may be required for existing images Desktop images: prebuilt mpv and FFmpeg were removed in favor of providing only configuration files fixed an issue with video brightness on A10/A20 based boards Build script: DEBUG_MODE was renamed to CREATE_PATCHES GLshim was moved to a private directory, it can be activated for selected applications by changing LD_LIBRARY_PATH Known problems: eMMC install fails (will be fixed in bugfix update) H3 development kernel (4.8.4) update fails to boot C2 upgrade hangs on compiling headers (Jessie) v5.20 / 16.9.2016 added FriendlyARM Neo legacy and mainline images (experimental) added Orange Pi PC+ mainline kernel (experimental) added Pine64 / Pine64+ images with legacy kernel added UUID support for NAND/SATA/USB installer added desktop images for Cubox(s) / Hummingboard(s) with mainline kernel enabled MIDI sequencer and snd-rawmidi-seq in H3 legacy kernel added H3 consumption tool to control board consumtion level on legacy kernel fixed and enabled Bluetooth on Cubietruck and Cubox(s) / Hummigboard(s) desktop, both kernels masked p2p0 wifi direct device on Bluetooth legacy kernel Odroid C1/C2 upgrade fail fixed wireless enabled by default on Banana Pi PRO added new screen resolutions to H3 boards with legacy kernel DeviceTree Overlay ConfigFS interface for H3 mainline kernel update of mainline u-boot to 2016.09 should fix boot failures on H3 boards with eMMC disabled USB keyboard support in mainline u-boot should fix boot failures with connected USB devices Desktop images: WICD was replaced with NetworkManager ALSA was replaced with PulseAudio sunxi boards: GLshim was added to desktop images with Mali support (except for Orange Pi Plus and Orange Pi Plus 2e) sunxi boards: prebuilt mpv now supports OSD and subtitles, activated by setting environment variable VDPAU_OSD=1 Build script: complete desktop building rework - now packages are built from sources added Lime 2 eMMC as build target (WIP) added Pine64 / Pine64+ mainline (dev) target (experimental) added FriendlyArm Neo as build target fixed MT7601 wifi driver building github download rework external toolchain rework Added additional packages, not installed by default: hostapd-realtek: replacement for hostapd with support for several Realtek Wi-Fi adapters fswebcam-gc2035: replacement for fswebcam with support for GC2035 camera driver for H3 based boards guvcview: replacement for stock guvcview with support for H3-based Orange Pi CMOS cameras Known problems: Mali OpenGL ES does not work on H3 boards with 2GB RAM (Orange Pi Plus 2, Orange Pi Plus 2e) Hardware video decoding on A10/A20 based boards produces dark video Some applications that depend on livav libraries (i.e. minidlna) may not work on Jessie images v5.17 / 7.7.2016 bugfix release on some boards. v5.16 / 5.7.2016 bugfix release. In 5.15 we accidentaly overwrote default network settings. Check /etc/network/interfaces if you use advanced network settings or fixed ip. small changes. v5.15 / 1.7.2016 Added improved camera driver for Xunlong\u2019s cheap 2MP GC2035 camera Improved throttling/DRAM settings for the new 3 overheating H3 devices (BPi M2+, NanoPi M1, Beelink X2) Added official support for Beelink X2, NanoPi M1, Banana Pi M2+ Improved console output (serial + display) Finally got rid of (broken) board auto detection. We do not ship any more one image for several devices that tries to detect/fix things on 1st boot but provide one dedicated image per board (Plus and Plus 2 and both NanoPi M1 variants being handled as the same device since only size of DRAM/eMMC differs) Tried to improve user experience with better/unified led handling (light directly after boot, communicate booting states through blinking) Improve partitioning and filesystem resize on 1st boot making it easier to clone every installation media afterwards fully support installation on eMMC on all H3 devices ( u-boot and nand-sata-install.sh fixes) Improved performance/thermal/throttling behaviour on all H3 boards (especially newer Oranges) Prevent HDMI screen artefacts (disabling interfering TV Out by default) Enhanced 8189ETV driver for older Oranges Added support for OPi Lite, PC Plus and Plus 2E including new 8189FTV Wi-Fi (client, AP and monitoring mode, added fix for random MAC address) Added in-kernel corekeeper patch (bringing back killed CPU cores after heavy overheating situations when thermal situation is ok again) Added TV Out patch for Orange Pi PC Further improve driver compilation due to improved kernel headers scripts compilation Initrd support increased kernel version to 3.4.112 Exchanged whole kernel source tree to newer BSP variant , cleaned up sources, rebased all +100 patches (fixed display issues and kswapd bug, new and more performant GPU driver, increase Mali400MP2 clock to 600MHz) Added RTL2832U drivers to kernel (DVB-T) Fixed Docker on Odroid XU4 Added overlay fs to Clearfog and Odroid XU4 Many minor fixes v5.14 / 14.6.2016 all images rebuilt, most of them were manually tested added Beelink X2 image Cubox / Hummingboard kernel upgrade to 3.14.72 and 4.6.2 Trusty was replaced with Xenial v5.12 / 31.5.2016 updated C1 images added wifi driver for new Oranges (modprobe 8189fs) added Orange Pi Lite, PC Plus and Plus 2E images v5.11 / 24.5.2016 Various bug fixes new working images for Actions Semi S500 boards v5.10 / 1.5.2016 Images: all 3.10+ kernels are Docker ready all A10/A20/H3 comes with HW accelerated video playback in desktop build fixed root exploit on H3 boards fixed kswapd 100% bug on H3 boards fixed SPDIF / I2S audio driver in legacy kernel fixed Udoo Neo wireless fixed slow SD cards boot fixed Allwinner SS driver fixed bluetooth on Cubietruck, both kernels fixed wireless driver on H3 boards fixed R1 switch driver kernel for Allwinner boards was upgraded to 3.4.112 & 4.5.2 kernel for iMx6 boards was upgraded to 3.14.67 & 4.5.2 kernel for Armada (Clearfog) was upgraded to 3.10.101 & 4.5.2 kernel for Udoo boards was updated to 3.14.67 & 4.4.8 kernel for Guitar (Lemaker) was upgraded to 3.10.101 kernel for H3/sun8i legacy come from new Allwinner updated source (friendlyarm) added support for Olimex Lime2 eMMC increased MALI clockspeed on sun8i/legacy added Armbianmonitor added Odroid C1, C2(arm64), Nanopi M1, Banana M2+, Pcduino 2 and Pcduino 3. CLI and desktop added wifi radar to desktop added preview mainline kernel images for H3 boards (4.6.RC1) added initrd creation on all Allwinner images added Hummigboard 2 with working PCI and onboard wireless with legacy kernel 3.14.65 added eMMC installer for H3 added support for IFB and net scheduling for sun7i-legacy added ax88179_178a USB 3.0 Ethernet driver for sun7i-legacy hostapd comes as separate package (armbian-hostapd) changed first boot procedure and force user creation verbose / no verbose boot works almost on all boards enabled I2S on sun8i removed Debian Wheezy from auto build installing headers autocompile scripts all images come compressed with 7zip Build script: GCC 5 support for mainline and allwinner legacy RAW images are not compressed by default added arm64 building support added docker as host Added Belink X2 (H3 based media player), and Roseapple (S500) as WIP target introducted CLI_TARGET per board prepared FEL boot prepared Xenial target fixed USB redirector building on all kernels support for Xenial as a build host is 95% ready. implemented automatic toolchain selection come cleanup, configurations are subfoldered extended_deboostrap becomes default Known bugs: Udoo Neo reboots takes a while, 1min+ headers within sun8i needs some fixing H3 board autodetection fail under certain conditions v5.06 / 18.3.2016 increase kernel version to 3.4.111 headers auto creation while install (eases kernel/driver compilation) improved SD card partitioning to help old/slow cards with wear leveling and garbage collection Possible to use Ubuntu Xenial Xerus as target changed behaviour of board leds (green == power, red == warning) speed improvements for 1st automated reboot Integrates OverlayFS backport v5.05 / 8.3.2016 Auto detection for the Orange Pi 2 does work now Mali acceleration works for all users not only root verbose boot logging on 1st boot and after crashes (you can toggle verbose logging using sudo armbianmonitor -b ) more WiFi dongles supported due to backported firmware loader patch all 3 USB ports on Orange Pi One (Lite) available ( 2 of them need soldering ) I2S possible on all Orange Pis (compare with the mini tutorial since you need to tweak script.bin) default display resolution set to 720p60 to fix possible overscan issues on 1st boot HW accelerated video decoding works for most formats Booting from eMMC on OPi Plus now possible Udoo quad images upgraded to 4.4.4 v5.04 / 1.3.2016 HDMI/DVI works (bug in boot.cmd settings) Reboot issues fixed (bug in fex settings) 1-Wire useable (we chose to stay compatible to loboris\u2019 images so the data pin is 37 by default. You\u2019re able to change this in the fex file ) changing display resolution and choosing between HDMI and DVI is now possible with the included h3disp tool (should also work in the stand-alone version with Debian based OS images from loboris/Xunlong). Use sudo h3disp in a terminal to get the idea. Ethernet issues fixed (combination of kernel and fex fixes) USB-to-SATA bridge on the Orange Pi Plus works stability problems on Orange Pi One fixed (due to undervoltage based on wrong fex settings) problems with 2 USB ports on the PC fixed (wrong kernel config) Mali400MP acceleration (EGL/GLES) works now suspend to RAM and resume by power button works now (consumption less than 0.4W without peripherals) Enforce user account creation before starting the GUI USB and Ethernet IRQs distributed nicely accross CPU cores Full HDMI colour-range adjustable/accessible through h3disp utility already useable as stable headless/server board rebuilt Cubieboard 1 & 2 with 3.4.110 and 4.4.3 fixed Bluetooth on Cubietruck + rebuild with 3.4.110 and 4.4.3 all new images has no login policy: forced user generation v5.03 / 20.2.2016 H3 images rebuilt v5.02 / 18.2.2016 H3 images rebuilt v5.01 / 17.2.2016 Bugfix update for Allwinner boards Update for H3 based boards v5.00 / 12.2.2016 mainline kernel for Allwinner based boards upgraded to 4.4.1 Allwinner audio driver playback and capture on kernel 4.4.1, UAS , USB OTG, battery readings, added Marvel Armada kernel 3.10.96, 4.4.1 and patches for changing mPCI to SATA added Cubox / Hummingboard kernel 4.4.1 (serial console only) firstrun does autoreboot only if needed: wheezy and some legacy kernels. added motd to /etc/updated.motd \u2026 redesign, added battery info for Allwinner boards, bugfix, coloring fixed temperature reading on Cubox / Hummingboard legacy kernel fixed FB turbo building on Allwinner fixed NAND install on A10 boards (Legacy kernel only) fixed USB boot, added PWM on mainline fixed Banana PRO/+ onboard wireless on mainline kernel - running with normal Banana DT. readded USB sound added A13 Olimex SOM added LIRC GPIO receive and send driver for legacy Allwinner added LED MMC activity to mainline kernels for Cubietruck and Cubieboard A10 build script: option to build images with F2FS root filesystem for Allwinner boards build script: added alternative kernel for Lemaker Guitar (NEXT), Cubox (DEV) v4.81 / 28.12.2015 complete build script rework new development kernel package linux-image-dev-sunxi (4.4RC6) for Allwinner boards added Lemaker Guitar, kernel 3.10.55 added Odroid XU3/4, kernel 3.10.94 and mainline 4.2.8 mainline kernel for Allwinner based boards upgraded to 4.3.3 Udoo mainline upgraded to 4.2.8, legacy to 3.14.58 cubox / hummingboard upgraded to 3.14.58, added mainline kernel 4.4 fixed Jessie RTC bug, systemd default on Jessie images v4.70 / 30.11.2015 Bugfix update(apt-get update && apt-get upgrade) small changes and fixes v4.6 / 24.11.2015 Update only (apt-get update && apt-get upgrade) mainline kernel for Allwinner based boards upgraded to 4.2.6 Legacy kernel for Allwinner based boards upgraded to 3.4.110 added new board: Udoo Neo added USB printer, CAN, CMA, ZSWAP, USB video class, CDROM fs, sensor classs, \u2026 to Allwinner mainline kernel nand-sata-install scripts rewrite. Now it\u2019s possible to install to any partition. fixed nand install for Allwinner A10 based boards: Cubieboard 1 / Lime A10 universal upgrade script bugfix / rewrite. 8 channel HDMI support for legacy Allwinner kernel unattended upgrade fixed sunxi tools fixed added two new options to build script: keep kernel config and use_ccache added kernel version to motd v4.5 / 14.10.2015 mainline kernel upgraded to 4.2.3 for Allwinner based boards legacy kernel for Allwinner compiled from new sources (linux-sunxi) udoo mainline upgraded to 4.2.3 cubox / hummingboard upgraded to 3.14.54 changed kernel naming: A10 = linux-image-sun4i, A20 = linux-image-sun7i new boards: Banana M2, Orange+(A31S), Cubieboard 1, Cubieboard 2 Dual SD, Lime A10 fixed Udoo legacy wireless problems fixed Jessie boot problems by disabling systemd. It\u2019s possible to re-enable within boot scripts added ramlog to Jessie because we don\u2019t have systemd anymore changed wireless driver for Cubietruck and Banana PRO (now it\u2019s ap6210) added ZRAM to mainline kernel fixed dvbsky modules and a bunch of small fixes. v4.4 / 1.10.2015 Images: mainline kernel upgrade to 4.2.2 (Allwinner, Udoo Quad), legacy kernel upgraded to 3.4.109 (Allwinner), added I2C support and bunch of multimedia modules (DVB) (mainline Allwinner), Udoo quad images with fixed legacy kernel 3.14.28, Cubox and Hummingboard kernel upgrade to 3.14.53, brcmfmac driver fixes for mainline kernel (Banana PRO / Cubietruck) performance tweak: choosing a closest Debian mirror (Debian images) added Astrometa DVB firmware and dvb-tools added Nikkov SPDIF / I2S recent patch (legacy Allwinner) added patch for rtl8192cu: Add missing case in rtl92cu_get_hw_reg (Lamobo R1) bigger NAND boot partition on install install script bug fixes Script: force apt-get update on older rootfs cache, image harden manipulation security, packages NAND/FAT/same version install faling fixed, image shrinking function rework, better packages installation install checking, added Debian keys to suppress warnings in debootstrap process, added fancy progress bars, added whiptail downloading prior to usage (bugfix). v4.3 / 17.9.2015 kernel 4.2 for Allwinner based boards kernel 4.2 for Udoo Quad walk-around if ethernet is not detected on some boards due to RTC not set(?) update is done (semi) automatic if you are using Armbian 4.2. You only need to issue command: apt-get update && apt-get upgrade. If you are coming from older system, check Documentation U-boot on R1 is now updated to latest stable version (2015.07) Fixed AW SOM. Working with latest u-boot but you need to build image by yourself. Enabled whole USB net and HID section in kernel for Allwinner boards v4.2 Fixed upgrade script \u2013 only some minor bugs remains. Fixes to build script that it\u2019s working under Ubuntu 15.04 Adding Bananapi Wireless driver (ap6210) back to legacy kernel Udoo official kernel (3.14.28) not updated due too many troubles. v4.2 / 1.9.2015 Images: Upgraded NAND / SATA installer. Possible to install to SATA/NAND boot in one step. Easy kernel switching between old 3.4 and 4.x Automatic kernel updating (to disable comment armbian repo /etc/apt/sources.list) Allwinner boards share one 4.x kernel and two 3.4 All boards share the same revision number One minimal Ubuntu Desktop per board (Wicd, Firefox, Word) u-boot v2015.07 for most boards Aufs file system support kernel 4.1.6 and 3.4.108 Added Orangepi Mini, Cubieboard 1 (4.x only), Udoo with official kernel Repository for Wheezy, Jessie and Trusty enabled USB audio in kernel 4.x kernel headers fixed. No need to rebuild when you update the kernel. fixed boot scripts that can load from FAT partition too removed Cubox binnary repository because of troubles Docker support (kernel 4.x). Already here for a while / forget to mention. nodm change default login Build script: changed structure: sources now in folder sources, output is what we produce, deb in one folder expanded desktop part possible to build all images at once, create package repository SD card initial size is 4Gb, variable transfered into configuration.sh Avaliable board list is now created from file configuration.sh Fixed image shrinking problem Patching part rework Using first FAT boot partition now fixes boot scripts Uboot TAG moved to configuration.sh and differs for some boards new variables for source branches. Only too remove errors when checking out v4.1 / 5.8.2015 Added desktop image U-Boot 2015.07 with many new features Added auto system update via repository apt.armbian.com Root password change is initialized at first boot. 3.4.108 kernel fixes, 4.1.4 Allwinner Security System v4.0 / 12.7.2015 Fixed stability issues, temperature display in 4.x Kernel upgrades to 3.4.108 and 4.1.2 v3.9 / 11.6.2015 Bugfix release Kernel 4.0.5 traffic control support SATA / USB install fixed on kernel 4.x Added 256Mb emergency swap area, created automatically @first boot v3.8 / 21.5.2015 Bugfix release: Cubietruck images successfully booted on Cubietruck. I waited for automatic reboot than tested remote login. Kernel 4.0.4 added support for power on/off button Both: Jessie fixed, Ethernet init fixed (uboot) armbian.com introduction v3.7 / 14.5.2015 Kernel 4.0.3 some new functionality Kernel 3.4.107 added sunxi display manager to change FB on demand Both: Ubuntu and jessie install errors fixed, removed busybox-syslogd and changed to default logger due to problems in Jessie and Ubuntu, apt-get upgrade fixed, documentations update, Uboot fixed to 2015.4 \u2013 no more from dev branch Build script rework - image size shrink to actual size, possible to have fat boot partition on SD card, several script bug fixes v3.6 / 29.4.2015 Kernel 3.19.6 Kernel 3.4.107 with better BT loading solution v3.5 / 18.4.2015 Kernel 3.19.4: fixed AP mode, fixed USB, added 8192CU module Common: apt-get upgrade ready but not enabled yet, serial console fixed, fixed hostapd under jessie, easy kernel switching, latest patched hostapd for best performance \u2013 normal and for realtek adaptors, auto IO scheduler script Build script: everything packed as DEB v3.4 / 28.3.2015 Kernel 3.19.3: docker support, apple hid, pmp, nfsd, sata peformance fix Kernel 3.4.106: pmp, a20_tp - soc temp sensor Common: console setup fixed, headers bugfix, nand install fix Build script: kernel build only, custom packets install, hardware accelerated desktop build as option v3.3 / 28.2.2015 Kernel 3.19.0: many new functionality and fixes. Bugfixes: CT wireless works in all kernels v3.2 / 24.1.2015 Possible to compile external modules on both kernels Kernel 3.19.0 RC5 Bugfixes: install script, headers, bashrc, spi v3.1 / 16.1.2015 Kernel 3.19.0 RC4 Added Cubieboard 1 images Dualboot for CB2 and CT dropped due to u-boot change. Now separate images. New user friendly SATA + USB installer, also on mainline v3.0 / 29.12.2014 Kernel 3.18.1 for mainline image Added Ubuntu Trusty (14.04 LTS) image Bugfixes: auto packages update v2.9 / 3.12.2014 Kernel 3.4.105 with new MALI driver and other fixes Added: Jessie image Major build script rewrite - much faster image building Fixed: failed MIN/MAX settings v2.8 / 17.10.2014 Added: ondemand governor, fhandle, squashfs and btrfs Removed: bootsplash, lvm, version numbering in issue Fixed: custom scripts, Jessie upgrade Disabled: BT firmware loading, enable back with: insserv brcm40183-patch Added working driver for RT 8188C, 8192C v2.7 / 1.10.2014 Kernel 3.4.104 Automatic Debian system updates VGA output is now default but if HDMI is attached at first boot than it switch to HDMI for good. After first restart! Fixed NAND install script. /boot is mounted by default. Kernel upgrade is now the same as on SD systems. Cubieboard2 - disabled Cubietruck dedicated scripts (BT firmware, LED disable) Added network bonding and configuration for \u201cnotebook\u201d mode (/etc/network/interfaces.bonding) IR receiver is preconfigured with default driver and LG remote (/etc/lirc/lircd.conf), advanced driver is present but disabled Added SPI and LVM functionality Added Debian logo boot splash image Added build essentials package v2.6 / 22.8.2014 Kernel 3.4.103 and 3.17.0-RC1 Added GPIO patch (only for 3.4.103) v2.5 / 2.8.2014 Kernel 3.4.101 and 3.16.0-RC4 major build script rewrite v2.4 / 11.7.2014 Kernel 3.4.98 default root password (1234) expires at first login build script rewrite, now 100% non-interactive process, time zone as config option bug fixes: removed non-existing links in /lib/modules v2.3 / 2.7.2014 Kernel 3.4.96 cpuinfo serial number added bug fixes: stability issues - downclocked to factory defaults, root SSH login enabled in Jessie, dedicated core for eth0 fix disp_vsync kernel patch v2.2 / 26.6.2014 Kernel 3.4.94 Added Jessie distro image Updated hostapd, bashrc, build script bug fixes: disabled upgrade and best mirror search @firstboot, bluetooth enabler fix MD5 hash image protection v2.1 / 13.6.2014 Kernel 3.4.93 Onboard Bluetooth finally works Small performance fix Allwinner Security System cryptographic accelerator v2.0 / 2.6.2014 Kernel 3.4.91 with many fixes Cubieboard 2 stability issues fix eth0 interrupts are using dedicated core Global bashrc /etc/bash.bashrc Verbose output and package upgrade @ first run v1.9 / 27.4.2014 Kernel headers included Clustering support Advanced IR driver with RAW RX and TX Bluetooth ready (working only with supported USB devices) Bugfixes: VLAN, login script, build script New packages: lirc, bluetooth v1.8 / 27.3.2014 Kernel 3.4.79 Alsa I2S patch + basic ALSA utils Performance tweaks: CPU O.C. to 1.2Ghz, IO scheduler NOOP for SD, CFQ for sda, journal data writeback enabled Avaliable memory = 2000MB Minimized console output at boot MAC address from chip ID, manual optional Latest (Access point) hostapd, 2.1 final release Login script shows current CPU temp, hard drive temp & actual free memory Fastest Debian mirror auto selection @first boot New packages: alsa-utils netselect-apt sysfsutils hddtemp bc v1.7 / 26.2.2014 Flash media performance tweaks, reduced writings, tmp & logging to RAM with ramlog app \u2013 sync logs on shutdown SATA install script Dynamic MOTD: Cubieboard / Cubietruck Disabled Debian logo at startup New packages: figlet toilet screen hdparm libfuse2 ntfs-3g bash-completion v1.6 / 9.2.2014 Added support for Cubieboard 2 Build script creates separate images for VGA and HDMI NAND install script added support for Cubieboard 2 v1.52 / 7.2.2014 Various kernel tweaks, more modules enabled Root filesystem can be moved to USB drive Bugfixes: NAND install script v1.5 / 22.1.2014 Hotspot Wifi Access Point / Hostapd 2.1 Bugfixes: MAC creation script, SSH keys creation, removed double packages, \u2026 Graphics desktop environment upgrade ready v1.4 / 12.1.2014 Patwood\u2019s kernel 3.4.75+ with many features Optimized CPU frequency scaling 480-1010Mhz with interactive governor NAND install script included Cubietruck MOTD USB redirector \u2013 for sharing USB over TCP/IP v1.3 / 3.1.2014 CPU frequency scaling 30-1000Mhz Patch for gpio v1.23 / 1.1.2014 added HDMI version added sunxi-tools build.sh transfered to Github repository disabled LED blinking v1.2 / 26.12.2013 changed kernel and hardware config repository kernel 3.4.61+ wi-fi working updated manual how-to v1.0 / 24.12.2013 total memory available is 2G (disabled memory for GPU by default) gigabit ethernet is fully operational sata driver enabled root filesystem autoresize MAC address fixed at first boot Kernel 3.4.75 root password=1234 Bugs: wifi and BT not working","title":"Changelog"},{"location":"User-Guide_Advanced-Features/","text":"How to switch kernels? \u00b6 Check this for more info. How to troubleshoot? \u00b6 Important: If you came here since you cannot get Armbian running on your board please keep in mind that in 95 percent of all cases it is either a faulty/fraud/counterfeit SD card or an insufficient power supply that is causing these sorts of does not work issues! If you broke the system you can try to get in this way. You have to get to u-boot command prompt, using either a serial adapter or monitor and usb keyboard (USB support in u-boot currently not enabled on all H3 boards). After switching power on or rebooting, when u-boot loads up, press some key on the keyboard (or send some key presses via terminal) to abort default boot sequence and get to the command prompt: U-Boot SPL 2015.07-dirty (Oct 01 2015 - 15:05:21) ... Hit any key to stop autoboot: 0 sunxi# Enter these commands, replacing root device path if necessary. Select setenv line with ttyS0 for serial, tty1 for keyboard+monitor (these are for booting with mainline kernel, check boot.cmd for your device for commands related to legacy kernel): setenv bootargs init=/bin/bash root=/dev/mmcblk0p1 rootwait console=ttyS0,115200 # or setenv bootargs init=/bin/bash root=/dev/mmcblk0p1 rootwait console=tty1 ext4load mmc 0 0x49000000 /boot/dtb/${fdtfile} ext4load mmc 0 0x46000000 /boot/zImage env set fdt_high ffffffff bootz 0x46000000 - 0x49000000 System should eventually boot to bash shell: root@(none):/# Now you can try to fix your broken system. How to unbrick the system? (outdated) \u00b6 When something goes terribly wrong and you are not able to boot the system, this is the way to proceed. You need some Linux machine where you can mount the failed SD card. With this procedure you will reinstall the u-boot, kernel and hardware settings. In most cases this should be enough to unbrick the board. It is recommended to issue a filesystem check before mounting: fsck /dev/sdX -f Then mount the SD card and download those files (This example is only for Banana R1): http://apt.armbian.com/pool/main/l/linux-trusty-root-current-lamobo-r1/linux-trusty-root-current-lamobo-r1_4.5_armhf.deb http://apt.armbian.com/pool/main/l/linux-upstream/linux-image-current-sunxi_4.5_armhf.deb http://apt.armbian.com/pool/main/l/linux-upstream/linux-firmware-image-current-sunxi_4.5_armhf.deb http://apt.armbian.com/pool/main/l/linux-upstream/linux-dtb-current-sunxi_4.5_armhf.deb This is just an example for: Ubuntu Trusty, Lamobo R1, mainline kernel (next). Alter packages naming according to this . Mount SD card and extract all those deb files to it\u2019s mount point. dpkg -x DEB_FILE /mnt Go to /mnt/boot and link (or copy) vmlinuz-4.x.x-sunxi kernel file to zImage . If you upgrade from some very old build, you might need to update your boot script. Example goes for Allwinner boards: cd /mnt/boot wget https://raw.githubusercontent.com/armbian/build/master/config/bootscripts/boot-sunxi.cmd mv boot-sunxi.cmd boot.cmd mkimage -C none -A arm -T script -d boot.cmd boot.scr # you need a u-boot-tools package on your host system Unmount SD card, move it to the board and power on. How to build a wireless driver? \u00b6 Install and recreate kernel headers scripts (optional) armbian-config -> install kernel headers exit cd /usr/src/linux-headers-$(uname -r) make scripts Go back to root directory and fetch sources (working example, use ARCH=arm64 on 64bit system) cd git clone https://github.com/pvaret/rtl8192cu-fixes.git cd rtl8192cu-fixes make ARCH=arm Load driver for test insmod 8192cu.ko Check dmesg and the last entry will be: usbcore: registered new interface driver rtl8192cu Plug the USB wireless adaptor and issue a command: iwconfig wlan0 You should see this: wlan0 unassociated Nickname:\"<WIFI@REALTEK>\" Mode:Auto Frequency=2.412 GHz Access Point: Not-Associated Sensitivity:0/0 Retry:off RTS thr:off Fragment thr:off Encryption key:off Power Management:off Link Quality=0/100 Signal level=0 dBm Noise level=0 dBm Rx invalid nwid:0 Rx invalid crypt:0 Rx invalid frag:0 Tx excessive retries:0 Invalid misc:0 Missed beacon:0 Check which wireless stations / routers are in range iwlist wlan0 scan | grep ESSID How to freeze your filesystem? (outdated) \u00b6 In certain situations it is desirable to have a virtual read-only root filesystem. This prevents any changes from occurring on the root filesystem that may alter system behavior and it allows a simple reboot to restore a system to its clean state. You need an ODROID XU4 or Allwinner A10, A20 or H3 board with legacy kernel where we added support for overlayfs. Works only on Ubuntu Xenial. Login as root and execute: apt-get install overlayroot echo 'overlayroot=\"tmpfs\"' >> /etc/overlayroot.conf reboot After your system boots up it will always remain as is. If you want to make any permanent changes, you need to run: overlayroot-chroot Changes inside this will be preserved. How to run Docker? (outdated) \u00b6 Preinstallation requirements: Armbian 5.1 or newer with Kernel 3.10 or higher Debian Jessie (might work elsewhere with some modifications) root access Execute this as root: curl https://get.docker.com | sh Test if Docker works correctly: docker run -d -p 80:80 hypriot/rpi-busybox-httpd \u2026 and point the browser of any device in the same network to http://<IP OF YOUR DEVICE>/ More info in this forum topic How to set wireless access point? \u00b6 There are two different HostAP daemons. One is default and the other one is for some Realtek wifi cards. Both have their own basic configurations and both are patched to gain maximum performances. Sources: https://github.com/igorpecovnik/hostapd Default binary and configuration location: /usr/sbin/hostapd /etc/hostapd.conf Realtek binary and configuration location: /usr/sbin/hostapd-rt /etc/hostapd.conf-rt Since its hard to define when to use which you always try both combinations in case of troubles. To start AP automatically: Edit /etc/init.d/hostapd and add/alter location of your conf file DAEMON_CONF=/etc/hostapd.conf and binary DAEMON_SBIN=/usr/sbin/hostapd Copy /etc/network/interfaces.hostapd to /etc/network/interfaces Reboot Predefined network name: \u201cBOARD NAME\u201d password: 12345678 To change parameters, edit /etc/hostapd.conf BTW: You can get WPAPSK the long blob from wpa_passphrase YOURNAME YOURPASS How to connect IR remote? \u00b6 Required conditions: IR hardware loaded driver Get your remote configuration (lircd.conf) or learn . You are going to need the list of all possible commands which you can map to your IR remote keys: irrecord --list-namespace To start with learning process you need to delete old config: rm /etc/lircd.conf Than start the process with: irrecord --driver=default --device=/dev/lirc0 /etc/lircd.conf And finally start your service when done with learning: service lirc start Test your remote: irw /dev/lircd","title":"Advanced Features"},{"location":"User-Guide_Advanced-Features/#how-to-switch-kernels","text":"Check this for more info.","title":"How to switch kernels?"},{"location":"User-Guide_Advanced-Features/#how-to-troubleshoot","text":"Important: If you came here since you cannot get Armbian running on your board please keep in mind that in 95 percent of all cases it is either a faulty/fraud/counterfeit SD card or an insufficient power supply that is causing these sorts of does not work issues! If you broke the system you can try to get in this way. You have to get to u-boot command prompt, using either a serial adapter or monitor and usb keyboard (USB support in u-boot currently not enabled on all H3 boards). After switching power on or rebooting, when u-boot loads up, press some key on the keyboard (or send some key presses via terminal) to abort default boot sequence and get to the command prompt: U-Boot SPL 2015.07-dirty (Oct 01 2015 - 15:05:21) ... Hit any key to stop autoboot: 0 sunxi# Enter these commands, replacing root device path if necessary. Select setenv line with ttyS0 for serial, tty1 for keyboard+monitor (these are for booting with mainline kernel, check boot.cmd for your device for commands related to legacy kernel): setenv bootargs init=/bin/bash root=/dev/mmcblk0p1 rootwait console=ttyS0,115200 # or setenv bootargs init=/bin/bash root=/dev/mmcblk0p1 rootwait console=tty1 ext4load mmc 0 0x49000000 /boot/dtb/${fdtfile} ext4load mmc 0 0x46000000 /boot/zImage env set fdt_high ffffffff bootz 0x46000000 - 0x49000000 System should eventually boot to bash shell: root@(none):/# Now you can try to fix your broken system.","title":"How to troubleshoot?"},{"location":"User-Guide_Advanced-Features/#how-to-unbrick-the-system-outdated","text":"When something goes terribly wrong and you are not able to boot the system, this is the way to proceed. You need some Linux machine where you can mount the failed SD card. With this procedure you will reinstall the u-boot, kernel and hardware settings. In most cases this should be enough to unbrick the board. It is recommended to issue a filesystem check before mounting: fsck /dev/sdX -f Then mount the SD card and download those files (This example is only for Banana R1): http://apt.armbian.com/pool/main/l/linux-trusty-root-current-lamobo-r1/linux-trusty-root-current-lamobo-r1_4.5_armhf.deb http://apt.armbian.com/pool/main/l/linux-upstream/linux-image-current-sunxi_4.5_armhf.deb http://apt.armbian.com/pool/main/l/linux-upstream/linux-firmware-image-current-sunxi_4.5_armhf.deb http://apt.armbian.com/pool/main/l/linux-upstream/linux-dtb-current-sunxi_4.5_armhf.deb This is just an example for: Ubuntu Trusty, Lamobo R1, mainline kernel (next). Alter packages naming according to this . Mount SD card and extract all those deb files to it\u2019s mount point. dpkg -x DEB_FILE /mnt Go to /mnt/boot and link (or copy) vmlinuz-4.x.x-sunxi kernel file to zImage . If you upgrade from some very old build, you might need to update your boot script. Example goes for Allwinner boards: cd /mnt/boot wget https://raw.githubusercontent.com/armbian/build/master/config/bootscripts/boot-sunxi.cmd mv boot-sunxi.cmd boot.cmd mkimage -C none -A arm -T script -d boot.cmd boot.scr # you need a u-boot-tools package on your host system Unmount SD card, move it to the board and power on.","title":"How to unbrick the system? (outdated)"},{"location":"User-Guide_Advanced-Features/#how-to-build-a-wireless-driver","text":"Install and recreate kernel headers scripts (optional) armbian-config -> install kernel headers exit cd /usr/src/linux-headers-$(uname -r) make scripts Go back to root directory and fetch sources (working example, use ARCH=arm64 on 64bit system) cd git clone https://github.com/pvaret/rtl8192cu-fixes.git cd rtl8192cu-fixes make ARCH=arm Load driver for test insmod 8192cu.ko Check dmesg and the last entry will be: usbcore: registered new interface driver rtl8192cu Plug the USB wireless adaptor and issue a command: iwconfig wlan0 You should see this: wlan0 unassociated Nickname:\"<WIFI@REALTEK>\" Mode:Auto Frequency=2.412 GHz Access Point: Not-Associated Sensitivity:0/0 Retry:off RTS thr:off Fragment thr:off Encryption key:off Power Management:off Link Quality=0/100 Signal level=0 dBm Noise level=0 dBm Rx invalid nwid:0 Rx invalid crypt:0 Rx invalid frag:0 Tx excessive retries:0 Invalid misc:0 Missed beacon:0 Check which wireless stations / routers are in range iwlist wlan0 scan | grep ESSID","title":"How to build a wireless driver?"},{"location":"User-Guide_Advanced-Features/#how-to-freeze-your-filesystem-outdated","text":"In certain situations it is desirable to have a virtual read-only root filesystem. This prevents any changes from occurring on the root filesystem that may alter system behavior and it allows a simple reboot to restore a system to its clean state. You need an ODROID XU4 or Allwinner A10, A20 or H3 board with legacy kernel where we added support for overlayfs. Works only on Ubuntu Xenial. Login as root and execute: apt-get install overlayroot echo 'overlayroot=\"tmpfs\"' >> /etc/overlayroot.conf reboot After your system boots up it will always remain as is. If you want to make any permanent changes, you need to run: overlayroot-chroot Changes inside this will be preserved.","title":"How to freeze your filesystem? (outdated)"},{"location":"User-Guide_Advanced-Features/#how-to-run-docker-outdated","text":"Preinstallation requirements: Armbian 5.1 or newer with Kernel 3.10 or higher Debian Jessie (might work elsewhere with some modifications) root access Execute this as root: curl https://get.docker.com | sh Test if Docker works correctly: docker run -d -p 80:80 hypriot/rpi-busybox-httpd \u2026 and point the browser of any device in the same network to http://<IP OF YOUR DEVICE>/ More info in this forum topic","title":"How to run Docker? (outdated)"},{"location":"User-Guide_Advanced-Features/#how-to-set-wireless-access-point","text":"There are two different HostAP daemons. One is default and the other one is for some Realtek wifi cards. Both have their own basic configurations and both are patched to gain maximum performances. Sources: https://github.com/igorpecovnik/hostapd Default binary and configuration location: /usr/sbin/hostapd /etc/hostapd.conf Realtek binary and configuration location: /usr/sbin/hostapd-rt /etc/hostapd.conf-rt Since its hard to define when to use which you always try both combinations in case of troubles. To start AP automatically: Edit /etc/init.d/hostapd and add/alter location of your conf file DAEMON_CONF=/etc/hostapd.conf and binary DAEMON_SBIN=/usr/sbin/hostapd Copy /etc/network/interfaces.hostapd to /etc/network/interfaces Reboot Predefined network name: \u201cBOARD NAME\u201d password: 12345678 To change parameters, edit /etc/hostapd.conf BTW: You can get WPAPSK the long blob from wpa_passphrase YOURNAME YOURPASS","title":"How to set wireless access point?"},{"location":"User-Guide_Advanced-Features/#how-to-connect-ir-remote","text":"Required conditions: IR hardware loaded driver Get your remote configuration (lircd.conf) or learn . You are going to need the list of all possible commands which you can map to your IR remote keys: irrecord --list-namespace To start with learning process you need to delete old config: rm /etc/lircd.conf Than start the process with: irrecord --driver=default --device=/dev/lirc0 /etc/lircd.conf And finally start your service when done with learning: service lirc start Test your remote: irw /dev/lircd","title":"How to connect IR remote?"},{"location":"User-Guide_Allwinner_overlays/","text":"Device Tree overlays \u00b6 Most in-circuit and GPIO based interfaces (SPI, I2C, I2S, UART, \u2026) don\u2019t have a mechanism for detecting and identifying devices connected to the bus, so Linux kernel has to be told explicitly about the device and its configuration details. While Device Tree is a way of describing hardware configuration to the kernel, Device Tree overlays are a way for modifying the DT in order to provide the kernel and kernel drivers with details about external devices or to activate interfaces disabled by default. Note: from the Linux kernel maintainer perspective all unused in-circuit type interfaces that use GPIO pins should be disabled by default and all pins on pin headers or soldering pads will be configured as standard GPIOs. Note: from the Linux kernel maintainer perspective all dedicated interfaces like USB, Ethernet or analog audio that are wired to soldering pads or a pin headers instead of specialized sockets (like USB socket, Ethernet socket or 3.5mm jack) will be left disabled by default. Armbian specific notes \u00b6 DT overlays are a Work-in-Progress (WIP) feature, present only in fresh images starting with 5.30 , nightly and user made images For older images (even upgraded to 5.30 or later) manual update of the u-boot and the boot script is required Currently implemented only for sunxi based devices that use mainline u-boot and kernel Please note that different SoCs will have different sets of available overlays. Quick start \u00b6 Check the README.<soc-id>-overlays in /boot/dtb/overlay/ (32-bit SoCs) or /boot/dtb/allwinner/overlay/ (64-bit SoCs) for a list of provided overlays, their required and optional parameters Add names of overlays you want to activate to overlays= line in /boot/armbianEnv.txt , separated with spaces Add required parameters with their values to /boot/armbianEnv.txt , one per line Add optional parameters with their values to /boot/armbianEnv.txt if you want to change the default value, one per line If you didn\u2019t find the required overlay or want to change one of provided overlays, refer to \u201cUsing custom overlays\u201d section Reboot Using custom overlays \u00b6 Check here for some example overlays Copy or create your overlay file (with .dts extension) on the device Change I2C or SPI bus number, GPIO and pinctrl pins, compatible string to match your SoC if necessary Compile and activate the overlay by running armbian-add-overlay <overlay_file.dts> as root, i.e. sudo armbian-add-overlay sht15.dts Reboot armbianEnv.txt entries reference \u00b6 overlay_prefix - prefix for the DT and overlay file names, set at OS image creation time overlays - list of overlays to activate from kernel directory user_overlays - list of overlays to activate from /boot/overlay-user/ directory param_* - overlay parameters Kernel provided vs user provided overlays \u00b6 Overlays can be loaded from 2 locations: /boot/dtb/overlay/ ( /boot/dtb/allwinner/overlay/ for 64-bit SoCs) - kernel provided overlays /boot/overlay-user/ - user provided overlays Main differences between these locations: Kernel provided overlays are updated with the kernel packages, any changes to this directory (including new files) will be lost on kernel upgrade Kernel provided directory may contain overlays for different SoCs, so overlay file name pattern will be <prefix>-<name> , for example sun8i-h3-i2c0.dtbo , where sun8i-h3 is the prefix and i2c0 is the name Kernel provided overlays are activated by the overlay name (i.e. i2c0 ), and the prefix is set at OS image creation time User provided overlays directory is empty by default and is meant for storing and using user created overlays that are not present in the kernel packages or modified stock overlays User provided overlays are activated by the file name (excluding the extension), i.e. for file adafruit13m.dtbo overlay name would be adafruit13m Activation \u00b6 DT overlays are activated by editing u-boot environment file /boot/armbianEnv.txt Kernel provided overlays are activated by adding a name to the overlays variable User provided overlays are activated by adding a name to the user_overlays variable No more than one overlays line and one user_overlays line can be present in the environment file Multiple names should be separated by space If activated overlays have parameters marked as \u201cRequired\u201d, those parameters have to be set to proper values Reboot is required for any changes to take effect Overlay parameters \u00b6 Some overlays have additional parameters that can be set. Parameters marked as \u201cRequired\u201d have to be set if overlay with these parameters is activated, other parameters are not mandatory if default value is suitable. Parameters are set by adding their name and value to /boot/armbianEnv.txt , each parameter should be added on a new line. Please refer to README.<SoC_prefix>-overlays files in /boot/dtb/overlay/ ( /boot/dtb/allwinner/overlay/ for 64-bit SoCs) directory for supported parameters, i.e. README.sun8i-h3-overlays for H3 based boards. Parameters of type pin require special format: Value consists of a letter P , a letter that signifies the pin bank and a number of the pin in the bank Letters should be upper case Numbers should not contain leading zeros Examples: good - PA9 , PG12 ; bad - pa2 , PG08 Overlay bus selection \u00b6 SoCs may contain multiple bus controllers of the same type, i.e. Allwinner H3 contains 2 SPI controllers and Allwinner A20 contains 4 SPI controllers. Please refer to your board documentation and schematic to determine what pins are wired to the pin headers and thus what bus number should be used in each case. Overlay pinmux conflicts \u00b6 Some controllers may share the SoC pins in some configurations. For example on Allwinner H3 UART 3 and SPI 1 use the same pins - PA13 , PA14 , PA15 , PA16 . In this case activating both UART 3 and SPI 1 would result in a conflict, and on practice only one interface (either SPI or UART) will be accessible on these pins. Please check the SoC specific README, board schematic, SoC datasheet or other documentation if you are unsure about possible conflicts if activating multiple overlays for the controllers that use shared (muxed) pins. Overlay device endpoint conflicts \u00b6 Overlays for devices that use addresses or similar mechanisms (i.e. SPI chip selects) can\u2019t be activated simultaneously if addresses (chip selects) are identical. For example A20 SPI controller 1 has only one hardware chip select, so spi-spidev and spi-jedec-nor overlays cannot be activated both if they would use the same bus number and chip select. Overlay compatibility \u00b6 Device Tree overlays for different platforms and SoCs are not directly compatible. This, for example, means that overlays for H3 may need some changes to work on A20, and that Raspberry Pi overlays will need adjustments in order to be used on Allwinner based boards. Rework may include changing labels, references (phandles) and pinconf bindings. Notes regarding SPI and I2S overlays \u00b6 Activating a device on SPI or I2S bus may require more than one overlay. In case a bus overlay like spi0 or i2s0 exist for the target SoC they need to be activated in addition to a slave device overlay (provided or custom/user-made). Please note that these overlays ( spi0 , i2s0 ) do not enable any slave devices (like spidev or I2S codec). Debugging \u00b6 As overlays and overlay parameters are applied by the u-boot, it is impossible to get any debugging information (such as error messages) from the OS. Serial console on UART 0 is required to debug DT overlay related problems. Example /boot/armbianEnv.txt contents: \u00b6 verbosity=1 console=serial overlay_prefix=sun8i-h3 rootdev=UUID=bd0ded76-1188-4b52-a20a-64f326c1f193 rootfstype=ext4 overlays=w1-gpio uart1 i2c0 spi-spidev param_w1_pin=PA20 param_w1_pin_int_pullup=1 param_uart1_rtscts=1 param_spidev_spi_bus=0 Example of serial console log when using several overlays: \u00b6 ## Executing script at 43100000 U-boot loaded from SD Boot script loaded from mmc 265 bytes read in 182 ms (1000 Bytes/s) 5074230 bytes read in 532 ms (9.1 MiB/s) 5702664 bytes read in 579 ms (9.4 MiB/s) Found mainline kernel configuration 32724 bytes read in 269 ms (118.2 KiB/s) 882 bytes read in 277 ms (2.9 KiB/s) Applying kernel provided DT overlay sun8i-h3-w1-gpio.dtbo 506 bytes read in 326 ms (1000 Bytes/s) Applying kernel provided DT overlay sun8i-h3-uart1.dtbo 374 bytes read in 377 ms (0 Bytes/s) Applying kernel provided DT overlay sun8i-h3-i2c0.dtbo 788 bytes read in 347 ms (2 KiB/s) Applying kernel provided DT overlay sun8i-h3-spi-spidev.dtbo 4327 bytes read in 268 ms (15.6 KiB/s) Applying kernel provided DT fixup script (sun8i-h3-fixup.scr) ## Executing script at 44000000 tmp_bank=A tmp_pin=20 ## Loading init Ramdisk from Legacy Image at 43300000 ... Image Name: uInitrd Image Type: ARM Linux RAMDisk Image (gzip compressed) Data Size: 5074166 Bytes = 4.8 MiB Load Address: 00000000 Entry Point: 00000000 Verifying Checksum ... OK ## Flattened Device Tree blob at 43000000 Booting using the fdt blob at 0x43000000 reserving fdt memory region: addr=43000000 size=9000 Loading Ramdisk to 49b29000, end 49fffcf6 ... OK Loading Device Tree to 49b1d000, end 49b28fff ... OK Starting kernel ...","title":"Allwinner DT overlays"},{"location":"User-Guide_Allwinner_overlays/#device-tree-overlays","text":"Most in-circuit and GPIO based interfaces (SPI, I2C, I2S, UART, \u2026) don\u2019t have a mechanism for detecting and identifying devices connected to the bus, so Linux kernel has to be told explicitly about the device and its configuration details. While Device Tree is a way of describing hardware configuration to the kernel, Device Tree overlays are a way for modifying the DT in order to provide the kernel and kernel drivers with details about external devices or to activate interfaces disabled by default. Note: from the Linux kernel maintainer perspective all unused in-circuit type interfaces that use GPIO pins should be disabled by default and all pins on pin headers or soldering pads will be configured as standard GPIOs. Note: from the Linux kernel maintainer perspective all dedicated interfaces like USB, Ethernet or analog audio that are wired to soldering pads or a pin headers instead of specialized sockets (like USB socket, Ethernet socket or 3.5mm jack) will be left disabled by default.","title":"Device Tree overlays"},{"location":"User-Guide_Allwinner_overlays/#armbian-specific-notes","text":"DT overlays are a Work-in-Progress (WIP) feature, present only in fresh images starting with 5.30 , nightly and user made images For older images (even upgraded to 5.30 or later) manual update of the u-boot and the boot script is required Currently implemented only for sunxi based devices that use mainline u-boot and kernel Please note that different SoCs will have different sets of available overlays.","title":"Armbian specific notes"},{"location":"User-Guide_Allwinner_overlays/#quick-start","text":"Check the README.<soc-id>-overlays in /boot/dtb/overlay/ (32-bit SoCs) or /boot/dtb/allwinner/overlay/ (64-bit SoCs) for a list of provided overlays, their required and optional parameters Add names of overlays you want to activate to overlays= line in /boot/armbianEnv.txt , separated with spaces Add required parameters with their values to /boot/armbianEnv.txt , one per line Add optional parameters with their values to /boot/armbianEnv.txt if you want to change the default value, one per line If you didn\u2019t find the required overlay or want to change one of provided overlays, refer to \u201cUsing custom overlays\u201d section Reboot","title":"Quick start"},{"location":"User-Guide_Allwinner_overlays/#using-custom-overlays","text":"Check here for some example overlays Copy or create your overlay file (with .dts extension) on the device Change I2C or SPI bus number, GPIO and pinctrl pins, compatible string to match your SoC if necessary Compile and activate the overlay by running armbian-add-overlay <overlay_file.dts> as root, i.e. sudo armbian-add-overlay sht15.dts Reboot","title":"Using custom overlays"},{"location":"User-Guide_Allwinner_overlays/#armbianenvtxt-entries-reference","text":"overlay_prefix - prefix for the DT and overlay file names, set at OS image creation time overlays - list of overlays to activate from kernel directory user_overlays - list of overlays to activate from /boot/overlay-user/ directory param_* - overlay parameters","title":"armbianEnv.txt entries reference"},{"location":"User-Guide_Allwinner_overlays/#kernel-provided-vs-user-provided-overlays","text":"Overlays can be loaded from 2 locations: /boot/dtb/overlay/ ( /boot/dtb/allwinner/overlay/ for 64-bit SoCs) - kernel provided overlays /boot/overlay-user/ - user provided overlays Main differences between these locations: Kernel provided overlays are updated with the kernel packages, any changes to this directory (including new files) will be lost on kernel upgrade Kernel provided directory may contain overlays for different SoCs, so overlay file name pattern will be <prefix>-<name> , for example sun8i-h3-i2c0.dtbo , where sun8i-h3 is the prefix and i2c0 is the name Kernel provided overlays are activated by the overlay name (i.e. i2c0 ), and the prefix is set at OS image creation time User provided overlays directory is empty by default and is meant for storing and using user created overlays that are not present in the kernel packages or modified stock overlays User provided overlays are activated by the file name (excluding the extension), i.e. for file adafruit13m.dtbo overlay name would be adafruit13m","title":"Kernel provided vs user provided overlays"},{"location":"User-Guide_Allwinner_overlays/#activation","text":"DT overlays are activated by editing u-boot environment file /boot/armbianEnv.txt Kernel provided overlays are activated by adding a name to the overlays variable User provided overlays are activated by adding a name to the user_overlays variable No more than one overlays line and one user_overlays line can be present in the environment file Multiple names should be separated by space If activated overlays have parameters marked as \u201cRequired\u201d, those parameters have to be set to proper values Reboot is required for any changes to take effect","title":"Activation"},{"location":"User-Guide_Allwinner_overlays/#overlay-parameters","text":"Some overlays have additional parameters that can be set. Parameters marked as \u201cRequired\u201d have to be set if overlay with these parameters is activated, other parameters are not mandatory if default value is suitable. Parameters are set by adding their name and value to /boot/armbianEnv.txt , each parameter should be added on a new line. Please refer to README.<SoC_prefix>-overlays files in /boot/dtb/overlay/ ( /boot/dtb/allwinner/overlay/ for 64-bit SoCs) directory for supported parameters, i.e. README.sun8i-h3-overlays for H3 based boards. Parameters of type pin require special format: Value consists of a letter P , a letter that signifies the pin bank and a number of the pin in the bank Letters should be upper case Numbers should not contain leading zeros Examples: good - PA9 , PG12 ; bad - pa2 , PG08","title":"Overlay parameters"},{"location":"User-Guide_Allwinner_overlays/#overlay-bus-selection","text":"SoCs may contain multiple bus controllers of the same type, i.e. Allwinner H3 contains 2 SPI controllers and Allwinner A20 contains 4 SPI controllers. Please refer to your board documentation and schematic to determine what pins are wired to the pin headers and thus what bus number should be used in each case.","title":"Overlay bus selection"},{"location":"User-Guide_Allwinner_overlays/#overlay-pinmux-conflicts","text":"Some controllers may share the SoC pins in some configurations. For example on Allwinner H3 UART 3 and SPI 1 use the same pins - PA13 , PA14 , PA15 , PA16 . In this case activating both UART 3 and SPI 1 would result in a conflict, and on practice only one interface (either SPI or UART) will be accessible on these pins. Please check the SoC specific README, board schematic, SoC datasheet or other documentation if you are unsure about possible conflicts if activating multiple overlays for the controllers that use shared (muxed) pins.","title":"Overlay pinmux conflicts"},{"location":"User-Guide_Allwinner_overlays/#overlay-device-endpoint-conflicts","text":"Overlays for devices that use addresses or similar mechanisms (i.e. SPI chip selects) can\u2019t be activated simultaneously if addresses (chip selects) are identical. For example A20 SPI controller 1 has only one hardware chip select, so spi-spidev and spi-jedec-nor overlays cannot be activated both if they would use the same bus number and chip select.","title":"Overlay device endpoint conflicts"},{"location":"User-Guide_Allwinner_overlays/#overlay-compatibility","text":"Device Tree overlays for different platforms and SoCs are not directly compatible. This, for example, means that overlays for H3 may need some changes to work on A20, and that Raspberry Pi overlays will need adjustments in order to be used on Allwinner based boards. Rework may include changing labels, references (phandles) and pinconf bindings.","title":"Overlay compatibility"},{"location":"User-Guide_Allwinner_overlays/#notes-regarding-spi-and-i2s-overlays","text":"Activating a device on SPI or I2S bus may require more than one overlay. In case a bus overlay like spi0 or i2s0 exist for the target SoC they need to be activated in addition to a slave device overlay (provided or custom/user-made). Please note that these overlays ( spi0 , i2s0 ) do not enable any slave devices (like spidev or I2S codec).","title":"Notes regarding SPI and I2S overlays"},{"location":"User-Guide_Allwinner_overlays/#debugging","text":"As overlays and overlay parameters are applied by the u-boot, it is impossible to get any debugging information (such as error messages) from the OS. Serial console on UART 0 is required to debug DT overlay related problems.","title":"Debugging"},{"location":"User-Guide_Allwinner_overlays/#example-bootarmbianenvtxt-contents","text":"verbosity=1 console=serial overlay_prefix=sun8i-h3 rootdev=UUID=bd0ded76-1188-4b52-a20a-64f326c1f193 rootfstype=ext4 overlays=w1-gpio uart1 i2c0 spi-spidev param_w1_pin=PA20 param_w1_pin_int_pullup=1 param_uart1_rtscts=1 param_spidev_spi_bus=0","title":"Example /boot/armbianEnv.txt contents:"},{"location":"User-Guide_Allwinner_overlays/#example-of-serial-console-log-when-using-several-overlays","text":"## Executing script at 43100000 U-boot loaded from SD Boot script loaded from mmc 265 bytes read in 182 ms (1000 Bytes/s) 5074230 bytes read in 532 ms (9.1 MiB/s) 5702664 bytes read in 579 ms (9.4 MiB/s) Found mainline kernel configuration 32724 bytes read in 269 ms (118.2 KiB/s) 882 bytes read in 277 ms (2.9 KiB/s) Applying kernel provided DT overlay sun8i-h3-w1-gpio.dtbo 506 bytes read in 326 ms (1000 Bytes/s) Applying kernel provided DT overlay sun8i-h3-uart1.dtbo 374 bytes read in 377 ms (0 Bytes/s) Applying kernel provided DT overlay sun8i-h3-i2c0.dtbo 788 bytes read in 347 ms (2 KiB/s) Applying kernel provided DT overlay sun8i-h3-spi-spidev.dtbo 4327 bytes read in 268 ms (15.6 KiB/s) Applying kernel provided DT fixup script (sun8i-h3-fixup.scr) ## Executing script at 44000000 tmp_bank=A tmp_pin=20 ## Loading init Ramdisk from Legacy Image at 43300000 ... Image Name: uInitrd Image Type: ARM Linux RAMDisk Image (gzip compressed) Data Size: 5074166 Bytes = 4.8 MiB Load Address: 00000000 Entry Point: 00000000 Verifying Checksum ... OK ## Flattened Device Tree blob at 43000000 Booting using the fdt blob at 0x43000000 reserving fdt memory region: addr=43000000 size=9000 Loading Ramdisk to 49b29000, end 49fffcf6 ... OK Loading Device Tree to 49b1d000, end 49b28fff ... OK Starting kernel ...","title":"Example of serial console log when using several overlays:"},{"location":"User-Guide_Armbian-Config/","text":"Armbian configuration utility \u00b6 Is a base utility for configuring your board, divided into four main sections: S ystem - system and security settings, N etwork - wired, wireless, Bluetooth, access point, P ersonal - timezone, language, hostname, S oftware - system and 3rd party software install. The tool needs root privileges to work and can be launched by entering sudo armbian-config at the terminal prompt or by clicking to the armbian-config menu item on desktop images. System \u00b6 I nstall - installs to SATA, eMMC, NAND or USB. It gives you an option to install the system to more resilient and faster internal or external media. You can also change filesystem type to ext2,3,4 or BTRFS (if supported), F reeze - freeze or unfreeze kernel and board support packages, to avoid upgrading, N ightly - switch between nightly automated beta and stable builds, B ootenv - edit boot environment and alter kernel boot parameters, H ardware - toggle board low level functions: UART, I2C, SPI, \u2026 S witch - switch to/between alternative kernels: legacy, current, dev S SH - reconfigure SSH dameon. Permit root login, toggle ssh key and mobile phone authetication, F irmware - execute apt update and upgrade to update your system, Z shell - toogle stock BASH and ZSH with Oh My ZSH and tmux E nable - toggle desktop on and off (on desktop images) L ightdm - change login managers from none to lightdm (on desktop images) R DP - toggle remote desktop from Windows (on desktop images) O verlayroot - toggle overlayroot (Ubuntu images) M inimal - install minimal Armbian XFCE powered desktop, D efault - install Armbian XFCE powered desktop with web browser and extras. Network \u00b6 I P - choose to select dynamic or edit static IP address, H otspot - create or manage wireless access point. If your wireless adapter is recognized by a kernel, then armbian-config utility auto selects best mode on the selected device. It can detect 802.11n, 802.11a and 802.11ac. It also knows how to handle some special Realtek adapters, I PV6 - toggle IPV6 for apt and system, I perf3 - toogle network troughput tests daemon, L TE - 3G/4G LTE modem management W iFi - manage wireless networking. Connect with Wifi network. You can create multiple wireless connections at the same time. They are managed by Network Manager, B T install - pair Bluetooth devices without PIN code, A dvanced - edit network config manually, F orget - disconnets and clear all wireless connections. Personal settings \u00b6 T imezone - change timezone, L ocales - reconfigure language and character set, K eyboard - change console keyboaard settings, H ostname - change hostname, M irror - change to backup APT repository mirror in case of troubles, W elcome - toggle welcome screen items. Software \u00b6 Software installation menu provides automated install of the following packages. s ofty TV headend (IPTV server) Syncthing (personal cloud) SoftEther VPN server (VPN server) Plex (Plex media server) Radarr (Movie downloading server) Sonarr (TV shows downloading server) Transmission (torrent server) ISPConfig (WEB & MAIL server) NCP (Nextcloud personal cloud) Openmediavault NAS (NAS server) PI hole (ad blocker) UrBackup (client/server backup system) Docker (Docker CE engine) Mayan EDMS (Document management system within Docker) MiniDLNA (media sharing) M onitor = simple CLI monitoring D iagnostics = create a summary of logs and upload them to paste.bin T oggle kernel headers, RDP service, Thunderbird and Libreoffice (desktop builds) Sources \u00b6 https://github.com/armbian/config","title":"Armbian config"},{"location":"User-Guide_Armbian-Config/#armbian-configuration-utility","text":"Is a base utility for configuring your board, divided into four main sections: S ystem - system and security settings, N etwork - wired, wireless, Bluetooth, access point, P ersonal - timezone, language, hostname, S oftware - system and 3rd party software install. The tool needs root privileges to work and can be launched by entering sudo armbian-config at the terminal prompt or by clicking to the armbian-config menu item on desktop images.","title":"Armbian configuration utility"},{"location":"User-Guide_Armbian-Config/#system","text":"I nstall - installs to SATA, eMMC, NAND or USB. It gives you an option to install the system to more resilient and faster internal or external media. You can also change filesystem type to ext2,3,4 or BTRFS (if supported), F reeze - freeze or unfreeze kernel and board support packages, to avoid upgrading, N ightly - switch between nightly automated beta and stable builds, B ootenv - edit boot environment and alter kernel boot parameters, H ardware - toggle board low level functions: UART, I2C, SPI, \u2026 S witch - switch to/between alternative kernels: legacy, current, dev S SH - reconfigure SSH dameon. Permit root login, toggle ssh key and mobile phone authetication, F irmware - execute apt update and upgrade to update your system, Z shell - toogle stock BASH and ZSH with Oh My ZSH and tmux E nable - toggle desktop on and off (on desktop images) L ightdm - change login managers from none to lightdm (on desktop images) R DP - toggle remote desktop from Windows (on desktop images) O verlayroot - toggle overlayroot (Ubuntu images) M inimal - install minimal Armbian XFCE powered desktop, D efault - install Armbian XFCE powered desktop with web browser and extras.","title":"System"},{"location":"User-Guide_Armbian-Config/#network","text":"I P - choose to select dynamic or edit static IP address, H otspot - create or manage wireless access point. If your wireless adapter is recognized by a kernel, then armbian-config utility auto selects best mode on the selected device. It can detect 802.11n, 802.11a and 802.11ac. It also knows how to handle some special Realtek adapters, I PV6 - toggle IPV6 for apt and system, I perf3 - toogle network troughput tests daemon, L TE - 3G/4G LTE modem management W iFi - manage wireless networking. Connect with Wifi network. You can create multiple wireless connections at the same time. They are managed by Network Manager, B T install - pair Bluetooth devices without PIN code, A dvanced - edit network config manually, F orget - disconnets and clear all wireless connections.","title":"Network"},{"location":"User-Guide_Armbian-Config/#personal-settings","text":"T imezone - change timezone, L ocales - reconfigure language and character set, K eyboard - change console keyboaard settings, H ostname - change hostname, M irror - change to backup APT repository mirror in case of troubles, W elcome - toggle welcome screen items.","title":"Personal settings"},{"location":"User-Guide_Armbian-Config/#software","text":"Software installation menu provides automated install of the following packages. s ofty TV headend (IPTV server) Syncthing (personal cloud) SoftEther VPN server (VPN server) Plex (Plex media server) Radarr (Movie downloading server) Sonarr (TV shows downloading server) Transmission (torrent server) ISPConfig (WEB & MAIL server) NCP (Nextcloud personal cloud) Openmediavault NAS (NAS server) PI hole (ad blocker) UrBackup (client/server backup system) Docker (Docker CE engine) Mayan EDMS (Document management system within Docker) MiniDLNA (media sharing) M onitor = simple CLI monitoring D iagnostics = create a summary of logs and upload them to paste.bin T oggle kernel headers, RDP service, Thunderbird and Libreoffice (desktop builds)","title":"Software"},{"location":"User-Guide_Armbian-Config/#sources","text":"https://github.com/armbian/config","title":"Sources"},{"location":"User-Guide_Basic-Troubleshooting/","text":"Hardware troubleshooting guide \u00b6 If you are experiencing at least one of these problems: board does not boot board freezes, crashes or reboots randomly or when connecting USB devices plugged in USB devices are not detected (not listed in lsusb output) error changing the root password at first boot (Authentication token manipulation error) error installing or updating packages due to read-only file system and you are using a stable Armbian image, then most likely you have one of two common problems - powering issue or SD card issue . Note that \u201cI know that my power supply is good\u201d, \u201cit worked yesterday\u201d, \u201cit works with a different device\u201d, etc. are not objective reasons to skip powering related diagnostics \u201cI know that my SD card is good\u201d, \u201cit worked yesterday\u201d, \u201cit works with a different device\u201d, etc. are not objective reasons to skip storage related diagnostics undervoltage can cause symptoms related to SD card problems such as filesystem corruptions and data loss, so powering has to be checked first Powering notes \u00b6 Most boards, even ones fitted with PMIC (power management integrated circuit) do not have any measures to react to undervoltage that could prevent instability It does not matter what voltage your power supply outputs, it matters what voltage will reach the onboard voltage regulators Peak power consumption of popular boards can vary from 0.9A at 5V (H3 based Orange Pi PC) to 1.7A at 5V (RK3288 based Tinkerboard), both without any attached peripherials like USB devices Due to the Ohm\u2019s law voltage drop due to cable and connector resistance will be proportional to the electric current, so most of the time problems will be experienced at current spikes caused by CPU load or peripherials like spinning up HDDs Power supply \u00b6 Cheap phone chargers may not provide the current listed on their label, especially for long time periods Some cheap phone chargers don\u2019t have proper feedback based stabilization, so output voltage may change depending on load Power supplies will degrade over time (especially when working 24/7) Some problems like degraded output filtering capacitors cannot be diagnosed even with a multimeter because of the non-linear voltage form Cable \u00b6 The longer and thinner the cable - the higher its resistance - the greater the voltage drop will be under load Even thick looking cable can have thin wires inside, so do not trust the outside cable diameter Connector \u00b6 MicroUSB connector is rated for the maximum current of 1.8A, but even this number cannot be guaranteed. Trying to pass larger current (even momentarily) may result in a voltage dropping below USB specifications Most of the boards can also be powered through GPIO pins. This can be used to bypass the microUSB connector and thus to improve stability SD card notes \u00b6 A SD card is a complex storage device with an embedded controller that processes read, erase and write operations, wear leveling, error and corruption detection, but it does not provide any diagnostic protocols like S.M.A.R.T. SD cards will degrade over time and may fail in the end in different ways - become completely or partially read-only or cause a silent data corruption SD card brand \u00b6 Based on current prices and performance tests done by Armbian users Samsung Evo, Samsung Evo Plus and Sandisk Ultra cards are recommended Other good alternatives may be added to this page in the future SD card size and speed class \u00b6 SD card speed class and size does not influence the reliability directly, but larger size means larger amount of lifetime data written, even if you are using 10-20% of the cards space Writing images to the SD card \u00b6 If you wrote an image to the card it does not mean that it was written successfully without any errors so always verify images after write using some tools like balenaEtcher which is currently the only popular and cross-platform tool that does mandatory verify on write (more lightweight alternatives may be added to this page in the future) \u201cCheck for bad blocks\u201d function available in some tools is mostly useless when dealing with SD cards Note that balenaEtcher verifies only 1-2GB that are occupied by the initial unresized image, it does not verify the whole SD card","title":"Troubleshooting"},{"location":"User-Guide_Basic-Troubleshooting/#hardware-troubleshooting-guide","text":"If you are experiencing at least one of these problems: board does not boot board freezes, crashes or reboots randomly or when connecting USB devices plugged in USB devices are not detected (not listed in lsusb output) error changing the root password at first boot (Authentication token manipulation error) error installing or updating packages due to read-only file system and you are using a stable Armbian image, then most likely you have one of two common problems - powering issue or SD card issue . Note that \u201cI know that my power supply is good\u201d, \u201cit worked yesterday\u201d, \u201cit works with a different device\u201d, etc. are not objective reasons to skip powering related diagnostics \u201cI know that my SD card is good\u201d, \u201cit worked yesterday\u201d, \u201cit works with a different device\u201d, etc. are not objective reasons to skip storage related diagnostics undervoltage can cause symptoms related to SD card problems such as filesystem corruptions and data loss, so powering has to be checked first","title":"Hardware troubleshooting guide"},{"location":"User-Guide_Basic-Troubleshooting/#powering-notes","text":"Most boards, even ones fitted with PMIC (power management integrated circuit) do not have any measures to react to undervoltage that could prevent instability It does not matter what voltage your power supply outputs, it matters what voltage will reach the onboard voltage regulators Peak power consumption of popular boards can vary from 0.9A at 5V (H3 based Orange Pi PC) to 1.7A at 5V (RK3288 based Tinkerboard), both without any attached peripherials like USB devices Due to the Ohm\u2019s law voltage drop due to cable and connector resistance will be proportional to the electric current, so most of the time problems will be experienced at current spikes caused by CPU load or peripherials like spinning up HDDs","title":"Powering notes"},{"location":"User-Guide_Basic-Troubleshooting/#power-supply","text":"Cheap phone chargers may not provide the current listed on their label, especially for long time periods Some cheap phone chargers don\u2019t have proper feedback based stabilization, so output voltage may change depending on load Power supplies will degrade over time (especially when working 24/7) Some problems like degraded output filtering capacitors cannot be diagnosed even with a multimeter because of the non-linear voltage form","title":"Power supply"},{"location":"User-Guide_Basic-Troubleshooting/#cable","text":"The longer and thinner the cable - the higher its resistance - the greater the voltage drop will be under load Even thick looking cable can have thin wires inside, so do not trust the outside cable diameter","title":"Cable"},{"location":"User-Guide_Basic-Troubleshooting/#connector","text":"MicroUSB connector is rated for the maximum current of 1.8A, but even this number cannot be guaranteed. Trying to pass larger current (even momentarily) may result in a voltage dropping below USB specifications Most of the boards can also be powered through GPIO pins. This can be used to bypass the microUSB connector and thus to improve stability","title":"Connector"},{"location":"User-Guide_Basic-Troubleshooting/#sd-card-notes","text":"A SD card is a complex storage device with an embedded controller that processes read, erase and write operations, wear leveling, error and corruption detection, but it does not provide any diagnostic protocols like S.M.A.R.T. SD cards will degrade over time and may fail in the end in different ways - become completely or partially read-only or cause a silent data corruption","title":"SD card notes"},{"location":"User-Guide_Basic-Troubleshooting/#sd-card-brand","text":"Based on current prices and performance tests done by Armbian users Samsung Evo, Samsung Evo Plus and Sandisk Ultra cards are recommended Other good alternatives may be added to this page in the future","title":"SD card brand"},{"location":"User-Guide_Basic-Troubleshooting/#sd-card-size-and-speed-class","text":"SD card speed class and size does not influence the reliability directly, but larger size means larger amount of lifetime data written, even if you are using 10-20% of the cards space","title":"SD card size and speed class"},{"location":"User-Guide_Basic-Troubleshooting/#writing-images-to-the-sd-card","text":"If you wrote an image to the card it does not mean that it was written successfully without any errors so always verify images after write using some tools like balenaEtcher which is currently the only popular and cross-platform tool that does mandatory verify on write (more lightweight alternatives may be added to this page in the future) \u201cCheck for bad blocks\u201d function available in some tools is mostly useless when dealing with SD cards Note that balenaEtcher verifies only 1-2GB that are occupied by the initial unresized image, it does not verify the whole SD card","title":"Writing images to the SD card"},{"location":"User-Guide_Fine-Tuning/","text":"How to customize keyboard, time zone? \u00b6 Attention: \u00b6 The preferred method to change most of this stuff is by using the interactive armbian-config tool which is shipped with all Armbian images. Keyboard: \u00b6 dpkg-reconfigure keyboard-configuration System language: \u00b6 # Debian --> https://wiki.debian.org/ChangeLanguage dpkg-reconfigure locales # Ubuntu --> https://help.ubuntu.com/community/Locale update-locale LANG=[options] && dpkg-reconfigure locales Console font, codepage: \u00b6 dpkg-reconfigure console-setup Time zone: \u00b6 dpkg-reconfigure tzdata Screen resolution on other boards: \u00b6 nano /boot/boot.cmd # example: # change example from # disp.screen0_output_mode=1920x1080p60 # to # disp.screen0_output_mode=1280x720p60 mkimage -C none -A arm -T script -d /boot/boot.cmd /boot/boot.scr Screen resolution within Xorg Thx @maxlinux2000 \u00b6 Find matching HDMI output: xrandr --listmonitors Calculate VESA CVT mode lines (example for 1440x900) cvt 1440 900 Sample output: 1440x900 59.89 Hz (CVT 1.30MA) hsync: 55.93 kHz; pclk: 106.50 MHz Modeline \"1440x900_60.00\" 106.50 1440 1528 1672 1904 900 903 909 934 -hsync +vsync ) Create new mode (example): xrandr --newmode \"1440x900_60.00\" 106.50 1440 1528 1672 1904 900 903 909 934 -hsync +vsync Add resolution (example): xrandr --addmode HDMI-1 1440x900_60.00 Set current resolution (example): xrandr --output HDMI-1 --mode 1440x900_60.00 If it works as expected add it to Xorg by editing /etc/X11/xorg.conf.d/40-monitor.conf add (example) Section \"Monitor\" Identifier \"HDMI-1\" Modeline \"1440x900_60.00\" 106.50 1440 1528 1672 1904 900 903 909 934 -hsync +vsync Option \"PreferredMode\" \"1440x900\" EndSection Restart Xorg or reboot How to alter CPU frequency? \u00b6 Some boards allow to adjust CPU speed nano /etc/default/cpufrequtils Alter min_speed or max_speed variable. service cpufrequtils restart How to downgrade a package via apt? \u00b6 This is useful when you need to fall back to previous kernel version. apt install linux-image-sun8i=5.13 This example is for H3 legacy kernel. Check this page for others. How to toggle boot output? \u00b6 Edit and change boot parameters in /boot/boot.cmd (not recommended) or variables in /boot/armbianEnv.txt : - console=both + console=serial Recompile boot.cmd to boot.scr if it was changed: mkimage -C none -A arm -T script -d /boot/boot.cmd /boot/boot.scr Reboot. Serial console on imx6 boards are ttymxc0 (Hummingboard, Cubox-i) or ttymxc1 (Udoo). How to toggle verbose boot? \u00b6 Using Armbian 5.05 to 5.20 you would need to touch/rm /boot/.force-verbose to increase boot verbosity. With more recent Armbian builds you would have to alter the verbosity= line in /boot/armbianEnv.txt (defaults to 1 which means less verbose, maximum value is 7). How to provide boot logs for inspection? \u00b6 When your SBC behaves strange first step is to check power supply and integrity of boot media ( armbianmonitor -c \"$HOME\" ). Then look into your kernel logs. We made a tool that grabs info and pastes it to an online pasteboard service. Please increase boot verbosity as shown above ( verbosity=7 ), reboot and then run sudo armbianmonitor -u Copy and past URL of your log to the forum, mail, \u2026 How to change network configuration? \u00b6 To get Wi-Fi working simply use nmtui , a simple console based UI for network-manager (an example how to set up an AP with network-manager can be found here ). To deal with different Ethernet/Wi-Fi combinations there are six predefined configurations available, you can find them in those files: /etc/network/interfaces.bonding /etc/network/interfaces.default /etc/network/interfaces.hostapd /etc/network/interfaces.network-manager /etc/network/interfaces.r1 /etc/network/interfaces.r1switch By default /etc/network/interfaces is a copy of /etc/network/interfaces.default BONDING: your network adapters are bonded in fail safe / \u201cnotebook\u201d way. DEFAULT: your network adapters are connected classical way. HOSTAPD: your network adapters are bridged together and bridge is connected to the network. This allows you to have your AP connected directly to your router. All interfaces are handled by network-manager ( nmtui / nmcli or using the GUI) Router configuration for Lamobo R1 / Banana R1. Switch configuration for Lamobo R1 / Banana R1. You can switch configuration with copying. cd /etc/network cp interfaces.x interfaces (x = default,hostapd,bonding,r1) Then check / alter your interfaces: nano /etc/network/interfaces","title":"Fine Tuning"},{"location":"User-Guide_Fine-Tuning/#how-to-customize-keyboard-time-zone","text":"","title":"How to customize keyboard, time zone?"},{"location":"User-Guide_Fine-Tuning/#attention","text":"The preferred method to change most of this stuff is by using the interactive armbian-config tool which is shipped with all Armbian images.","title":"Attention:"},{"location":"User-Guide_Fine-Tuning/#keyboard","text":"dpkg-reconfigure keyboard-configuration","title":"Keyboard:"},{"location":"User-Guide_Fine-Tuning/#system-language","text":"# Debian --> https://wiki.debian.org/ChangeLanguage dpkg-reconfigure locales # Ubuntu --> https://help.ubuntu.com/community/Locale update-locale LANG=[options] && dpkg-reconfigure locales","title":"System language:"},{"location":"User-Guide_Fine-Tuning/#console-font-codepage","text":"dpkg-reconfigure console-setup","title":"Console font, codepage:"},{"location":"User-Guide_Fine-Tuning/#time-zone","text":"dpkg-reconfigure tzdata","title":"Time zone:"},{"location":"User-Guide_Fine-Tuning/#screen-resolution-on-other-boards","text":"nano /boot/boot.cmd # example: # change example from # disp.screen0_output_mode=1920x1080p60 # to # disp.screen0_output_mode=1280x720p60 mkimage -C none -A arm -T script -d /boot/boot.cmd /boot/boot.scr","title":"Screen resolution on other boards:"},{"location":"User-Guide_Fine-Tuning/#screen-resolution-within-xorg-thx-maxlinux2000","text":"Find matching HDMI output: xrandr --listmonitors Calculate VESA CVT mode lines (example for 1440x900) cvt 1440 900 Sample output: 1440x900 59.89 Hz (CVT 1.30MA) hsync: 55.93 kHz; pclk: 106.50 MHz Modeline \"1440x900_60.00\" 106.50 1440 1528 1672 1904 900 903 909 934 -hsync +vsync ) Create new mode (example): xrandr --newmode \"1440x900_60.00\" 106.50 1440 1528 1672 1904 900 903 909 934 -hsync +vsync Add resolution (example): xrandr --addmode HDMI-1 1440x900_60.00 Set current resolution (example): xrandr --output HDMI-1 --mode 1440x900_60.00 If it works as expected add it to Xorg by editing /etc/X11/xorg.conf.d/40-monitor.conf add (example) Section \"Monitor\" Identifier \"HDMI-1\" Modeline \"1440x900_60.00\" 106.50 1440 1528 1672 1904 900 903 909 934 -hsync +vsync Option \"PreferredMode\" \"1440x900\" EndSection Restart Xorg or reboot","title":"Screen resolution within Xorg Thx @maxlinux2000"},{"location":"User-Guide_Fine-Tuning/#how-to-alter-cpu-frequency","text":"Some boards allow to adjust CPU speed nano /etc/default/cpufrequtils Alter min_speed or max_speed variable. service cpufrequtils restart","title":"How to alter CPU frequency?"},{"location":"User-Guide_Fine-Tuning/#how-to-downgrade-a-package-via-apt","text":"This is useful when you need to fall back to previous kernel version. apt install linux-image-sun8i=5.13 This example is for H3 legacy kernel. Check this page for others.","title":"How to downgrade a package via apt?"},{"location":"User-Guide_Fine-Tuning/#how-to-toggle-boot-output","text":"Edit and change boot parameters in /boot/boot.cmd (not recommended) or variables in /boot/armbianEnv.txt : - console=both + console=serial Recompile boot.cmd to boot.scr if it was changed: mkimage -C none -A arm -T script -d /boot/boot.cmd /boot/boot.scr Reboot. Serial console on imx6 boards are ttymxc0 (Hummingboard, Cubox-i) or ttymxc1 (Udoo).","title":"How to toggle boot output?"},{"location":"User-Guide_Fine-Tuning/#how-to-toggle-verbose-boot","text":"Using Armbian 5.05 to 5.20 you would need to touch/rm /boot/.force-verbose to increase boot verbosity. With more recent Armbian builds you would have to alter the verbosity= line in /boot/armbianEnv.txt (defaults to 1 which means less verbose, maximum value is 7).","title":"How to toggle verbose boot?"},{"location":"User-Guide_Fine-Tuning/#how-to-provide-boot-logs-for-inspection","text":"When your SBC behaves strange first step is to check power supply and integrity of boot media ( armbianmonitor -c \"$HOME\" ). Then look into your kernel logs. We made a tool that grabs info and pastes it to an online pasteboard service. Please increase boot verbosity as shown above ( verbosity=7 ), reboot and then run sudo armbianmonitor -u Copy and past URL of your log to the forum, mail, \u2026","title":"How to provide boot logs for inspection?"},{"location":"User-Guide_Fine-Tuning/#how-to-change-network-configuration","text":"To get Wi-Fi working simply use nmtui , a simple console based UI for network-manager (an example how to set up an AP with network-manager can be found here ). To deal with different Ethernet/Wi-Fi combinations there are six predefined configurations available, you can find them in those files: /etc/network/interfaces.bonding /etc/network/interfaces.default /etc/network/interfaces.hostapd /etc/network/interfaces.network-manager /etc/network/interfaces.r1 /etc/network/interfaces.r1switch By default /etc/network/interfaces is a copy of /etc/network/interfaces.default BONDING: your network adapters are bonded in fail safe / \u201cnotebook\u201d way. DEFAULT: your network adapters are connected classical way. HOSTAPD: your network adapters are bridged together and bridge is connected to the network. This allows you to have your AP connected directly to your router. All interfaces are handled by network-manager ( nmtui / nmcli or using the GUI) Router configuration for Lamobo R1 / Banana R1. Switch configuration for Lamobo R1 / Banana R1. You can switch configuration with copying. cd /etc/network cp interfaces.x interfaces (x = default,hostapd,bonding,r1) Then check / alter your interfaces: nano /etc/network/interfaces","title":"How to change network configuration?"},{"location":"User-Guide_Getting-Started-Download-Page/","text":"Preparation Make sure you have a good & reliable SD card and a proper power supply . The XZ-compressed should be written with an approved imaging tool capable of validating the burn. Approved Imaging Tools USBImager a lightweight cross-platform imaging tool Balena Etcher an electron / node.js based cross-platform imaging tool (may contain spyware) Boot Insert SD card into a slot and power the board. (First) boot (with DHCP) takes up to 35 seconds with a class 10 SD Card and cheapest board. Login Login as root on HDMI / serial console or via SSH and use password 1234 . You will be prompted to change this password at first login. Next you will be asked to create a normal user account that is sudo enabled (beware of default QWERTY keyboard settings at this stage).","title":"User Guide Getting Started Download Page"},{"location":"User-Guide_Getting-Started/","text":"Prerequisites for new users \u00b6 Please, make sure you have: a proper power supply according to the board manufacturer requirements (basic usage example: 5V/2A with DC Jack barrel OR thick USB cable) a reliable SD card (see below \u201cHow to prepare a SD card?\u201d) What to download? \u00b6 The download for each image consists of three separate files: An xz-compressed image file , a sha file for download verification and an asc file for image authentication. For each board we usually provide: one CLI Debian and one CLI Ubuntu based server image, one desktop Ubuntu Bionic or Debian Buster Other unsupported builds may also be available(like Debian Stretch/Bullseye Ubuntu Disco/Eoan). Some boards have different options due to their hardware specialities - router or IoT boards. Legacy or current? \u00b6 Only current kernel branch is considered fully supported and can bring up video acceleration for example. NAND support is there but is still experimental. The level of kernel support does depend on the board family. If in your specific case something does not work well, you are always free to try an image with legacy kernel included. What are testing images? \u00b6 made from stable branches not very well tested for end users What are experimental/dev images? \u00b6 made from unstable branches unstested for experienced users only Do not use testing or dev images in a productive environment. We do appreciate your constructive feedback to developers . How to check download authenticity? \u00b6 All our images are digitally signed and therefore it is possible to check their authenticity. You need to issue these commands (Linux/macOS, you might need to install dependencies first, eg. apt-get install gnupg on Debian/Ubuntu or brew install gnupg on macOS. on windows install the current simple gnupg Gnupg : # download public key from the database gpg --keyserver ha.pool.sks-keyservers.net --recv-key DF00FAF1C577104B50BF1D0093D6889F9F0E78D5 # perform verification gpg --verify Armbian_5.18_Armada_Debian_jessie_3.10.94.img.xz.asc # proper response gpg: Signature made sob 09 jan 2016 15:01:03 CET using RSA key ID 9F0E78D5 gpg: Good signature from \"Igor Pecovnik (Ljubljana, Slovenia) <igor.++++++++++++@gmail.com>\" # wrong reponse. Not genuine Armbian image! gpg: Signature made Sun 03 Jan 2016 11:46:25 AM CET using RSA key ID 9F0E78D5 gpg: BAD signature from \"Igor Pecovnik (Ljubljana, Slovenia) <igor.++++++++++++@gmail.com>\" It is safe to ignore the message WARNING: This key is not certified with a trusted signature! . How to check download integrity? \u00b6 Since it might happen that your download got somehow corrupted we integrate a checksum/hash for the image. You can compare the image\u2019s SHA-256 hash with the one contained in the sha256sum.sha file. On Windows, you can download and use the QuickHash GUI and follow the instructions in the gui. while on Linux/macOS, in the directory in which you have downloaded the files ,you would do this shasum -a 256 -c Armbian_*.img.sha Armbian_*.img.xz #good response Armbian_5.35_Clearfogpro_Debian_stretch_next_4.13.16.img: OK How to prepare a SD card? \u00b6 Important note: Make sure you use a good, reliable and fast SD card. If you encounter boot or stability troubles in over 95 percent of the time it is either insufficient power supply or related to SD card (bad card, bad card reader, something went wrong when burning the image, card too slow to boot \u2013 \u2018Class 10\u2019 highly recommended!). Armbian can simply not run on unreliable hardware so checking your SD card with either F3 or H2testw is mandatory if you run in problems. Since counterfeit SD cards are still an issue checking with F3/H2testw directly after purchase is highly recommended . Write the xz compressed image with USBImager or Etcher on all platforms since unlike other tools, either can validate burning results saving you from corrupted SD card contents . Also important: Most SD cards are only optimised for sequential reads/writes as it is common with digital cameras. This is what the speed class is about. The SD Association defined Application Performance Class as a standard for random IO performance. Application Performance Class Pictograph Miniumum Random Read Minimum Random Write Minimum Sustained (Seq. Write) Class 1 (A1) 1500 4k IOPS 500 4k IOPS 10MBytes/sec Class 2 (A2) 4000 4k IOPS 2000 4k IOPS 10MBytes/sec At the time of this writing A1 and A2 cards are only widely available from SanDisk. Armbian recommends A1 rated SD-Cards only now ( A2 rated cards need yet lacking driver support and therefore show lower overall and especially random IO performance ). For example: In case you chose an SD card that was already in use before please consider resetting it back to \u2018factory default\u2019 performance with SD Formatter before burning Armbian to it ( explanation in the forum ). Detailed information regarding \u2018factory default\u2019 SD card performance . How to boot? \u00b6 Insert SD card into a slot and power the board. (First) boot (with DHCP) takes up to two minutes with a class 10 SD card and cheapest board. How to login? \u00b6 Login as root on console (HDMI / serial) or via SSH and use password 1234 . You will be prompted to change this password at first login. You will then be asked to create a normal user account that is sudo enabled (beware of default QWERTY keyboard settings at this stage). Please use this tool , to find your board IP address. Desktop images start into desktop without asking for password. To change this add some display manager: apt-get install lightdm \u2026 or edit the contents of file: /etc/default/nodm and change the autologin user. How to update? \u00b6 apt update apt upgrade Update process can take hours in case of using cheap SD card and/or under heavy load. If the kernel was upgraded during this process you will be prompted to reboot at next login. How to update u-boot? \u00b6 First you need to update packages described in a previous \u201cHow to update\u201d step. Then run armbian-config utility, go to system settings and proceed to: \u201cInstall\u201d \u201cInstall to/update boot loader\u201d -> Install/Update the bootloader on SD/eMMC How to adjust hardware features? \u00b6 Use the Armbian configuration utility armbian-config How to install to eMMC, NAND, SATA & USB? \u00b6 Required condition: NAND: kernel 3.4.x and NAND storage pre-installed system on NAND (stock Android or other Linux) eMMC/SATA/USB: any kernel onboard eMMC storage attached SATA or USB storage Start the install script: nand-sata-install and follow the guide. You can create up to three scenarios: boot from SD, system on SATA / USB boot from eMMC / NAND, system on eMMC/NAND boot from eMMC / NAND, system on SATA / USB and you can choose the following file system options: ext2,3,4 btrfs On Allwinner devices after switching to boot from NAND or eMMC clearing the boot loader signature on the SD card is recommended: dd if=/dev/zero of=/dev/mmcblkN bs=1024 seek=8 count=1 (replace /dev/mmcblkN with the correct device node \u2013 in case you run this directly after nand-sata-install without a reboot in between then it\u2019s /dev/mmcblk0 ). When booting from eMMC to get SD cards auto-detected on Allwinner legacy images please consider changing mmc0 \u2018s sdc_detmode from 3 to 1 in the board\u2019s fex file (see here for details). How to connect to wireless? \u00b6 Required condition: a board with onboard or supported 3rd party wireless adapter on USB If you know what is your wireless SSID: nmtui-connect SSID If you do not know, you can browse and then connect nmtui-connect How to set fixed IP? \u00b6 By default your main network adapter\u2019s IP is assigned by your router DHCP server and all network interfaces are managed by NetworkManager : user@boardname:~$ nmcli con show NAME UUID TYPE DEVICE Wired connection 1 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 802-3-ethernet eth0 The conncetion can now be edited with the following: nmcli con mod \"Wired connection 1\" ipv4.addresses \"HOST_IP_ADDRESS\" ipv4.gateway \"IP_GATEWAY\" ipv4.dns \"DNS_SERVER(S)\" ipv4.dns-search \"DOMAIN_NAME\" ipv4.method \"manual\" The same changes can also be done with NetworkManagers text user interface: sudo nmtui","title":"Getting Started"},{"location":"User-Guide_Getting-Started/#prerequisites-for-new-users","text":"Please, make sure you have: a proper power supply according to the board manufacturer requirements (basic usage example: 5V/2A with DC Jack barrel OR thick USB cable) a reliable SD card (see below \u201cHow to prepare a SD card?\u201d)","title":"Prerequisites for new users"},{"location":"User-Guide_Getting-Started/#what-to-download","text":"The download for each image consists of three separate files: An xz-compressed image file , a sha file for download verification and an asc file for image authentication. For each board we usually provide: one CLI Debian and one CLI Ubuntu based server image, one desktop Ubuntu Bionic or Debian Buster Other unsupported builds may also be available(like Debian Stretch/Bullseye Ubuntu Disco/Eoan). Some boards have different options due to their hardware specialities - router or IoT boards.","title":"What to download?"},{"location":"User-Guide_Getting-Started/#legacy-or-current","text":"Only current kernel branch is considered fully supported and can bring up video acceleration for example. NAND support is there but is still experimental. The level of kernel support does depend on the board family. If in your specific case something does not work well, you are always free to try an image with legacy kernel included.","title":"Legacy or current?"},{"location":"User-Guide_Getting-Started/#what-are-testing-images","text":"made from stable branches not very well tested for end users","title":"What are testing images?"},{"location":"User-Guide_Getting-Started/#what-are-experimentaldev-images","text":"made from unstable branches unstested for experienced users only Do not use testing or dev images in a productive environment. We do appreciate your constructive feedback to developers .","title":"What are experimental/dev images?"},{"location":"User-Guide_Getting-Started/#how-to-check-download-authenticity","text":"All our images are digitally signed and therefore it is possible to check their authenticity. You need to issue these commands (Linux/macOS, you might need to install dependencies first, eg. apt-get install gnupg on Debian/Ubuntu or brew install gnupg on macOS. on windows install the current simple gnupg Gnupg : # download public key from the database gpg --keyserver ha.pool.sks-keyservers.net --recv-key DF00FAF1C577104B50BF1D0093D6889F9F0E78D5 # perform verification gpg --verify Armbian_5.18_Armada_Debian_jessie_3.10.94.img.xz.asc # proper response gpg: Signature made sob 09 jan 2016 15:01:03 CET using RSA key ID 9F0E78D5 gpg: Good signature from \"Igor Pecovnik (Ljubljana, Slovenia) <igor.++++++++++++@gmail.com>\" # wrong reponse. Not genuine Armbian image! gpg: Signature made Sun 03 Jan 2016 11:46:25 AM CET using RSA key ID 9F0E78D5 gpg: BAD signature from \"Igor Pecovnik (Ljubljana, Slovenia) <igor.++++++++++++@gmail.com>\" It is safe to ignore the message WARNING: This key is not certified with a trusted signature! .","title":"How to check download authenticity?"},{"location":"User-Guide_Getting-Started/#how-to-check-download-integrity","text":"Since it might happen that your download got somehow corrupted we integrate a checksum/hash for the image. You can compare the image\u2019s SHA-256 hash with the one contained in the sha256sum.sha file. On Windows, you can download and use the QuickHash GUI and follow the instructions in the gui. while on Linux/macOS, in the directory in which you have downloaded the files ,you would do this shasum -a 256 -c Armbian_*.img.sha Armbian_*.img.xz #good response Armbian_5.35_Clearfogpro_Debian_stretch_next_4.13.16.img: OK","title":"How to check download integrity?"},{"location":"User-Guide_Getting-Started/#how-to-prepare-a-sd-card","text":"Important note: Make sure you use a good, reliable and fast SD card. If you encounter boot or stability troubles in over 95 percent of the time it is either insufficient power supply or related to SD card (bad card, bad card reader, something went wrong when burning the image, card too slow to boot \u2013 \u2018Class 10\u2019 highly recommended!). Armbian can simply not run on unreliable hardware so checking your SD card with either F3 or H2testw is mandatory if you run in problems. Since counterfeit SD cards are still an issue checking with F3/H2testw directly after purchase is highly recommended . Write the xz compressed image with USBImager or Etcher on all platforms since unlike other tools, either can validate burning results saving you from corrupted SD card contents . Also important: Most SD cards are only optimised for sequential reads/writes as it is common with digital cameras. This is what the speed class is about. The SD Association defined Application Performance Class as a standard for random IO performance. Application Performance Class Pictograph Miniumum Random Read Minimum Random Write Minimum Sustained (Seq. Write) Class 1 (A1) 1500 4k IOPS 500 4k IOPS 10MBytes/sec Class 2 (A2) 4000 4k IOPS 2000 4k IOPS 10MBytes/sec At the time of this writing A1 and A2 cards are only widely available from SanDisk. Armbian recommends A1 rated SD-Cards only now ( A2 rated cards need yet lacking driver support and therefore show lower overall and especially random IO performance ). For example: In case you chose an SD card that was already in use before please consider resetting it back to \u2018factory default\u2019 performance with SD Formatter before burning Armbian to it ( explanation in the forum ). Detailed information regarding \u2018factory default\u2019 SD card performance .","title":"How to prepare a SD card?"},{"location":"User-Guide_Getting-Started/#how-to-boot","text":"Insert SD card into a slot and power the board. (First) boot (with DHCP) takes up to two minutes with a class 10 SD card and cheapest board.","title":"How to boot?"},{"location":"User-Guide_Getting-Started/#how-to-login","text":"Login as root on console (HDMI / serial) or via SSH and use password 1234 . You will be prompted to change this password at first login. You will then be asked to create a normal user account that is sudo enabled (beware of default QWERTY keyboard settings at this stage). Please use this tool , to find your board IP address. Desktop images start into desktop without asking for password. To change this add some display manager: apt-get install lightdm \u2026 or edit the contents of file: /etc/default/nodm and change the autologin user.","title":"How to login?"},{"location":"User-Guide_Getting-Started/#how-to-update","text":"apt update apt upgrade Update process can take hours in case of using cheap SD card and/or under heavy load. If the kernel was upgraded during this process you will be prompted to reboot at next login.","title":"How to update?"},{"location":"User-Guide_Getting-Started/#how-to-update-u-boot","text":"First you need to update packages described in a previous \u201cHow to update\u201d step. Then run armbian-config utility, go to system settings and proceed to: \u201cInstall\u201d \u201cInstall to/update boot loader\u201d -> Install/Update the bootloader on SD/eMMC","title":"How to update u-boot?"},{"location":"User-Guide_Getting-Started/#how-to-adjust-hardware-features","text":"Use the Armbian configuration utility armbian-config","title":"How to adjust hardware features?"},{"location":"User-Guide_Getting-Started/#how-to-install-to-emmc-nand-sata-usb","text":"Required condition: NAND: kernel 3.4.x and NAND storage pre-installed system on NAND (stock Android or other Linux) eMMC/SATA/USB: any kernel onboard eMMC storage attached SATA or USB storage Start the install script: nand-sata-install and follow the guide. You can create up to three scenarios: boot from SD, system on SATA / USB boot from eMMC / NAND, system on eMMC/NAND boot from eMMC / NAND, system on SATA / USB and you can choose the following file system options: ext2,3,4 btrfs On Allwinner devices after switching to boot from NAND or eMMC clearing the boot loader signature on the SD card is recommended: dd if=/dev/zero of=/dev/mmcblkN bs=1024 seek=8 count=1 (replace /dev/mmcblkN with the correct device node \u2013 in case you run this directly after nand-sata-install without a reboot in between then it\u2019s /dev/mmcblk0 ). When booting from eMMC to get SD cards auto-detected on Allwinner legacy images please consider changing mmc0 \u2018s sdc_detmode from 3 to 1 in the board\u2019s fex file (see here for details).","title":"How to install to eMMC, NAND, SATA &amp; USB?"},{"location":"User-Guide_Getting-Started/#how-to-connect-to-wireless","text":"Required condition: a board with onboard or supported 3rd party wireless adapter on USB If you know what is your wireless SSID: nmtui-connect SSID If you do not know, you can browse and then connect nmtui-connect","title":"How to connect to wireless?"},{"location":"User-Guide_Getting-Started/#how-to-set-fixed-ip","text":"By default your main network adapter\u2019s IP is assigned by your router DHCP server and all network interfaces are managed by NetworkManager : user@boardname:~$ nmcli con show NAME UUID TYPE DEVICE Wired connection 1 xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 802-3-ethernet eth0 The conncetion can now be edited with the following: nmcli con mod \"Wired connection 1\" ipv4.addresses \"HOST_IP_ADDRESS\" ipv4.gateway \"IP_GATEWAY\" ipv4.dns \"DNS_SERVER(S)\" ipv4.dns-search \"DOMAIN_NAME\" ipv4.method \"manual\" The same changes can also be done with NetworkManagers text user interface: sudo nmtui","title":"How to set fixed IP?"},{"location":"User-Guide_Migration_from_Bananian/","text":"Migration from Bananian to Armbian \u00b6 While technically possible to do an in-place upgrade/crossgrade from latest Bananian release (or similar SBC distros) to Armbian currently there exists no tool helping with this and most probably will never exist. At the bottom is explained where to find ressources that help with a manual in-place upgrade but we start with outlining the problems and our recommendations: The challenges: \u00b6 SD cards wear out after a certain amount of data being written to \u00b6 Only reasonable base for an migration to Armbian would be an updated Bananian installation (Bananian 16.04, already Debian Jessie based, Nico\u2019s 4.4 kernel). In case Bananian users are still on version 15.04 or earlier they need to upgrade to a more recent Bananian version anyway to move Bananian\u2019s base to Jessie. Such apt-get dist-upgrade tasks come with heavy write activity. Especially when planning a dist-upgrade to Stretch later this amount of random write activity on older/smaller SD cards might kill them. If the SD card is not brand new it\u2019s highly recommended to create a clone/backup first prior to every upgrade step. If the SD card is really old please be prepared that it might not survive an apt-get dist-upgrade . All hardware will die eventually \u00b6 A lot of Bananian installations today have been running 24/7 for 3 years or even longer. While these little SBC are well suited for light-weight server tasks, the hardware can\u2019t exactly be called \u2018server grade\u2019. Please keep this in mind if you\u2019re about to spend some time on a manual migration attempt that once you\u2019re done maybe your hardware will stop working few weeks/months later if it already runs +24 months. Hardware up to the task? \u00b6 The vast majority of boards Bananian runs on is based on Allwinner\u2019s dual core A20 SoC which was a nice improvement over the first single-core Raspberry Pis few years ago but is pretty slow by today\u2019s standards. An awful lot of users (us Armbians all included) were excited by A20\u2019s \u2018native SATA\u2019 capabilities few years ago just to realize after purchase when using SATA attached storage that it\u2019s awfully slow and most probably the slowest \u2018native\u2019 SATA implementation existing (please wake up if in doubt and educate yourself here , here or here . Important: combining Allwinner\u2019s crappy SATA implementation with port multipliers is always wrong ). At the time of this writing (Oct 2017) Armbian supports +25 other ARM boards that show between 2 and 6 times better CPU performance than A20 devices. +20 boards we support show better network performance (A20 Gigabit Ethernet is not fully capable of 940 Mbits/sec in both directions). +15 boards support 2GB DRAM (a few even more just recently). And if you don\u2019t need Gigabit Ethernet you can get a new and fully supported board still better suited for light-weight server tasks than any Banana Pi for as less as $11 shipping included (check this overview please). While this diversity of ARM species might be confusing the good news is: When Armbian is running on them they all behave the same. Alternatives to an in-place migration: \u00b6 Continue on same hardware but prevent SD card hassles \u00b6 Especially if you run since years off the same SD card please be prepared that it might not survive an apt-get dist-upgrade and similar upgrade/crossgrade tasks. It\u2019s strongly recommended to clone/backup your card prior to every necessary upgrade step. Since this is time consuming and just a measure to prepare for what will happen in the future anyway (your SD card failing eventually \u2013 if you\u2019re lucky immediately, if you\u2019re out of luck it will corrupt a lot of data dying slowly) a great idea is to buy a new one now . Please see our community\u2019s collection of SD card performance tests and especially the 3 links at the top dealing with reliability concerns. Once you bought a new, fast and hopefully reliable SD card, you should test it according to our documentation , then burn a fresh Armbian image on it and manually transfer data and settings from your Bananian installation. This way you preserve your current settings/data on the old Bananian SD card saving you also a lot of time/efforts to clone/backup stuff. Important note: if you\u2019re interested in NAS use cases you could also choose an OMV image from official download location (all the ARM board images are now based on Armbian, funnily even the ones for Raspberry Pi) Replacing the hardware \u00b6 If your Bananian installation has been running for years, you better think about evaluating new hardware now. As explained above, A20\u2019s SATA implementation is awfully slow compared to good SATA implementations (Espressobin, Clearfog, Helios4) or even recent USB3 solutions, also Banana Pis can not saturate Gigabit Ethernet. It\u2019s almost 2018 now and we can choose from a variety of energy efficient boards more suited for the job. My personal strategy was turning the various A20 servers into backup devices now receiving btrfs snapshots from better suited ARM servers in the meantime. New installation on new board, carefully migrating settings from Bananas, Cubietrucks or Lime boards to new server, testing, testing, testing, new installation on A20 device, setting up btrfs send|receive, testing, testing, testing, done. In-place migration tipps: \u00b6 Since there is no easy migration tool you can only rely on contents collected below https://github.com/armbian/build/issues/648 \u2013 if you read carefully through we had some hope experienced Bananian users would be volunteering in providing an in-place upgrade tool from Bananian to Armbian but unfortunately to no avail. So 6 months after the problem came to our attention we\u2019re now providing this document to help those affected taking the right decisions. Still no need to hurry, Bananian receives bug and security fixes for another 6 months so take your time and evaluate carefully which way to choose. Trivia: Anyone understanding german will enjoy Nico\u2019s refreshing Rise and Fall of Bananian Linux talk.","title":"Migration from Bananian"},{"location":"User-Guide_Migration_from_Bananian/#migration-from-bananian-to-armbian","text":"While technically possible to do an in-place upgrade/crossgrade from latest Bananian release (or similar SBC distros) to Armbian currently there exists no tool helping with this and most probably will never exist. At the bottom is explained where to find ressources that help with a manual in-place upgrade but we start with outlining the problems and our recommendations:","title":"Migration from Bananian to Armbian"},{"location":"User-Guide_Migration_from_Bananian/#the-challenges","text":"","title":"The challenges:"},{"location":"User-Guide_Migration_from_Bananian/#sd-cards-wear-out-after-a-certain-amount-of-data-being-written-to","text":"Only reasonable base for an migration to Armbian would be an updated Bananian installation (Bananian 16.04, already Debian Jessie based, Nico\u2019s 4.4 kernel). In case Bananian users are still on version 15.04 or earlier they need to upgrade to a more recent Bananian version anyway to move Bananian\u2019s base to Jessie. Such apt-get dist-upgrade tasks come with heavy write activity. Especially when planning a dist-upgrade to Stretch later this amount of random write activity on older/smaller SD cards might kill them. If the SD card is not brand new it\u2019s highly recommended to create a clone/backup first prior to every upgrade step. If the SD card is really old please be prepared that it might not survive an apt-get dist-upgrade .","title":"SD cards wear out after a certain amount of data being written to"},{"location":"User-Guide_Migration_from_Bananian/#all-hardware-will-die-eventually","text":"A lot of Bananian installations today have been running 24/7 for 3 years or even longer. While these little SBC are well suited for light-weight server tasks, the hardware can\u2019t exactly be called \u2018server grade\u2019. Please keep this in mind if you\u2019re about to spend some time on a manual migration attempt that once you\u2019re done maybe your hardware will stop working few weeks/months later if it already runs +24 months.","title":"All hardware will die eventually"},{"location":"User-Guide_Migration_from_Bananian/#hardware-up-to-the-task","text":"The vast majority of boards Bananian runs on is based on Allwinner\u2019s dual core A20 SoC which was a nice improvement over the first single-core Raspberry Pis few years ago but is pretty slow by today\u2019s standards. An awful lot of users (us Armbians all included) were excited by A20\u2019s \u2018native SATA\u2019 capabilities few years ago just to realize after purchase when using SATA attached storage that it\u2019s awfully slow and most probably the slowest \u2018native\u2019 SATA implementation existing (please wake up if in doubt and educate yourself here , here or here . Important: combining Allwinner\u2019s crappy SATA implementation with port multipliers is always wrong ). At the time of this writing (Oct 2017) Armbian supports +25 other ARM boards that show between 2 and 6 times better CPU performance than A20 devices. +20 boards we support show better network performance (A20 Gigabit Ethernet is not fully capable of 940 Mbits/sec in both directions). +15 boards support 2GB DRAM (a few even more just recently). And if you don\u2019t need Gigabit Ethernet you can get a new and fully supported board still better suited for light-weight server tasks than any Banana Pi for as less as $11 shipping included (check this overview please). While this diversity of ARM species might be confusing the good news is: When Armbian is running on them they all behave the same.","title":"Hardware up to the task?"},{"location":"User-Guide_Migration_from_Bananian/#alternatives-to-an-in-place-migration","text":"","title":"Alternatives to an in-place migration:"},{"location":"User-Guide_Migration_from_Bananian/#continue-on-same-hardware-but-prevent-sd-card-hassles","text":"Especially if you run since years off the same SD card please be prepared that it might not survive an apt-get dist-upgrade and similar upgrade/crossgrade tasks. It\u2019s strongly recommended to clone/backup your card prior to every necessary upgrade step. Since this is time consuming and just a measure to prepare for what will happen in the future anyway (your SD card failing eventually \u2013 if you\u2019re lucky immediately, if you\u2019re out of luck it will corrupt a lot of data dying slowly) a great idea is to buy a new one now . Please see our community\u2019s collection of SD card performance tests and especially the 3 links at the top dealing with reliability concerns. Once you bought a new, fast and hopefully reliable SD card, you should test it according to our documentation , then burn a fresh Armbian image on it and manually transfer data and settings from your Bananian installation. This way you preserve your current settings/data on the old Bananian SD card saving you also a lot of time/efforts to clone/backup stuff. Important note: if you\u2019re interested in NAS use cases you could also choose an OMV image from official download location (all the ARM board images are now based on Armbian, funnily even the ones for Raspberry Pi)","title":"Continue on same hardware but prevent SD card hassles"},{"location":"User-Guide_Migration_from_Bananian/#replacing-the-hardware","text":"If your Bananian installation has been running for years, you better think about evaluating new hardware now. As explained above, A20\u2019s SATA implementation is awfully slow compared to good SATA implementations (Espressobin, Clearfog, Helios4) or even recent USB3 solutions, also Banana Pis can not saturate Gigabit Ethernet. It\u2019s almost 2018 now and we can choose from a variety of energy efficient boards more suited for the job. My personal strategy was turning the various A20 servers into backup devices now receiving btrfs snapshots from better suited ARM servers in the meantime. New installation on new board, carefully migrating settings from Bananas, Cubietrucks or Lime boards to new server, testing, testing, testing, new installation on A20 device, setting up btrfs send|receive, testing, testing, testing, done.","title":"Replacing the hardware"},{"location":"User-Guide_Migration_from_Bananian/#in-place-migration-tipps","text":"Since there is no easy migration tool you can only rely on contents collected below https://github.com/armbian/build/issues/648 \u2013 if you read carefully through we had some hope experienced Bananian users would be volunteering in providing an in-place upgrade tool from Bananian to Armbian but unfortunately to no avail. So 6 months after the problem came to our attention we\u2019re now providing this document to help those affected taking the right decisions. Still no need to hurry, Bananian receives bug and security fixes for another 6 months so take your time and evaluate carefully which way to choose. Trivia: Anyone understanding german will enjoy Nico\u2019s refreshing Rise and Fall of Bananian Linux talk.","title":"In-place migration tipps:"},{"location":"board_details/clearfog/","text":"To boot the image from USB flash: Write the image to a USB flash drive Insert the flash drive into the USB3.0 port Load the modified u-boot (from the Armbian image) using the UART method Stop the default boot sequence Execute in u-boot prompt: run usbboot To flash the image to eMMC: Boot the image from USB flash Write the image to eMMC using dd or other methods Mount the eMMC partition and add a line emmc_fix=on to /boot/armbianEnv.txt file - this changes the DT during boot to switch from SD with card detect switch to a non-removable eMMC. Unmount the eMMC partition and reboot Please refer to this forum thread for the USB boot details and this thread for a discussion of known eMMC issues.","title":"Clearfog"},{"location":"board_details/espressobin/","text":"manual flashing to latest u-boot is mandatory! Download the right boot flash for your board: 512,1G,2G, number of RAM chips and appropirate memory speeds. You can obtain numbers from current boot prompt. Copy this flash-image-MEM-RAM_CHIPS-CPU_DDR_boot_sd_and_usb.bin to your FAT formatted USB key, plug it into USB3.0 port and execute from u-boot prompt: bubt flash-image-MEM-RAM_CHIPS-CPU_DDR_boot_sd_and_usb.bin spi usb After updating your SPI flash with most recent \u201csd_and_usb\u201d u-boot, you can boot from USB or SD card the exact same way. in case you came from stock boot loader or your boot environment was erased somehow, this is what you need to put into u-boot: setenv initrd_addr 0x1100000 setenv image_name boot/Image setenv load_script 'if test -e mmc 0:1 boot/boot.scr; then echo \\\"... booting from SD\\\";setenv boot_interface mmc;else echo \\\"... booting from USB/SATA\\\";usb start;setenv boot_interface usb;fi;if test -e \\$boot_interface 0:1 boot/boot.scr;then ext4load \\$boot_interface 0:1 0x00800000 boot/boot.scr; source; fi' setenv bootcmd 'run get_images; run set_bootargs; run load_script;booti \\$kernel_addr \\$ramfs_addr \\$fdt_addr' saveenv If you manage to crash your SPI, proceed with SATA boot recovery . booting directly from SATA is currently broken. rebooting works with 4.14.y and SD media while it is broken with SATA and USB (always stops)","title":"Espressobin"},{"location":"board_details/miqi/","text":"How to unbrick MiQi? When you can\u2019t restore your bootloader with pressing and holding the button while powering, you need to shorten this resistor with some tweezers and power the board. Than proceed with flashing stock u-boot .","title":"Miqi"},{"location":"board_details/odroidc1/","text":"Please note: From a software point of view ODROID C1, C1+ and C0 are (nearly) identical. For Hardware differences between C1 and C1+ and to see how to use USB OTG on the latter please see here . C0 is a stripped down and more power efficient C1+ that can be battery powered (see here how to read out battery voltage ) Comprehensive device information and various tips&tricks can be found in Hardkernel\u2019s wiki . Please be aware that some of the information does not apply to Armbian (eg. we use a different partition table). Schematics can be found here . Idle consumption of an ODROID-C1+ with Armbian defaults varies between 1800 mW (@504 MHz) and 1900 mW (@1728 MHz \u2013 temperature also differs just by 2\u00b0C \u2013 for reasons please refer to the \u2018race to idle\u2019 concept . By defining setenv hdmioutput \"0\" and setenv vpu \"0\" in /boot/boot.ini followed by a reboot you get true headless mode (no consumption savings but MemTotal increases from 804 MB to 941 MB \u2013 check /proc/meminfo if in doubt) You can save at least 170mW by cutting power to the internal USB hub (and also all USB devices connected to any of the type A receptacles) using /sys/class/gpio/gpio4 (see description here ). The same way you have full control over power consumption of a connected host powered USB disk: umount /mnt/usb && echo 0 >/sys/class/gpio/gpio4/value and echo 1 >/sys/class/gpio/gpio4/value && sleep 2 && mount /mnt/usb Interestingly at least on C1+ consumption remains the same if you switch from Gbit to Fast Ethernet or disable Ethernet at all. It seems the GbE PHY is powered all the time (maybe related to performance/stabiity problems on ODROID-C1 in early 2015 ) Ethernet performance is ~940 Mbits/sec in TX direction and 400-500 Mbits/sec in RX direction. You might be able to tweak the latter a little, just have a look in the link one paragraph above. the red led is a power led while the blue led is custom. Boot stage: as soon as u-boot is loaded the blue led lights solid and when kernel starts this changes to heartbeat blinking with default settings. Check cat /sys/class/leds/*blue*/trigger for other functionality.","title":"Odroidc1"},{"location":"board_details/odroidc2/","text":"Comprehensive device information and various tips&tricks can be found in Hardkernel\u2019s wiki . Please be aware that some of the information does not apply to Armbian (eg. we use a different partition table). Schematics can be found here . Idle consumption with legacy image in headless mode ( setenv nographics \"1\" defined in /boot/boot.ini ) and only Gigabit Ethernet connected is between ~2300 mW (@500 MHz) and ~2400 mW (@1536 MHz). Hardkernel provides the possibility to exceed 1536 MHz max cpufreq but Armbian refrains from doing so. In case you want to change settings please keep in mind that you might have to adjust both /boot/boot.ini and /etc/defaults/cpufrequtils . The legacy kernel we use implements a few different cpufreq governors that show partially strange behaviour ( interactive most of the times acting like performance for example). Since idle consumption differences between different cpufreq governors are negligible choosing even performance seems to be ok. At least conservative governor that switches between upper and lower clockspeeds (for details see here ) leads to some USB performance drops while not providing significant savings. In case you activate higher clockspeeds please keep in mind that switching then to performance governor is needed since otherwise you might end up with a slower system since the added cpufreq operating points will slow down switching to highest clockspeed when needed. If you don\u2019t need GbE network transfer speeds switching to Fast Ethernet with ethtool -s eth0 speed 100 duplex full saves ~230 mW. Completely disabling Ethernet saves an additional 100mW. GbE Ethernet speed should reach 935 Mbits/sec in TX direction. In RX direction with defaults you should get 800 Mbits/sec but with some tuning it should be able to exceed 900 Mbits/sec: echo 32768 > /proc/sys/net/core/rps_sock_flow_entries echo 32768 > /sys/class/net/eth0/queues/rx-0/rps_flow_cnt You can save at least 170mW by cutting power to the internal USB hub (and also all USB devices connected to any of the type A receptacles) using /sys/class/gpio/gpio126 (see description here ). The same way you have full control over power consumption of a connected host powered USB disk: umount /mnt/usb && echo 0 >/sys/class/gpio/gpio126/value and echo 1 >/sys/class/gpio/gpio126/value && sleep 2 && mount /mnt/usb Reducing DRAM clockspeed to reduce consumption doesn\u2019t work (difference between default 912 MHz and 408 MHz is just ~100mW less and also requires a reboot ) the red led is a power led while the blue led is custom. Boot stage: as soon as u-boot is loaded the blue led lights solid and when kernel starts this changes to heartbeat blinking with default settings. Check cat /sys/class/leds/*blue*/trigger for other functionality.","title":"Odroidc2"},{"location":"board_details/odroidhc1/","text":"a stripped down XU4 version dropping the internal USB hub, display and GPIO support but adding instead a great performing and UAS capable USB-to-SATA bridge (JMS578) directly to the PCB so no more cable/contact issues, no more underpowering and no more UAS hassles with some disk enclosures (that contain a broken SATA bridge or combine a working UAS capable chip with a branded/broken firmware) from Review: https://forum.armbian.com/topic/4983-odroid-hc1/ Software support efforts needed for HC1 (or the other variants MC1 or HC2) are zero since Hardkernel kept everything 100% compatible to ODROID XU4 HC1 is a very nice design addressing a few of XU3/XU4 former USB3 issues (mostly related to \u2018hardware\u2019 issues like cable/contact problems with USB3-A or underpowering) Heat dissipation works very well (and combining this enclosure design with a huge, slow and therefore silent fan is always an option, Hardkernel evens sells a large fan suitable for 4 HC1 or MC1 units) The used JMS578 bridge chip to provide SATA access is a really good choice since this IC does not only support UAS (USB Attached SCSI, way more efficient than the older MassStorage protocol and also the reason why SSDs perform twice as fast on HC1 now with 4.x kernel) but also SAT (\u2018SCSI / ATA Translation\u2019) so you can make use of tools like hdparm/hdidle without any issues and also TRIM (though software support is lacking at least in 4.9 kernel tested with) Dealing with attached SATA disks is way more reliable than on other \u2018USB only\u2019 platforms since connection/underpowering problems are solved Only downside is the age/generation of the Exynos 5422 SoC since being an ARMv7 design it\u2019s lacking for example \u2018ARM crypto extensions\u2019 compared to some more recent ARM SoCs which can do stuff like AES encryption a lot more efficient/faster","title":"Odroidhc1"},{"location":"board_details/orangepipc2/","text":"Following features that arent\u2019t present in the mainline kernel should work: Ethernet DVFS THS DRM/KMS HDMI display driver with audio (2ch / stereo only) and CEC support Refer to the status matrix for mainline kernel support status Features that do not work: CVBS (composite video) output Proper shutdown - switching off the power is recommended Suspend/resume Features that do not work and will not be added anytime soon: Hardware accelerated video decoding (Cedrus) Mali driver CSI camera input","title":"Orangepipc2"},{"location":"board_details/pine64/","text":"Important : A few Pine64+ devices suffer from a Gbit Ethernet issue related to the GbE PHY leading to a severe amount of packet losses which might render Ethernet unuseable. It\u2019s confirmed as hardware issue and if you\u2019re affected or not can be simply checked by testing network throughput with iperf3 . Against another GbE capable device you should exceed 900 Mbits/sec with Armbian (only 800 Mbits/sec in RX direction when not using Xenial due to iperf3 being single-threaded in both directions then and bottlenecked by CPU ). If you see low throughput and high retransmit counts then a work-around is to switch Pine64+ to Fast Ethernet only by adding ethtool -s eth0 speed 100 duplex full to /etc/rc.local . At the time of this writing a true fix is only replacing the defective board by Pine Microsystems Inc. The only led on the board is a power led, it starts to light as soon as power is available and does not indicate anything else. So the only \u2018DOA or not?\u2019 indicator on this board is to burn an image, connect Ethernet, power on the board and wait 20 seconds whether the leds on the Ethernet jack show activity or not. Comprehensive device information is available in linux-sunxi wiki . Idle consumption with legacy image is ~1500 mW on Pine64 (or Pine64+ forced to use Fast Ethernet) and 1870 mW on Pine64+ (if you don\u2019t need GbE network transfer speeds switching to Fast Ethernet with ethtool -s eth0 speed 100 duplex full saves ~350 mW). Since the default DC-IN connector unfortunately is made with a Micro USB jack it\u2019s important to keep in mind that most USB cables have a resistance way too high which leads to undervoltage situations. In case you run into stability problems please power your Pine64(+) through the Euler pins (see linux-sunxi wiki for details). If you clone one Armbian installation for more than one Pine64 please keep in mind that currently the Ethernet MAC address will be chosen randomly on first boot and then saved in /boot/uEnv.txt . To avoid MAC address collisions you must adjust the address there or delete the whole ethaddr line (next boot will assign a new MAC address automagically ). OS images from Aug 2016 or before suffer from this bug so /boot/uEnv.txt has to be adjusted manually in any case if more than one Pine64 joins the same Ethernet network. Even if HDMI situation is still somewhat limited Armbian starting with release 5.21 supports setting the default resolution in /boot/armbianEnv.txt (defaults to 720p60 and could be changed to 4K@30Hz for example with an entry disp_mode=2160p30 \u2013 for the list of supported resolutions please have a look into /boot/boot.cmd ) If you use a DVI display don\u2019t forget to define disp_dvi_compat=1 in /boot/armbianEnv.txt (supported starting with 5.21). If you want to run heavy loads on Pine64 please keep in mind that you might need a heatsink to prevent throttling. Armbian uses community throttling settings that protect A64 SoC from overheating but without improved heat dissipation any heavy workload running longer than 60 seconds will result in CPU cores being clocked down to stay below 90\u00b0C SoC temperature. Situation with mainline kernel can be considered experimental. At the moment only basic functionality is implemented and no thermal protection (throttling) is working (no cpufreq scaling also and no access to PMIC too). Therefore also pretty conservative settings are used which negatively impact performance. In case you use mainline kernel already you can adjust cpufreq to 864 MHz for example by adding a line with mw.l 0x1c20000 0x80001110 to /boot/boot.cmd (don\u2019t exceed 864 MHz now since VDD_CPUX is currently limited to 1.1V ). By defining mw.l 0x1c2005c 1 on a separate line you can speed up USB and Ethernet \u2013 Reference ). It\u2019s possible to convert the upper USB port (normally an OTG port) into a full USB host port using an own PHY by setting some magic bits . To use/configure Wi-Fi (currently only supported with legacy images) the most simple way is to use NetworkManager . Simply follow these steps (as root): echo \"blacklist 8723bs_vq0\" >/etc/modprobe.d/8723bs_vq0.conf (optional, not really necessary) sed -i 's/p2p0/p2p0,wlan1/' /etc/NetworkManager/NetworkManager.conf (optional, not really necessary) nmtui (choose then Activate a connection ) You could also use the other Wi-Fi interface for an access point at the same time. In this case you want to use wlan1 and follow these instructions . Please note that Armbian already ships with an example default config /etc/network/interfaces.hostapd using wlan0 and that we also ship with an own hostapd version (check with dpkg -l | grep hostapd ). Starting with Armbian 5.21 fixed camera drivers for both SK54EC and OV5640 are included. Currently BT is not supported out of the box by Armbian. Please read through this thread in pine64 forum to enable it. Starting with Armbian 5.24 in /boot/armbianEnv.txt camera support can be activated: camera_type=none|s5k4ec|ov5640 (defaults to none , reboot needed for changes to take effect) Also starting with 5.24 Pine64\u2019s own LCD with touchscreen support can simply be activated in /boot/armbianEnv.txt by setting pine64_lcd=on and adding gt9xxf_ts to /etc/modules followed by a reboot. Please note that current gt9xxf_ts driver seems to be buggy and crashes on shutdown. Starting with 5.25 in /boot/armbianEnv.txt two more parameters can be set: gmac-tx-delay (defaults to 3 ) and gmac-rx-delay (defaults to 0 ). Adjusting this parameters should not be necessary but in case you are curious or experience bad Gigabit Ethernet performance please read through the appropriate github issue .","title":"Pine64"},{"location":"boards/bananapi/","text":"total memory is 1000Mb (disabled all memory reservations for GPU on CLI images) drivers for LVDS LCD display modules are added. TS module: ft5x_ts, added configuration for 7\u2033 \u2013 other sizes .","title":"Bananapi"},{"location":"boards/bananapiplus/","text":"This is a universal image shared with the Banana Pi board. To get full functionality of this board please login as root and execute: echo 'fdtfile=sun7i-a20-bananapi-m1-plus.dtb' >> /boot/armbianEnv.txt ln -fs bin/bananapim1plus.bin /boot/script.bin reboot WiFi does not want to connect in legacy kernel, while it works fine in mainline.","title":"Bananapiplus"},{"location":"boards/beelinkx2/","text":"Device has different wireless chips so wlan0 (WIFI connection) might not work out of the box.","title":"Beelinkx2"},{"location":"boards/cubieboard/","text":"installation to NAND with root on SATA/USB is not supported. Legacy kernel only, where NAND support exist. total memory is 1000Mb (disabled all memory reservations for GPU on CLI images)","title":"Cubieboard"},{"location":"boards/cubieboard2/","text":"PWM ready on pin PB2 (legacy) total memory is 1000Mb (disabled all memory reservations for GPU on CLI images) support for dual micro SD card version (since v4.5) make sure you power the board via power connector otherwise your USB port won\u2019t be powered","title":"Cubieboard2"},{"location":"boards/cubietruck/","text":"PWM ready on pin PB2 (legacy) bluetooth working with on-board device. Enabled by default on both kernels. total memory is 2000Mb (disabled all memory reservations for GPU on CLI images) due to bad PCB placement, there is some crosstalk between Wifi and VGA in certain videomodes make sure you power the board via power connector otherwise your USB port won\u2019t be powered Our OS images are only for A20 based Cubietruck and do not work on H8 based so called Cubietruck Plus (we don\u2019t support CT+ anytime soon due too some design flaws like no real SATA and thermal problems)","title":"Cubietruck"},{"location":"boards/cubox-i/","text":"mainline kernel images: audio does not work on all devices, Bluetooth is unstable.","title":"Cubox i"},{"location":"boards/lamobo-r1/","text":"total memory is 1000Mb (disabled all memory reservations for GPU) drivers for LVDS LCD display modules are added. TS module: ft5x_ts, added configuration for 7\u2033 \u2013 other sizes . legacy kernel: BCM53125 switch configured as follows \u2013 looking at front of ports: |2|1|0|4|(LAN=manual) |3|(WAN=dhcp and bridged to enabled wireless adapter in (theoretical) high throughput mode with SSID lamobo and password 12345678 mainline kernel: please check the \u201cKnown issues\u201d tab.","title":"Lamobo r1"},{"location":"boards/lepotato/","text":"Troubles with HDMI to VGA converters Not many screen resolution supported Ethernet drivers need some fixing","title":"Lepotato"},{"location":"boards/lime-a10/","text":"installation to NAND with root on SATA/USB is not supported. Legacy kernel only, where NAND support exist.","title":"Lime a10"},{"location":"boards/miqi/","text":"it\u2019s highly recommended to power via header with quality and powerful (3A) PSU - if you want stable operations and overclocking? In another words - don\u2019t even try to power via stock micro USB power connector since your board will suffer from regular crashing and might not even boot up. to boot from SD card you need to press and hold a button on the back side of the board and power on. This erases bootloader on eMMC and now you can boot from SD. In case of troubles use this tool to restore stock bootloader . known issues: MALI and video acceleration libraries are not installed yet overclocking to 2.2Ghz is possible with (patched) mainline kernel. Enable with: echo 1 > /sys/devices/system/cpu/cpufreq/boost # enable turbo nano /etc/default/cpufrequtils # adjust new limit /etc/init.d/cpufrequtils restart # restart cpufrequtils","title":"Miqi"},{"location":"boards/nanopiair/","text":"Wireless: Air has no aerial so you need to attach an antenna to the u.FL connector! known issues with legacy images / testing needed: audio out in all variants serial console gadget on the OTG port is available after the system boots up. Please make sure that board is properly powered (i.e. with microUSB Y cable or via GPIO pins) because a standard PC USB port will not provide enough current to the board","title":"Nanopiair"},{"location":"boards/nanopik2/","text":"mainline kernel images: HDMI output not yet implemented troubles with HDMI to VGA converters. Not many screen resolution supported","title":"Nanopik2"},{"location":"boards/nanopim1/","text":"You can use this image also with pcDuino4 Nano (being an OEM variant of NanoPi M1 )","title":"Nanopim1"},{"location":"boards/nanopineo/","text":"known issues with legacy images / testing needed: audio out in all variants serial console gadget on the OTG port is available after the system boots up. Please make sure that board is properly powered (i.e. with microUSB Y cable or via GPIO pins) because a standard PC USB port will not provide enough current to the board","title":"Nanopineo"},{"location":"boards/orangepi/","text":"This is a universal image shared with the Banana Pi board. To get full functionality of this board please login as root and execute: apt-get update apt-get upgrade source /etc/armbian-release dpkg -r linux-u-boot-bananapi-${BRANCH} linux-$(lsb_release -cs)-root-${BRANCH}-bananapi apt-get -y install linux-u-boot-orangepi-${BRANCH} linux-$(lsb_release -cs)-root-${BRANCH}-orangepi ln -fs bin/orangepi.bin /boot/script.bin echo orangepi > /etc/hostname reboot","title":"Orangepi"},{"location":"boards/orangepilite/","text":"serial console gadget on the OTG port is available after the system boots up. Please make sure that board is properly powered (i.e. with microUSB Y cable or via GPIO pins) because a standard PC USB port will not provide enough current to the board","title":"Orangepilite"},{"location":"boards/orangepizero/","text":"serial console gadget on the OTG port is available after the system boots up. Please make sure that board is properly powered (i.e. with microUSB Y cable or via GPIO pins) because a standard PC USB port will not provide enough current to the board it is possible to boot Armbian images from USB storage if a proper mainline u-boot is programmed to the onboard SPI flash","title":"Orangepizero"},{"location":"boards/pine64/","text":"it\u2019s recommended to power the board through GPIO header","title":"Pine64"},{"location":"boards/pinebook-a64/","text":"having anything plugged into headphone jack might prevent booting (serial console pinmuxed) touchpad occasionally causes mouse pointer jumps HDMI output not yet implemented","title":"Pinebook a64"},{"location":"boards/tinkerboard/","text":"Severe powering troubles due to Micro USB power connector. It\u2019s recommended to power through GPIO pins to prevent under-voltage issues (instabilities, boot/crash cycles). Overclocking to 2.2GHz is possible with quality 3A PSU connected to GPIO pins and (patched) mainline kernel. Enable with: echo 1 > /sys/devices/system/cpu/cpufreq/boost # enable turbo nano /etc/default/cpufrequtils # adjust new limit service cpufrequtils restart # restart cpufrequtils","title":"Tinkerboard"},{"location":"known_issues/cubox/","text":"Gigabit ethernet transfer rate is around 50% of its theoretical max rate (internal chip bus limitation) Mainline kernel images (all boards) ( next branch) use armbian-config to select proper DTB for your board (armbian-config -> system -> DTB)","title":"Cubox"},{"location":"known_issues/odroidc2/","text":"","title":"Odroidc2"},{"location":"known_issues/odroidhc1/","text":"Legacy kernel images Based on a review from @tkaiser, https://forum.armbian.com/topic/4983-odroid-hc1/ Use next kernel, don\u2019t think about USB3 issues any more (that\u2019s a XU4 problem), don\u2019t expect serial console problems (that was an Armbian problem), and please overthink \u2018rootfs on HDD\u2019 (on SSD that\u2019s great, HDDs are too slow and you prevent them from sleeping when moving the rootfs on them). eMMC install might be broken if you don\u2019t have recent uboot on your eMMC card - you must update it. Add run copy_uboot_sd2emmc to your boot.ini, boot from SD card with attached eMMC. This is one time job - remove that command from boot.ini, serial console is broken. Mainline kernel images TBD Hardkernel kept everything 100% compatible to ODROID XU4 With HC1 we\u2019re talking about Hardkernel\u2019s 4.9 or mainline Unverified matter derived from comment chain in the review Mine is not connecting at gigabit - fast ethernet only. Same cable (+few others), same PSU, same SD card, any kernel, while XU4 runs at Gigabit w/o problem Possibly a cable quality issue, as a cable swap caused the problem to disappear Notes 1. Based on the XU4 template with exceptions To avoid \u2018using up\u2019 write cycles on the SD media, once working, move to a RO root filesystem, and \u2018chain boot\u2019 into the 2.5 in SATA drive (either SSD or spinnnig) which do not have the same \u2018wear\u2019 issues Boot message chain 1. Made with: armbianmonitor -u output test run done with external RTL8153 behind internal USB3 hub on XU4 http://sprunge.us/cOJP","title":"Odroidhc1"},{"location":"known_issues/odroidxu4/","text":"eMMC install might be broken if you don\u2019t have recent uboot on your eMMC card - you must update it. Boot from SD card, run nand-sata-install and choose \u201cUpdate bootloader on a special eMMC partition\u201d. After that, you can use eMMC as boot device. You only need to do this once.","title":"Odroidxu4"},{"location":"known_issues/sun4i/","text":"Mainline kernel ( next / dev branches) no MALI drivers different GPIO numbering no video acceleration schedutil governor may cause clicks and pops on audio output - change to ondemand to work around this issue","title":"Sun4i"},{"location":"known_issues/sun50iw1/","text":"Legacy kernel images (all boards) ( default branch) Arm64 browsers (Firefox, Chromium, Iceweasel) may crash frequently. Armhf versions of these browsers should be used instead (Iceweasel and Firefox preinstalled in desktop images should be of the right architecture out of the box) HDMI output supports only limited number of predefined resolutions Hardware accelerated video decoding supports only limited number of video formats Kernel lockups on boot may happen, no solution yet: https://github.com/longsleep/build-pine64-image/issues/51 Mainline kernel images (all boards) ( next and dev branch) Check mainlining effort status matrix Board: Pine64/Pine64+ Gigabit Ethernet performance: on some boards was confirmed as hardware issue , though the legacy kernel received a workaround that may help on some boards. Gigabit Ethernet performance: setting TX/RX delays manually in /boot/armbianEnv may improve performance on some boards. Refer to this github issue for the details.","title":"Sun50iw1"},{"location":"known_issues/sun50iw2/","text":"All currently available OS images for H5 boards are experimental don\u2019t use them for anything productive but just to give constructive feedback to developers shutdown might result in reboots instead or board doesn\u2019t really power off (cut power physically)","title":"Sun50iw2"},{"location":"known_issues/sun7i/","text":"Legacy kernel ( default branches) unstable Bluetooth stack Mainline kernel ( next / dev branches) No Mali drivers No hardware accelerated video decoding Different GPIO numbering compared to the legacy kernel schedutil CPU governor may cause clicks and pops on audio output - change to ondemand to work around this issue Board: Lamobo R1 b53 switch driver in mainline kernel uses DSA interface for configuration instead of swconfig tool. Please check this issue for details underpower issues are possible when using hard drive, HDMI and wireless together. Connecting a battery may help Gigabit Ethernet transfer rate is around 300Mbit","title":"Sun7i"},{"location":"known_issues/sun8i/","text":"Legacy kernel images (all boards) ( default branch) HDMI output (if exists) supports only limited number of predefined resolutions TV Out is neither supported nor works as expected (only PAL/NTSC resolution, overscanning, no h3disp support, notes for OPi Zero ) 1-Wire protocol, reading out DHT11/DHT22 sensors or S/PDIF requires setting the minimum CPU frequency to 480MHz or higher Hardware accelerated video decoding supports only limited number of video formats \u2018Out of memory\u2019 (OOM) issues are possible due to a kernel bug Mainline kernel images (all boards) ( next / dev branches) No Mali drivers No hardware accelerated video decoding TV Out is not supported on any H2+/H3board Board: Orange Pi Zero and NanoPi Duo Onboard wireless module (XR819) has poor software support so wireless connection issues are expected Orange Pi Zero rev 1.4 reports false high CPU temperatures .","title":"Sun8i"},{"location":"known_issues/udoo/","text":"Gigabit ethernet transfer rate is around 50% of its theoretical max rate (internal chip bus limitation)","title":"Udoo"},{"location":"webpage/download-deprecated/","text":"Reasons for moving devices to this section: no active software development (mainline u-boot and kernel) no support from vendor (hardware samples, documentation, software packages) never was sold, only samples in small quantities were available hardware design flaws don\u2019t allow using these devices without stability issues Support status: images are stable but we don\u2019t test updating, images are provided with no support, most images has frozen kernel and u-boot packages to prevent their upgrades.","title":"Download deprecated"},{"location":"webpage/download-stable/","text":"Stable images were tested and they must work apart from known issues and features that were not implemented. Support is provided as far as possible (in general there is no support for 3rd party hardware like DVB tuners and software like Kodi). Please check the documentation and existing forum posts before posting a question. If you don\u2019t find your board, check other download sections: Work in progress and Deprecated . \u00b6","title":"Download stable"},{"location":"webpage/download-stable/#if-you-dont-find-your-board-check-other-download-sections-work-in-progress-and-deprecated","text":"","title":"If you don't find your board, check other download sections: Work in progress and Deprecated."},{"location":"webpage/download-wip/","text":"These are the boards we\u2019re currently working on but they are not ready! Images here are provided only for developers and experienced users.","title":"Download wip"}]}